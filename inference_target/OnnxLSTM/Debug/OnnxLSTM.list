
OnnxLSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000479c  08007d60  08007d60  00017d60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4fc  0800c4fc  0002073c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c4fc  0800c4fc  0002073c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c4fc  0800c4fc  0002073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4fc  0800c4fc  0001c4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c500  0800c500  0001c500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000073c  20000000  0800c504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002073c  2**0
                  CONTENTS
 10 .bss          00000b2c  2000073c  2000073c  0002073c  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  20001268  20001268  0002073c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002073c  2**0
                  CONTENTS, READONLY
 13 .comment      00000093  00000000  00000000  0002076c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b71d  00000000  00000000  000207ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d50  00000000  00000000  0002bf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007c0  00000000  00000000  0002dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005c9  00000000  00000000  0002e430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000215e7  00000000  00000000  0002e9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b328  00000000  00000000  0004ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6518  00000000  00000000  0005b308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000026f4  00000000  00000000  00121820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00123f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000073c 	.word	0x2000073c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d44 	.word	0x08007d44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000740 	.word	0x20000740
 80001cc:	08007d44 	.word	0x08007d44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <get_input>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_input()
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
    for(int i=0; i<AI_NETWORK_IN_1_SIZE; i++)
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	e009      	b.n	8000290 <get_input+0x20>
    {
        in_data[i] = 1.0;
 800027c:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <get_input+0x38>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	4413      	add	r3, r2
 8000284:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000288:	601a      	str	r2, [r3, #0]
    for(int i=0; i<AI_NETWORK_IN_1_SIZE; i++)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3301      	adds	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8000296:	dbf1      	blt.n	800027c <get_input+0xc>
    }
}
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000c08 	.word	0x20000c08

080002ac <ai_log_error>:

void ai_log_error(const ai_error err)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
 80002b4:	793b      	ldrb	r3, [r7, #4]
 80002b6:	4619      	mov	r1, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80002be:	461a      	mov	r2, r3
 80002c0:	4803      	ldr	r0, [pc, #12]	; (80002d0 <ai_log_error+0x24>)
 80002c2:	f006 fc83 	bl	8006bcc <iprintf>
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	08007d60 	.word	0x08007d60

080002d4 <ai_init>:


int ai_init()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
    ai_error error;
    const ai_handle acts[] = {activations};
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <ai_init+0x5c>)
 80002dc:	603b      	str	r3, [r7, #0]

    error = ai_network_create_and_init(&network, acts, NULL);
 80002de:	463b      	mov	r3, r7
 80002e0:	2200      	movs	r2, #0
 80002e2:	4619      	mov	r1, r3
 80002e4:	4813      	ldr	r0, [pc, #76]	; (8000334 <ai_init+0x60>)
 80002e6:	f002 fd83 	bl	8002df0 <ai_network_create_and_init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	607b      	str	r3, [r7, #4]
    if (error.type != AI_ERROR_NONE)
 80002ee:	793b      	ldrb	r3, [r7, #4]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d005      	beq.n	8000300 <ai_init+0x2c>
    {
        ai_log_error(error);
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f7ff ffd9 	bl	80002ac <ai_log_error>
        return -1;
 80002fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002fe:	e012      	b.n	8000326 <ai_init+0x52>
    }

    ai_input = ai_network_inputs_get(network, NULL);
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <ai_init+0x60>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f002 fde6 	bl	8002ed8 <ai_network_inputs_get>
 800030c:	4603      	mov	r3, r0
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <ai_init+0x64>)
 8000310:	6013      	str	r3, [r2, #0]
    ai_output = ai_network_outputs_get(network, NULL);
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <ai_init+0x60>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f002 fdf7 	bl	8002f0c <ai_network_outputs_get>
 800031e:	4603      	mov	r3, r0
 8000320:	4a06      	ldr	r2, [pc, #24]	; (800033c <ai_init+0x68>)
 8000322:	6013      	str	r3, [r2, #0]

    return 0;
 8000324:	2300      	movs	r3, #0
}
 8000326:	4618      	mov	r0, r3
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000808 	.word	0x20000808
 8000334:	20000804 	.word	0x20000804
 8000338:	20001088 	.word	0x20001088
 800033c:	2000108c 	.word	0x2000108c

08000340 <ai_run>:

int ai_run(const void* in_data, const void* out_data)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	6039      	str	r1, [r7, #0]
    ai_i32 n_batch;
    ai_error error;

    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800034a:	4b13      	ldr	r3, [pc, #76]	; (8000398 <ai_run+0x58>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <ai_run+0x5c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	605a      	str	r2, [r3, #4]

    n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <ai_run+0x60>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <ai_run+0x58>)
 8000360:	6811      	ldr	r1, [r2, #0]
 8000362:	4a0e      	ldr	r2, [pc, #56]	; (800039c <ai_run+0x5c>)
 8000364:	6812      	ldr	r2, [r2, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f002 fe26 	bl	8002fb8 <ai_network_run>
 800036c:	60f8      	str	r0, [r7, #12]
    if (n_batch != 1)
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d00c      	beq.n	800038e <ai_run+0x4e>
    {
        error = ai_network_get_error(network);
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <ai_run+0x60>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f002 fd17 	bl	8002dac <ai_network_get_error>
 800037e:	4603      	mov	r3, r0
 8000380:	60bb      	str	r3, [r7, #8]
        ai_log_error(error);
 8000382:	68b8      	ldr	r0, [r7, #8]
 8000384:	f7ff ff92 	bl	80002ac <ai_log_error>
        return -1;
 8000388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800038c:	e000      	b.n	8000390 <ai_run+0x50>
    }

    return 0;
 800038e:	2300      	movs	r3, #0
}
 8000390:	4618      	mov	r0, r3
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20001088 	.word	0x20001088
 800039c:	2000108c 	.word	0x2000108c
 80003a0:	20000804 	.word	0x20000804

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a8:	f000 fa38 	bl	800081c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ac:	f000 f814 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b0:	f000 f8a6 	bl	8000500 <MX_GPIO_Init>
  MX_CRC_Init();
 80003b4:	f000 f852 	bl	800045c <MX_CRC_Init>
  MX_USART2_UART_Init();
 80003b8:	f000 f872 	bl	80004a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ai_init();
 80003bc:	f7ff ff8a 	bl	80002d4 <ai_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  get_input();
 80003c0:	f7ff ff56 	bl	8000270 <get_input>
	  ai_run(in_data, out_data);
 80003c4:	4902      	ldr	r1, [pc, #8]	; (80003d0 <main+0x2c>)
 80003c6:	4803      	ldr	r0, [pc, #12]	; (80003d4 <main+0x30>)
 80003c8:	f7ff ffba 	bl	8000340 <ai_run>
	  get_input();
 80003cc:	e7f8      	b.n	80003c0 <main+0x1c>
 80003ce:	bf00      	nop
 80003d0:	20001080 	.word	0x20001080
 80003d4:	20000c08 	.word	0x20000c08

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b090      	sub	sp, #64	; 0x40
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0318 	add.w	r3, r7, #24
 80003e2:	2228      	movs	r2, #40	; 0x28
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f006 fc45 	bl	8006c76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fe:	2301      	movs	r3, #1
 8000400:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000402:	2310      	movs	r3, #16
 8000404:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000406:	2302      	movs	r3, #2
 8000408:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800040a:	2300      	movs	r3, #0
 800040c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800040e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000412:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000414:	f107 0318 	add.w	r3, r7, #24
 8000418:	4618      	mov	r0, r3
 800041a:	f000 fdc7 	bl	8000fac <HAL_RCC_OscConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000424:	f000 f8d2 	bl	80005cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000428:	230f      	movs	r3, #15
 800042a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042c:	2302      	movs	r3, #2
 800042e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000438:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f001 fdf0 	bl	8002028 <HAL_RCC_ClockConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800044e:	f000 f8bd 	bl	80005cc <Error_Handler>
  }
}
 8000452:	bf00      	nop
 8000454:	3740      	adds	r7, #64	; 0x40
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000460:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <MX_CRC_Init+0x3c>)
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <MX_CRC_Init+0x40>)
 8000464:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_CRC_Init+0x3c>)
 8000468:	2200      	movs	r2, #0
 800046a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <MX_CRC_Init+0x3c>)
 800046e:	2200      	movs	r2, #0
 8000470:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_CRC_Init+0x3c>)
 8000474:	2200      	movs	r2, #0
 8000476:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <MX_CRC_Init+0x3c>)
 800047a:	2200      	movs	r2, #0
 800047c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_CRC_Init+0x3c>)
 8000480:	2201      	movs	r2, #1
 8000482:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000484:	4804      	ldr	r0, [pc, #16]	; (8000498 <MX_CRC_Init+0x3c>)
 8000486:	f000 fb15 	bl	8000ab4 <HAL_CRC_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000490:	f000 f89c 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000758 	.word	0x20000758
 800049c:	40023000 	.word	0x40023000

080004a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004a6:	4a15      	ldr	r2, [pc, #84]	; (80004fc <MX_USART2_UART_Init+0x5c>)
 80004a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004c6:	220c      	movs	r2, #12
 80004c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004e4:	f001 ffd6 	bl	8002494 <HAL_UART_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004ee:	f000 f86d 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	2000077c 	.word	0x2000077c
 80004fc:	40004400 	.word	0x40004400

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a2a      	ldr	r2, [pc, #168]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800051c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052e:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a24      	ldr	r2, [pc, #144]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800054c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a18      	ldr	r2, [pc, #96]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2120      	movs	r1, #32
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f000 fcfd 	bl	8000f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000588:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <MX_GPIO_Init+0xc8>)
 800059a:	f000 fb7d 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800059e:	2320      	movs	r3, #32
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f000 fb6e 	bl	8000c98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	; 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40021000 	.word	0x40021000
 80005c8:	48000800 	.word	0x48000800

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <Error_Handler+0x8>
	...

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_MspInit+0x44>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <HAL_MspInit+0x44>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_MspInit+0x44>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_MspInit+0x44>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <HAL_MspInit+0x44>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_MspInit+0x44>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800060e:	2007      	movs	r0, #7
 8000610:	f000 fa1c 	bl	8000a4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <HAL_CRC_MspInit+0x38>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d10b      	bne.n	800064a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_CRC_MspInit+0x3c>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a09      	ldr	r2, [pc, #36]	; (800065c <HAL_CRC_MspInit+0x3c>)
 8000638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <HAL_CRC_MspInit+0x3c>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023000 	.word	0x40023000
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a17      	ldr	r2, [pc, #92]	; (80006dc <HAL_UART_MspInit+0x7c>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d128      	bne.n	80006d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_UART_MspInit+0x80>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <HAL_UART_MspInit+0x80>)
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	61d3      	str	r3, [r2, #28]
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_UART_MspInit+0x80>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <HAL_UART_MspInit+0x80>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <HAL_UART_MspInit+0x80>)
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	6153      	str	r3, [r2, #20]
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_UART_MspInit+0x80>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006b2:	230c      	movs	r3, #12
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006c2:	2307      	movs	r3, #7
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f000 fae2 	bl	8000c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	; 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40004400 	.word	0x40004400
 80006e0:	40021000 	.word	0x40021000

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler+0x4>

080006f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <UsageFault_Handler+0x4>

08000702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f8ba 	bl	80008a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000740:	4a14      	ldr	r2, [pc, #80]	; (8000794 <_sbrk+0x5c>)
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <_sbrk+0x60>)
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <_sbrk+0x64>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d102      	bne.n	800075a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <_sbrk+0x64>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <_sbrk+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <_sbrk+0x64>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	429a      	cmp	r2, r3
 8000766:	d207      	bcs.n	8000778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000768:	f006 fae4 	bl	8006d34 <__errno>
 800076c:	4603      	mov	r3, r0
 800076e:	220c      	movs	r2, #12
 8000770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000776:	e009      	b.n	800078c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <_sbrk+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <_sbrk+0x64>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <_sbrk+0x64>)
 8000788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3718      	adds	r7, #24
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20003000 	.word	0x20003000
 8000798:	00000800 	.word	0x00000800
 800079c:	20001090 	.word	0x20001090
 80007a0:	20001268 	.word	0x20001268

080007a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <SystemInit+0x20>)
 80007aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ae:	4a05      	ldr	r2, [pc, #20]	; (80007c4 <SystemInit+0x20>)
 80007b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000800 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007cc:	f7ff ffea 	bl	80007a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d2:	490d      	ldr	r1, [pc, #52]	; (8000808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <LoopForever+0xe>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e8:	4c0a      	ldr	r4, [pc, #40]	; (8000814 <LoopForever+0x16>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f6:	f006 faa3 	bl	8006d40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007fa:	f7ff fdd3 	bl	80003a4 <main>

080007fe <LoopForever>:

LoopForever:
    b LoopForever
 80007fe:	e7fe      	b.n	80007fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000800:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	2000073c 	.word	0x2000073c
  ldr r2, =_sidata
 800080c:	0800c504 	.word	0x0800c504
  ldr r2, =_sbss
 8000810:	2000073c 	.word	0x2000073c
  ldr r4, =_ebss
 8000814:	20001268 	.word	0x20001268

08000818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_2_IRQHandler>
	...

0800081c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_Init+0x28>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_Init+0x28>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f90d 	bl	8000a4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000832:	2000      	movs	r0, #0
 8000834:	f000 f808 	bl	8000848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000838:	f7ff fece 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_InitTick+0x54>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_InitTick+0x58>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f917 	bl	8000a9a <HAL_SYSTICK_Config>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e00e      	b.n	8000894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	d80a      	bhi.n	8000892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	f000 f8ed 	bl	8000a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <HAL_InitTick+0x5c>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800088e:	2300      	movs	r3, #0
 8000890:	e000      	b.n	8000894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000004 	.word	0x20000004

080008a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_IncTick+0x20>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_IncTick+0x24>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <HAL_IncTick+0x24>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20001094 	.word	0x20001094

080008d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_GetTick+0x14>)
 80008d6:	681b      	ldr	r3, [r3, #0]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20001094 	.word	0x20001094

080008e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <__NVIC_SetPriorityGrouping+0x44>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091a:	4a04      	ldr	r2, [pc, #16]	; (800092c <__NVIC_SetPriorityGrouping+0x44>)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	60d3      	str	r3, [r2, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <__NVIC_GetPriorityGrouping+0x18>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	f003 0307 	and.w	r3, r3, #7
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095c:	2b00      	cmp	r3, #0
 800095e:	db0a      	blt.n	8000976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b2da      	uxtb	r2, r3
 8000964:	490c      	ldr	r1, [pc, #48]	; (8000998 <__NVIC_SetPriority+0x4c>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	0112      	lsls	r2, r2, #4
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	440b      	add	r3, r1
 8000970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000974:	e00a      	b.n	800098c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4908      	ldr	r1, [pc, #32]	; (800099c <__NVIC_SetPriority+0x50>)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	3b04      	subs	r3, #4
 8000984:	0112      	lsls	r2, r2, #4
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	440b      	add	r3, r1
 800098a:	761a      	strb	r2, [r3, #24]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000e100 	.word	0xe000e100
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b089      	sub	sp, #36	; 0x24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	f1c3 0307 	rsb	r3, r3, #7
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	bf28      	it	cs
 80009be:	2304      	movcs	r3, #4
 80009c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3304      	adds	r3, #4
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d902      	bls.n	80009d0 <NVIC_EncodePriority+0x30>
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3b03      	subs	r3, #3
 80009ce:	e000      	b.n	80009d2 <NVIC_EncodePriority+0x32>
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43da      	mvns	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	401a      	ands	r2, r3
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	43d9      	mvns	r1, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	4313      	orrs	r3, r2
         );
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3724      	adds	r7, #36	; 0x24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a18:	d301      	bcc.n	8000a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00f      	b.n	8000a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <SysTick_Config+0x40>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a26:	210f      	movs	r1, #15
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a2c:	f7ff ff8e 	bl	800094c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <SysTick_Config+0x40>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a36:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <SysTick_Config+0x40>)
 8000a38:	2207      	movs	r2, #7
 8000a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	e000e010 	.word	0xe000e010

08000a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ff47 	bl	80008e8 <__NVIC_SetPriorityGrouping>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	4603      	mov	r3, r0
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a74:	f7ff ff5c 	bl	8000930 <__NVIC_GetPriorityGrouping>
 8000a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	6978      	ldr	r0, [r7, #20]
 8000a80:	f7ff ff8e 	bl	80009a0 <NVIC_EncodePriority>
 8000a84:	4602      	mov	r2, r0
 8000a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff5d 	bl	800094c <__NVIC_SetPriority>
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffb0 	bl	8000a08 <SysTick_Config>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e054      	b.n	8000b70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	7f5b      	ldrb	r3, [r3, #29]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d105      	bne.n	8000adc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fda2 	bl	8000620 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2202      	movs	r2, #2
 8000ae0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10c      	bne.n	8000b04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <HAL_CRC_Init+0xc4>)
 8000af0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f022 0218 	bic.w	r2, r2, #24
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	e00c      	b.n	8000b1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6899      	ldr	r1, [r3, #8]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f834 	bl	8000b7c <HAL_CRCEx_Polynomial_Set>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e028      	b.n	8000b70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	795b      	ldrb	r3, [r3, #5]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d105      	bne.n	8000b32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	e004      	b.n	8000b3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	6912      	ldr	r2, [r2, #16]
 8000b3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	695a      	ldr	r2, [r3, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	699a      	ldr	r2, [r3, #24]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	04c11db7 	.word	0x04c11db7

08000b7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000b8c:	231f      	movs	r3, #31
 8000b8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	75fb      	strb	r3, [r7, #23]
 8000b9e:	e063      	b.n	8000c68 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000ba0:	bf00      	nop
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	613a      	str	r2, [r7, #16]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d009      	beq.n	8000bc0 <HAL_CRCEx_Polynomial_Set+0x44>
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	f003 031f 	and.w	r3, r3, #31
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0f0      	beq.n	8000ba2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b18      	cmp	r3, #24
 8000bc4:	d846      	bhi.n	8000c54 <HAL_CRCEx_Polynomial_Set+0xd8>
 8000bc6:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <HAL_CRCEx_Polynomial_Set+0x50>)
 8000bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bcc:	08000c5b 	.word	0x08000c5b
 8000bd0:	08000c55 	.word	0x08000c55
 8000bd4:	08000c55 	.word	0x08000c55
 8000bd8:	08000c55 	.word	0x08000c55
 8000bdc:	08000c55 	.word	0x08000c55
 8000be0:	08000c55 	.word	0x08000c55
 8000be4:	08000c55 	.word	0x08000c55
 8000be8:	08000c55 	.word	0x08000c55
 8000bec:	08000c49 	.word	0x08000c49
 8000bf0:	08000c55 	.word	0x08000c55
 8000bf4:	08000c55 	.word	0x08000c55
 8000bf8:	08000c55 	.word	0x08000c55
 8000bfc:	08000c55 	.word	0x08000c55
 8000c00:	08000c55 	.word	0x08000c55
 8000c04:	08000c55 	.word	0x08000c55
 8000c08:	08000c55 	.word	0x08000c55
 8000c0c:	08000c3d 	.word	0x08000c3d
 8000c10:	08000c55 	.word	0x08000c55
 8000c14:	08000c55 	.word	0x08000c55
 8000c18:	08000c55 	.word	0x08000c55
 8000c1c:	08000c55 	.word	0x08000c55
 8000c20:	08000c55 	.word	0x08000c55
 8000c24:	08000c55 	.word	0x08000c55
 8000c28:	08000c55 	.word	0x08000c55
 8000c2c:	08000c31 	.word	0x08000c31
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d913      	bls.n	8000c5e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000c3a:	e010      	b.n	8000c5e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d90f      	bls.n	8000c62 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000c46:	e00c      	b.n	8000c62 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	2b0f      	cmp	r3, #15
 8000c4c:	d90b      	bls.n	8000c66 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000c52:	e008      	b.n	8000c66 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	75fb      	strb	r3, [r7, #23]
        break;
 8000c58:	e006      	b.n	8000c68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000c5a:	bf00      	nop
 8000c5c:	e004      	b.n	8000c68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000c5e:	bf00      	nop
 8000c60:	e002      	b.n	8000c68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000c62:	bf00      	nop
 8000c64:	e000      	b.n	8000c68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000c66:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8000c68:	7dfb      	ldrb	r3, [r7, #23]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10d      	bne.n	8000c8a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f023 0118 	bic.w	r1, r3, #24
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	371c      	adds	r7, #28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b087      	sub	sp, #28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca6:	e14e      	b.n	8000f46 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	2101      	movs	r1, #1
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 8140 	beq.w	8000f40 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d005      	beq.n	8000cd8 <HAL_GPIO_Init+0x40>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d130      	bne.n	8000d3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d0e:	2201      	movs	r2, #1
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	091b      	lsrs	r3, r3, #4
 8000d24:	f003 0201 	and.w	r2, r3, #1
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d017      	beq.n	8000d76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d123      	bne.n	8000dca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	08da      	lsrs	r2, r3, #3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3208      	adds	r2, #8
 8000d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	691a      	ldr	r2, [r3, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	6939      	ldr	r1, [r7, #16]
 8000dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0203 	and.w	r2, r3, #3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 809a 	beq.w	8000f40 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0c:	4b55      	ldr	r3, [pc, #340]	; (8000f64 <HAL_GPIO_Init+0x2cc>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a54      	ldr	r2, [pc, #336]	; (8000f64 <HAL_GPIO_Init+0x2cc>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b52      	ldr	r3, [pc, #328]	; (8000f64 <HAL_GPIO_Init+0x2cc>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e24:	4a50      	ldr	r2, [pc, #320]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	089b      	lsrs	r3, r3, #2
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e4e:	d013      	beq.n	8000e78 <HAL_GPIO_Init+0x1e0>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a46      	ldr	r2, [pc, #280]	; (8000f6c <HAL_GPIO_Init+0x2d4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d00d      	beq.n	8000e74 <HAL_GPIO_Init+0x1dc>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a45      	ldr	r2, [pc, #276]	; (8000f70 <HAL_GPIO_Init+0x2d8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d007      	beq.n	8000e70 <HAL_GPIO_Init+0x1d8>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a44      	ldr	r2, [pc, #272]	; (8000f74 <HAL_GPIO_Init+0x2dc>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d101      	bne.n	8000e6c <HAL_GPIO_Init+0x1d4>
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e006      	b.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e6c:	2305      	movs	r3, #5
 8000e6e:	e004      	b.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e002      	b.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	f002 0203 	and.w	r2, r2, #3
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	4093      	lsls	r3, r2
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e8a:	4937      	ldr	r1, [pc, #220]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ebc:	4a2e      	ldr	r2, [pc, #184]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ee6:	4a24      	ldr	r2, [pc, #144]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f10:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f3a:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f47f aea9 	bne.w	8000ca8 <HAL_GPIO_Init+0x10>
  }
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	371c      	adds	r7, #28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48000c00 	.word	0x48000c00
 8000f78:	40010400 	.word	0x40010400

08000f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f8c:	787b      	ldrb	r3, [r7, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fbc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f001 b823 	b.w	8002018 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 817d 	beq.w	80012e2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fe8:	4bbc      	ldr	r3, [pc, #752]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 030c 	and.w	r3, r3, #12
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d00c      	beq.n	800100e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff4:	4bb9      	ldr	r3, [pc, #740]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d15c      	bne.n	80010ba <HAL_RCC_OscConfig+0x10e>
 8001000:	4bb6      	ldr	r3, [pc, #728]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100c:	d155      	bne.n	80010ba <HAL_RCC_OscConfig+0x10e>
 800100e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001012:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001022:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001026:	fab3 f383 	clz	r3, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	095b      	lsrs	r3, r3, #5
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d102      	bne.n	8001040 <HAL_RCC_OscConfig+0x94>
 800103a:	4ba8      	ldr	r3, [pc, #672]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	e015      	b.n	800106c <HAL_RCC_OscConfig+0xc0>
 8001040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001044:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001048:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001058:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800105c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001060:	fa93 f3a3 	rbit	r3, r3
 8001064:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001068:	4b9c      	ldr	r3, [pc, #624]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001070:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001074:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001078:	fa92 f2a2 	rbit	r2, r2
 800107c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001080:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001084:	fab2 f282 	clz	r2, r2
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	f042 0220 	orr.w	r2, r2, #32
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	f002 021f 	and.w	r2, r2, #31
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	4013      	ands	r3, r2
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 811f 	beq.w	80012e0 <HAL_RCC_OscConfig+0x334>
 80010a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f040 8116 	bne.w	80012e0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	f000 bfaf 	b.w	8002018 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ca:	d106      	bne.n	80010da <HAL_RCC_OscConfig+0x12e>
 80010cc:	4b83      	ldr	r3, [pc, #524]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a82      	ldr	r2, [pc, #520]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 80010d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e036      	b.n	8001148 <HAL_RCC_OscConfig+0x19c>
 80010da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0x158>
 80010ea:	4b7c      	ldr	r3, [pc, #496]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a7b      	ldr	r2, [pc, #492]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 80010f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b79      	ldr	r3, [pc, #484]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a78      	ldr	r2, [pc, #480]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 80010fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e021      	b.n	8001148 <HAL_RCC_OscConfig+0x19c>
 8001104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001108:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0x184>
 8001116:	4b71      	ldr	r3, [pc, #452]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a70      	ldr	r2, [pc, #448]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b6e      	ldr	r3, [pc, #440]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6d      	ldr	r2, [pc, #436]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e00b      	b.n	8001148 <HAL_RCC_OscConfig+0x19c>
 8001130:	4b6a      	ldr	r3, [pc, #424]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a69      	ldr	r2, [pc, #420]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 8001136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b67      	ldr	r3, [pc, #412]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a66      	ldr	r2, [pc, #408]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001148:	4b64      	ldr	r3, [pc, #400]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	f023 020f 	bic.w	r2, r3, #15
 8001150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001154:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	495f      	ldr	r1, [pc, #380]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 800115e:	4313      	orrs	r3, r2
 8001160:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001166:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d059      	beq.n	8001226 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001172:	f7ff fbad 	bl	80008d0 <HAL_GetTick>
 8001176:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	e00a      	b.n	8001192 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fba8 	bl	80008d0 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b64      	cmp	r3, #100	; 0x64
 800118a:	d902      	bls.n	8001192 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	f000 bf43 	b.w	8002018 <HAL_RCC_OscConfig+0x106c>
 8001192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001196:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800119e:	fa93 f3a3 	rbit	r3, r3
 80011a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80011a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	fab3 f383 	clz	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	095b      	lsrs	r3, r3, #5
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d102      	bne.n	80011c4 <HAL_RCC_OscConfig+0x218>
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	e015      	b.n	80011f0 <HAL_RCC_OscConfig+0x244>
 80011c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011dc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80011e4:	fa93 f3a3 	rbit	r3, r3
 80011e8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80011ec:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011f4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80011f8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80011fc:	fa92 f2a2 	rbit	r2, r2
 8001200:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001204:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001208:	fab2 f282 	clz	r2, r2
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	f042 0220 	orr.w	r2, r2, #32
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	f002 021f 	and.w	r2, r2, #31
 8001218:	2101      	movs	r1, #1
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0ab      	beq.n	800117c <HAL_RCC_OscConfig+0x1d0>
 8001224:	e05d      	b.n	80012e2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001226:	f7ff fb53 	bl	80008d0 <HAL_GetTick>
 800122a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	e00a      	b.n	8001246 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fb4e 	bl	80008d0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b64      	cmp	r3, #100	; 0x64
 800123e:	d902      	bls.n	8001246 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	f000 bee9 	b.w	8002018 <HAL_RCC_OscConfig+0x106c>
 8001246:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800124a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800125a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125e:	fab3 f383 	clz	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	095b      	lsrs	r3, r3, #5
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b01      	cmp	r3, #1
 8001270:	d102      	bne.n	8001278 <HAL_RCC_OscConfig+0x2cc>
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	e015      	b.n	80012a4 <HAL_RCC_OscConfig+0x2f8>
 8001278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001280:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001284:	fa93 f3a3 	rbit	r3, r3
 8001288:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800128c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001290:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001294:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_RCC_OscConfig+0x330>)
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012a8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80012ac:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012b0:	fa92 f2a2 	rbit	r2, r2
 80012b4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80012b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80012bc:	fab2 f282 	clz	r2, r2
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	f042 0220 	orr.w	r2, r2, #32
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	f002 021f 	and.w	r2, r2, #31
 80012cc:	2101      	movs	r1, #1
 80012ce:	fa01 f202 	lsl.w	r2, r1, r2
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1ab      	bne.n	8001230 <HAL_RCC_OscConfig+0x284>
 80012d8:	e003      	b.n	80012e2 <HAL_RCC_OscConfig+0x336>
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 817d 	beq.w	80015f2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012f8:	4ba6      	ldr	r3, [pc, #664]	; (8001594 <HAL_RCC_OscConfig+0x5e8>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00b      	beq.n	800131c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001304:	4ba3      	ldr	r3, [pc, #652]	; (8001594 <HAL_RCC_OscConfig+0x5e8>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	d172      	bne.n	80013f6 <HAL_RCC_OscConfig+0x44a>
 8001310:	4ba0      	ldr	r3, [pc, #640]	; (8001594 <HAL_RCC_OscConfig+0x5e8>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d16c      	bne.n	80013f6 <HAL_RCC_OscConfig+0x44a>
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800132e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	095b      	lsrs	r3, r3, #5
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b01      	cmp	r3, #1
 8001344:	d102      	bne.n	800134c <HAL_RCC_OscConfig+0x3a0>
 8001346:	4b93      	ldr	r3, [pc, #588]	; (8001594 <HAL_RCC_OscConfig+0x5e8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	e013      	b.n	8001374 <HAL_RCC_OscConfig+0x3c8>
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001364:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001370:	4b88      	ldr	r3, [pc, #544]	; (8001594 <HAL_RCC_OscConfig+0x5e8>)
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	2202      	movs	r2, #2
 8001376:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800137a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800137e:	fa92 f2a2 	rbit	r2, r2
 8001382:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001386:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800138a:	fab2 f282 	clz	r2, r2
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	f042 0220 	orr.w	r2, r2, #32
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	f002 021f 	and.w	r2, r2, #31
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00a      	beq.n	80013bc <HAL_RCC_OscConfig+0x410>
 80013a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d002      	beq.n	80013bc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	f000 be2e 	b.w	8002018 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b75      	ldr	r3, [pc, #468]	; (8001594 <HAL_RCC_OscConfig+0x5e8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	21f8      	movs	r1, #248	; 0xf8
 80013d2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013da:	fa91 f1a1 	rbit	r1, r1
 80013de:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80013e2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80013e6:	fab1 f181 	clz	r1, r1
 80013ea:	b2c9      	uxtb	r1, r1
 80013ec:	408b      	lsls	r3, r1
 80013ee:	4969      	ldr	r1, [pc, #420]	; (8001594 <HAL_RCC_OscConfig+0x5e8>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f4:	e0fd      	b.n	80015f2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8088 	beq.w	8001518 <HAL_RCC_OscConfig+0x56c>
 8001408:	2301      	movs	r3, #1
 800140a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800141a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141e:	fab3 f383 	clz	r3, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001428:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	461a      	mov	r2, r3
 8001430:	2301      	movs	r3, #1
 8001432:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fa4c 	bl	80008d0 <HAL_GetTick>
 8001438:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	e00a      	b.n	8001454 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fa47 	bl	80008d0 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d902      	bls.n	8001454 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	f000 bde2 	b.w	8002018 <HAL_RCC_OscConfig+0x106c>
 8001454:	2302      	movs	r3, #2
 8001456:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001466:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146a:	fab3 f383 	clz	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	095b      	lsrs	r3, r3, #5
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b01      	cmp	r3, #1
 800147c:	d102      	bne.n	8001484 <HAL_RCC_OscConfig+0x4d8>
 800147e:	4b45      	ldr	r3, [pc, #276]	; (8001594 <HAL_RCC_OscConfig+0x5e8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	e013      	b.n	80014ac <HAL_RCC_OscConfig+0x500>
 8001484:	2302      	movs	r3, #2
 8001486:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800148e:	fa93 f3a3 	rbit	r3, r3
 8001492:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800149c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80014a8:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <HAL_RCC_OscConfig+0x5e8>)
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	2202      	movs	r2, #2
 80014ae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80014b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014b6:	fa92 f2a2 	rbit	r2, r2
 80014ba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80014be:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80014c2:	fab2 f282 	clz	r2, r2
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	f042 0220 	orr.w	r2, r2, #32
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	f002 021f 	and.w	r2, r2, #31
 80014d2:	2101      	movs	r1, #1
 80014d4:	fa01 f202 	lsl.w	r2, r1, r2
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0af      	beq.n	800143e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <HAL_RCC_OscConfig+0x5e8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	21f8      	movs	r1, #248	; 0xf8
 80014f4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014fc:	fa91 f1a1 	rbit	r1, r1
 8001500:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001504:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001508:	fab1 f181 	clz	r1, r1
 800150c:	b2c9      	uxtb	r1, r1
 800150e:	408b      	lsls	r3, r1
 8001510:	4920      	ldr	r1, [pc, #128]	; (8001594 <HAL_RCC_OscConfig+0x5e8>)
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
 8001516:	e06c      	b.n	80015f2 <HAL_RCC_OscConfig+0x646>
 8001518:	2301      	movs	r3, #1
 800151a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800152a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001538:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	461a      	mov	r2, r3
 8001540:	2300      	movs	r3, #0
 8001542:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff f9c4 	bl	80008d0 <HAL_GetTick>
 8001548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff f9bf 	bl	80008d0 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d902      	bls.n	8001564 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	f000 bd5a 	b.w	8002018 <HAL_RCC_OscConfig+0x106c>
 8001564:	2302      	movs	r3, #2
 8001566:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800156e:	fa93 f3a3 	rbit	r3, r3
 8001572:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	fab3 f383 	clz	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	095b      	lsrs	r3, r3, #5
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d104      	bne.n	8001598 <HAL_RCC_OscConfig+0x5ec>
 800158e:	4b01      	ldr	r3, [pc, #4]	; (8001594 <HAL_RCC_OscConfig+0x5e8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	e015      	b.n	80015c0 <HAL_RCC_OscConfig+0x614>
 8001594:	40021000 	.word	0x40021000
 8001598:	2302      	movs	r3, #2
 800159a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015a2:	fa93 f3a3 	rbit	r3, r3
 80015a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015aa:	2302      	movs	r3, #2
 80015ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015bc:	4bc8      	ldr	r3, [pc, #800]	; (80018e0 <HAL_RCC_OscConfig+0x934>)
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	2202      	movs	r2, #2
 80015c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80015c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015ca:	fa92 f2a2 	rbit	r2, r2
 80015ce:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015d2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015d6:	fab2 f282 	clz	r2, r2
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	f042 0220 	orr.w	r2, r2, #32
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	f002 021f 	and.w	r2, r2, #31
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1ad      	bne.n	800154e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8110 	beq.w	8001828 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d079      	beq.n	800170c <HAL_RCC_OscConfig+0x760>
 8001618:	2301      	movs	r3, #1
 800161a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800162a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162e:	fab3 f383 	clz	r3, r3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	4bab      	ldr	r3, [pc, #684]	; (80018e4 <HAL_RCC_OscConfig+0x938>)
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	461a      	mov	r2, r3
 800163e:	2301      	movs	r3, #1
 8001640:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff f945 	bl	80008d0 <HAL_GetTick>
 8001646:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff f940 	bl	80008d0 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d902      	bls.n	8001662 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	f000 bcdb 	b.w	8002018 <HAL_RCC_OscConfig+0x106c>
 8001662:	2302      	movs	r3, #2
 8001664:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800167c:	2202      	movs	r2, #2
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001684:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	fa93 f2a3 	rbit	r2, r3
 800168e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001692:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016a0:	2202      	movs	r2, #2
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	fa93 f2a3 	rbit	r2, r3
 80016b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016bc:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x934>)
 80016be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016c8:	2102      	movs	r1, #2
 80016ca:	6019      	str	r1, [r3, #0]
 80016cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	fa93 f1a3 	rbit	r1, r3
 80016da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016e2:	6019      	str	r1, [r3, #0]
  return result;
 80016e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0a0      	beq.n	800164c <HAL_RCC_OscConfig+0x6a0>
 800170a:	e08d      	b.n	8001828 <HAL_RCC_OscConfig+0x87c>
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	fa93 f2a3 	rbit	r2, r3
 8001726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800172e:	601a      	str	r2, [r3, #0]
  return result;
 8001730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001734:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001738:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <HAL_RCC_OscConfig+0x938>)
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	461a      	mov	r2, r3
 800174a:	2300      	movs	r3, #0
 800174c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff f8bf 	bl	80008d0 <HAL_GetTick>
 8001752:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001756:	e00a      	b.n	800176e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001758:	f7ff f8ba 	bl	80008d0 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d902      	bls.n	800176e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	f000 bc55 	b.w	8002018 <HAL_RCC_OscConfig+0x106c>
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001776:	2202      	movs	r2, #2
 8001778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fa93 f2a3 	rbit	r2, r3
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800179a:	2202      	movs	r2, #2
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	fa93 f2a3 	rbit	r2, r3
 80017ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017be:	2202      	movs	r2, #2
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	fa93 f2a3 	rbit	r2, r3
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017da:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <HAL_RCC_OscConfig+0x934>)
 80017dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017e6:	2102      	movs	r1, #2
 80017e8:	6019      	str	r1, [r3, #0]
 80017ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f1a3 	rbit	r1, r3
 80017f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001800:	6019      	str	r1, [r3, #0]
  return result;
 8001802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001806:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f003 031f 	and.w	r3, r3, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d197      	bne.n	8001758 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 81a1 	beq.w	8001b80 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <HAL_RCC_OscConfig+0x934>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d116      	bne.n	800187e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <HAL_RCC_OscConfig+0x934>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	4a22      	ldr	r2, [pc, #136]	; (80018e0 <HAL_RCC_OscConfig+0x934>)
 8001856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185a:	61d3      	str	r3, [r2, #28]
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_OscConfig+0x934>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001872:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001876:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001878:	2301      	movs	r3, #1
 800187a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_RCC_OscConfig+0x93c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	2b00      	cmp	r3, #0
 8001888:	d11a      	bne.n	80018c0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_RCC_OscConfig+0x93c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a16      	ldr	r2, [pc, #88]	; (80018e8 <HAL_RCC_OscConfig+0x93c>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001894:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001896:	f7ff f81b 	bl	80008d0 <HAL_GetTick>
 800189a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189e:	e009      	b.n	80018b4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a0:	f7ff f816 	bl	80008d0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b64      	cmp	r3, #100	; 0x64
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e3b1      	b.n	8002018 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_RCC_OscConfig+0x93c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0ef      	beq.n	80018a0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d10d      	bne.n	80018ec <HAL_RCC_OscConfig+0x940>
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_RCC_OscConfig+0x934>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4a02      	ldr	r2, [pc, #8]	; (80018e0 <HAL_RCC_OscConfig+0x934>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	e03c      	b.n	8001958 <HAL_RCC_OscConfig+0x9ac>
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	10908120 	.word	0x10908120
 80018e8:	40007000 	.word	0x40007000
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10c      	bne.n	8001916 <HAL_RCC_OscConfig+0x96a>
 80018fc:	4bc1      	ldr	r3, [pc, #772]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4ac0      	ldr	r2, [pc, #768]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	4bbe      	ldr	r3, [pc, #760]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4abd      	ldr	r2, [pc, #756]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 800190e:	f023 0304 	bic.w	r3, r3, #4
 8001912:	6213      	str	r3, [r2, #32]
 8001914:	e020      	b.n	8001958 <HAL_RCC_OscConfig+0x9ac>
 8001916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b05      	cmp	r3, #5
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x994>
 8001926:	4bb7      	ldr	r3, [pc, #732]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4ab6      	ldr	r2, [pc, #728]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6213      	str	r3, [r2, #32]
 8001932:	4bb4      	ldr	r3, [pc, #720]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4ab3      	ldr	r2, [pc, #716]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6213      	str	r3, [r2, #32]
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0x9ac>
 8001940:	4bb0      	ldr	r3, [pc, #704]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4aaf      	ldr	r2, [pc, #700]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	6213      	str	r3, [r2, #32]
 800194c:	4bad      	ldr	r3, [pc, #692]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	4aac      	ldr	r2, [pc, #688]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 8001952:	f023 0304 	bic.w	r3, r3, #4
 8001956:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8081 	beq.w	8001a6c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7fe ffb1 	bl	80008d0 <HAL_GetTick>
 800196e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7fe ffac 	bl	80008d0 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	; 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e345      	b.n	8002018 <HAL_RCC_OscConfig+0x106c>
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001994:	2202      	movs	r2, #2
 8001996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	fa93 f2a3 	rbit	r2, r3
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019b8:	2202      	movs	r2, #2
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	fa93 f2a3 	rbit	r2, r3
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019d2:	601a      	str	r2, [r3, #0]
  return result;
 80019d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	095b      	lsrs	r3, r3, #5
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d102      	bne.n	80019f8 <HAL_RCC_OscConfig+0xa4c>
 80019f2:	4b84      	ldr	r3, [pc, #528]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	e013      	b.n	8001a20 <HAL_RCC_OscConfig+0xa74>
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a00:	2202      	movs	r2, #2
 8001a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a08:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fa93 f2a3 	rbit	r2, r3
 8001a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a16:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	4b79      	ldr	r3, [pc, #484]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a24:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a28:	2102      	movs	r1, #2
 8001a2a:	6011      	str	r1, [r2, #0]
 8001a2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a30:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a34:	6812      	ldr	r2, [r2, #0]
 8001a36:	fa92 f1a2 	rbit	r1, r2
 8001a3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a3e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a42:	6011      	str	r1, [r2, #0]
  return result;
 8001a44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a48:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	fab2 f282 	clz	r2, r2
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	f002 021f 	and.w	r2, r2, #31
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f202 	lsl.w	r2, r1, r2
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d084      	beq.n	8001974 <HAL_RCC_OscConfig+0x9c8>
 8001a6a:	e07f      	b.n	8001b6c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6c:	f7fe ff30 	bl	80008d0 <HAL_GetTick>
 8001a70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	e00b      	b.n	8001a8e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7fe ff2b 	bl	80008d0 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e2c4      	b.n	8002018 <HAL_RCC_OscConfig+0x106c>
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a96:	2202      	movs	r2, #2
 8001a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	fa93 f2a3 	rbit	r2, r3
 8001aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001aba:	2202      	movs	r2, #2
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	fa93 f2a3 	rbit	r2, r3
 8001acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ad4:	601a      	str	r2, [r3, #0]
  return result;
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ade:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f043 0302 	orr.w	r3, r3, #2
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d102      	bne.n	8001afa <HAL_RCC_OscConfig+0xb4e>
 8001af4:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	e013      	b.n	8001b22 <HAL_RCC_OscConfig+0xb76>
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b02:	2202      	movs	r2, #2
 8001b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	fa93 f2a3 	rbit	r2, r3
 8001b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b18:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b26:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	6011      	str	r1, [r2, #0]
 8001b2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b32:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	fa92 f1a2 	rbit	r1, r2
 8001b3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b40:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b44:	6011      	str	r1, [r2, #0]
  return result;
 8001b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	fab2 f282 	clz	r2, r2
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	f002 021f 	and.w	r2, r2, #31
 8001b60:	2101      	movs	r1, #1
 8001b62:	fa01 f202 	lsl.w	r2, r1, r2
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d184      	bne.n	8001a76 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b6c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b74:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	4a22      	ldr	r2, [pc, #136]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 8001b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 8242 	beq.w	8002016 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_RCC_OscConfig+0xc58>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	f000 8213 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	f040 8162 	bne.w	8001e76 <HAL_RCC_OscConfig+0xeca>
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	fa93 f2a3 	rbit	r2, r3
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bd6:	601a      	str	r2, [r3, #0]
  return result;
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001be0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7fe fe6a 	bl	80008d0 <HAL_GetTick>
 8001bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c00:	e00c      	b.n	8001c1c <HAL_RCC_OscConfig+0xc70>
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c08:	f7fe fe62 	bl	80008d0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1fd      	b.n	8002018 <HAL_RCC_OscConfig+0x106c>
 8001c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c20:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	fa93 f2a3 	rbit	r2, r3
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c40:	601a      	str	r2, [r3, #0]
  return result;
 8001c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c46:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d102      	bne.n	8001c66 <HAL_RCC_OscConfig+0xcba>
 8001c60:	4bb0      	ldr	r3, [pc, #704]	; (8001f24 <HAL_RCC_OscConfig+0xf78>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	e027      	b.n	8001cb6 <HAL_RCC_OscConfig+0xd0a>
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c78:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	fa93 f2a3 	rbit	r2, r3
 8001c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c86:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	fa93 f2a3 	rbit	r2, r3
 8001ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	4b9c      	ldr	r3, [pc, #624]	; (8001f24 <HAL_RCC_OscConfig+0xf78>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cba:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001cbe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cc2:	6011      	str	r1, [r2, #0]
 8001cc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	fa92 f1a2 	rbit	r1, r2
 8001cd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cda:	6011      	str	r1, [r2, #0]
  return result;
 8001cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	fab2 f282 	clz	r2, r2
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	f042 0220 	orr.w	r2, r2, #32
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f002 021f 	and.w	r2, r2, #31
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d182      	bne.n	8001c08 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d02:	4b88      	ldr	r3, [pc, #544]	; (8001f24 <HAL_RCC_OscConfig+0xf78>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	430b      	orrs	r3, r1
 8001d24:	497f      	ldr	r1, [pc, #508]	; (8001f24 <HAL_RCC_OscConfig+0xf78>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	fa93 f2a3 	rbit	r2, r3
 8001d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d4e:	601a      	str	r2, [r3, #0]
  return result;
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d58:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7fe fdae 	bl	80008d0 <HAL_GetTick>
 8001d74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d78:	e009      	b.n	8001d8e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7fe fda9 	bl	80008d0 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e144      	b.n	8002018 <HAL_RCC_OscConfig+0x106c>
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	fa93 f2a3 	rbit	r2, r3
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001db2:	601a      	str	r2, [r3, #0]
  return result;
 8001db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001dbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	095b      	lsrs	r3, r3, #5
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d102      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xe2c>
 8001dd2:	4b54      	ldr	r3, [pc, #336]	; (8001f24 <HAL_RCC_OscConfig+0xf78>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	e027      	b.n	8001e28 <HAL_RCC_OscConfig+0xe7c>
 8001dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ddc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001de0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	fa93 f2a3 	rbit	r2, r3
 8001df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f2a3 	rbit	r2, r3
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <HAL_RCC_OscConfig+0xf78>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e2c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e34:	6011      	str	r1, [r2, #0]
 8001e36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e3a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	fa92 f1a2 	rbit	r1, r2
 8001e44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e48:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e4c:	6011      	str	r1, [r2, #0]
  return result;
 8001e4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e52:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	fab2 f282 	clz	r2, r2
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	f042 0220 	orr.w	r2, r2, #32
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	f002 021f 	and.w	r2, r2, #31
 8001e68:	2101      	movs	r1, #1
 8001e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d082      	beq.n	8001d7a <HAL_RCC_OscConfig+0xdce>
 8001e74:	e0cf      	b.n	8002016 <HAL_RCC_OscConfig+0x106a>
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e88:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e9a:	601a      	str	r2, [r3, #0]
  return result;
 8001e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ea4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2300      	movs	r3, #0
 8001eba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7fe fd08 	bl	80008d0 <HAL_GetTick>
 8001ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec4:	e009      	b.n	8001eda <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7fe fd03 	bl	80008d0 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e09e      	b.n	8002018 <HAL_RCC_OscConfig+0x106c>
 8001eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ede:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ee2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fa93 f2a3 	rbit	r2, r3
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001efe:	601a      	str	r2, [r3, #0]
  return result;
 8001f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f04:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	095b      	lsrs	r3, r3, #5
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d104      	bne.n	8001f28 <HAL_RCC_OscConfig+0xf7c>
 8001f1e:	4b01      	ldr	r3, [pc, #4]	; (8001f24 <HAL_RCC_OscConfig+0xf78>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	e029      	b.n	8001f78 <HAL_RCC_OscConfig+0xfcc>
 8001f24:	40021000 	.word	0x40021000
 8001f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f48:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f52:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f60:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	fa93 f2a3 	rbit	r2, r3
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_RCC_OscConfig+0x1078>)
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f7c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f84:	6011      	str	r1, [r2, #0]
 8001f86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f8a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	fa92 f1a2 	rbit	r1, r2
 8001f94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f98:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f9c:	6011      	str	r1, [r2, #0]
  return result;
 8001f9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fa2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	fab2 f282 	clz	r2, r2
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	f042 0220 	orr.w	r2, r2, #32
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	f002 021f 	and.w	r2, r2, #31
 8001fb8:	2101      	movs	r1, #1
 8001fba:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d180      	bne.n	8001ec6 <HAL_RCC_OscConfig+0xf1a>
 8001fc4:	e027      	b.n	8002016 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e01e      	b.n	8002018 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RCC_OscConfig+0x1078>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fe2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fe6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d10b      	bne.n	8002012 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ffa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ffe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000

08002028 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b09e      	sub	sp, #120	; 0x78
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e162      	b.n	8002306 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002040:	4b90      	ldr	r3, [pc, #576]	; (8002284 <HAL_RCC_ClockConfig+0x25c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d910      	bls.n	8002070 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b8d      	ldr	r3, [pc, #564]	; (8002284 <HAL_RCC_ClockConfig+0x25c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0207 	bic.w	r2, r3, #7
 8002056:	498b      	ldr	r1, [pc, #556]	; (8002284 <HAL_RCC_ClockConfig+0x25c>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b89      	ldr	r3, [pc, #548]	; (8002284 <HAL_RCC_ClockConfig+0x25c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e14a      	b.n	8002306 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800207c:	4b82      	ldr	r3, [pc, #520]	; (8002288 <HAL_RCC_ClockConfig+0x260>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	497f      	ldr	r1, [pc, #508]	; (8002288 <HAL_RCC_ClockConfig+0x260>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80dc 	beq.w	8002254 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d13c      	bne.n	800211e <HAL_RCC_ClockConfig+0xf6>
 80020a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d102      	bne.n	80020ce <HAL_RCC_ClockConfig+0xa6>
 80020c8:	4b6f      	ldr	r3, [pc, #444]	; (8002288 <HAL_RCC_ClockConfig+0x260>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	e00f      	b.n	80020ee <HAL_RCC_ClockConfig+0xc6>
 80020ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	667b      	str	r3, [r7, #100]	; 0x64
 80020dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e0:	663b      	str	r3, [r7, #96]	; 0x60
 80020e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020ea:	4b67      	ldr	r3, [pc, #412]	; (8002288 <HAL_RCC_ClockConfig+0x260>)
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80020f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020f6:	fa92 f2a2 	rbit	r2, r2
 80020fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f042 0220 	orr.w	r2, r2, #32
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d17b      	bne.n	8002212 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0f3      	b.n	8002306 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d13c      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x178>
 8002126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d102      	bne.n	8002150 <HAL_RCC_ClockConfig+0x128>
 800214a:	4b4f      	ldr	r3, [pc, #316]	; (8002288 <HAL_RCC_ClockConfig+0x260>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	e00f      	b.n	8002170 <HAL_RCC_ClockConfig+0x148>
 8002150:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002154:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	647b      	str	r3, [r7, #68]	; 0x44
 800215e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002162:	643b      	str	r3, [r7, #64]	; 0x40
 8002164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800216c:	4b46      	ldr	r3, [pc, #280]	; (8002288 <HAL_RCC_ClockConfig+0x260>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002174:	63ba      	str	r2, [r7, #56]	; 0x38
 8002176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002178:	fa92 f2a2 	rbit	r2, r2
 800217c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800217e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002180:	fab2 f282 	clz	r2, r2
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f042 0220 	orr.w	r2, r2, #32
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	f002 021f 	and.w	r2, r2, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f202 	lsl.w	r2, r1, r2
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d13a      	bne.n	8002212 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0b2      	b.n	8002306 <HAL_RCC_ClockConfig+0x2de>
 80021a0:	2302      	movs	r3, #2
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d102      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x1a0>
 80021c2:	4b31      	ldr	r3, [pc, #196]	; (8002288 <HAL_RCC_ClockConfig+0x260>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	e00d      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1bc>
 80021c8:	2302      	movs	r3, #2
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
 80021d4:	2302      	movs	r3, #2
 80021d6:	623b      	str	r3, [r7, #32]
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	4b29      	ldr	r3, [pc, #164]	; (8002288 <HAL_RCC_ClockConfig+0x260>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	2202      	movs	r2, #2
 80021e6:	61ba      	str	r2, [r7, #24]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	fa92 f2a2 	rbit	r2, r2
 80021ee:	617a      	str	r2, [r7, #20]
  return result;
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	fab2 f282 	clz	r2, r2
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	f042 0220 	orr.w	r2, r2, #32
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	f002 021f 	and.w	r2, r2, #31
 8002202:	2101      	movs	r1, #1
 8002204:	fa01 f202 	lsl.w	r2, r1, r2
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e079      	b.n	8002306 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_RCC_ClockConfig+0x260>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f023 0203 	bic.w	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	491a      	ldr	r1, [pc, #104]	; (8002288 <HAL_RCC_ClockConfig+0x260>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002224:	f7fe fb54 	bl	80008d0 <HAL_GetTick>
 8002228:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222a:	e00a      	b.n	8002242 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7fe fb50 	bl	80008d0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e061      	b.n	8002306 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_RCC_ClockConfig+0x260>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 020c 	and.w	r2, r3, #12
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	429a      	cmp	r2, r3
 8002252:	d1eb      	bne.n	800222c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCC_ClockConfig+0x25c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d214      	bcs.n	800228c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_RCC_ClockConfig+0x25c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 0207 	bic.w	r2, r3, #7
 800226a:	4906      	ldr	r1, [pc, #24]	; (8002284 <HAL_RCC_ClockConfig+0x25c>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <HAL_RCC_ClockConfig+0x25c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e040      	b.n	8002306 <HAL_RCC_ClockConfig+0x2de>
 8002284:	40022000 	.word	0x40022000
 8002288:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_RCC_ClockConfig+0x2e8>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	491a      	ldr	r1, [pc, #104]	; (8002310 <HAL_RCC_ClockConfig+0x2e8>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_RCC_ClockConfig+0x2e8>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4912      	ldr	r1, [pc, #72]	; (8002310 <HAL_RCC_ClockConfig+0x2e8>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022ca:	f000 f829 	bl	8002320 <HAL_RCC_GetSysClockFreq>
 80022ce:	4601      	mov	r1, r0
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_RCC_ClockConfig+0x2e8>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d8:	22f0      	movs	r2, #240	; 0xf0
 80022da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	fa92 f2a2 	rbit	r2, r2
 80022e2:	60fa      	str	r2, [r7, #12]
  return result;
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	fab2 f282 	clz	r2, r2
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	40d3      	lsrs	r3, r2
 80022ee:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x2ec>)
 80022f0:	5cd3      	ldrb	r3, [r2, r3]
 80022f2:	fa21 f303 	lsr.w	r3, r1, r3
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_RCC_ClockConfig+0x2f0>)
 80022f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_RCC_ClockConfig+0x2f4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe faa2 	bl	8000848 <HAL_InitTick>
  
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3778      	adds	r7, #120	; 0x78
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	08007db0 	.word	0x08007db0
 8002318:	20000000 	.word	0x20000000
 800231c:	20000004 	.word	0x20000004

08002320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002320:	b480      	push	{r7}
 8002322:	b08b      	sub	sp, #44	; 0x2c
 8002324:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b04      	cmp	r3, #4
 8002348:	d002      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x30>
 800234a:	2b08      	cmp	r3, #8
 800234c:	d003      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x36>
 800234e:	e03c      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002350:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002352:	623b      	str	r3, [r7, #32]
      break;
 8002354:	e03c      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800235c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002360:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	fa92 f2a2 	rbit	r2, r2
 8002368:	607a      	str	r2, [r7, #4]
  return result;
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	fab2 f282 	clz	r2, r2
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	40d3      	lsrs	r3, r2
 8002374:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800237a:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	220f      	movs	r2, #15
 8002384:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	fa92 f2a2 	rbit	r2, r2
 800238c:	60fa      	str	r2, [r7, #12]
  return result;
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	fab2 f282 	clz	r2, r2
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	40d3      	lsrs	r3, r2
 8002398:	4a14      	ldr	r2, [pc, #80]	; (80023ec <HAL_RCC_GetSysClockFreq+0xcc>)
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023a8:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
 80023b8:	e004      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	4a0c      	ldr	r2, [pc, #48]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	623b      	str	r3, [r7, #32]
      break;
 80023c8:	e002      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023cc:	623b      	str	r3, [r7, #32]
      break;
 80023ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d0:	6a3b      	ldr	r3, [r7, #32]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	372c      	adds	r7, #44	; 0x2c
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	007a1200 	.word	0x007a1200
 80023e8:	08007dc8 	.word	0x08007dc8
 80023ec:	08007dd8 	.word	0x08007dd8
 80023f0:	003d0900 	.word	0x003d0900

080023f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCC_GetHCLKFreq+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000000 	.word	0x20000000

0800240c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002412:	f7ff ffef 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 8002416:	4601      	mov	r1, r0
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002420:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002424:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	fa92 f2a2 	rbit	r2, r2
 800242c:	603a      	str	r2, [r7, #0]
  return result;
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	fab2 f282 	clz	r2, r2
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	40d3      	lsrs	r3, r2
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_RCC_GetPCLK1Freq+0x40>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	08007dc0 	.word	0x08007dc0

08002450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002456:	f7ff ffcd 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 800245a:	4601      	mov	r1, r0
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002464:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002468:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	fa92 f2a2 	rbit	r2, r2
 8002470:	603a      	str	r2, [r7, #0]
  return result;
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	fab2 f282 	clz	r2, r2
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	40d3      	lsrs	r3, r2
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x40>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	08007dc0 	.word	0x08007dc0

08002494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e040      	b.n	8002528 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe f8d2 	bl	8000660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	; 0x24
 80024c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f82c 	bl	8002530 <UART_SetConfig>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e022      	b.n	8002528 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f956 	bl	800279c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800250e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f9dd 	bl	80028e0 <UART_CheckIdleState>
 8002526:	4603      	mov	r3, r0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4b8a      	ldr	r3, [pc, #552]	; (8002784 <UART_SetConfig+0x254>)
 800255c:	4013      	ands	r3, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	6979      	ldr	r1, [r7, #20]
 8002564:	430b      	orrs	r3, r1
 8002566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	430a      	orrs	r2, r1
 80025a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a78      	ldr	r2, [pc, #480]	; (8002788 <UART_SetConfig+0x258>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d120      	bne.n	80025ee <UART_SetConfig+0xbe>
 80025ac:	4b77      	ldr	r3, [pc, #476]	; (800278c <UART_SetConfig+0x25c>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d817      	bhi.n	80025e8 <UART_SetConfig+0xb8>
 80025b8:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <UART_SetConfig+0x90>)
 80025ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025be:	bf00      	nop
 80025c0:	080025d1 	.word	0x080025d1
 80025c4:	080025dd 	.word	0x080025dd
 80025c8:	080025e3 	.word	0x080025e3
 80025cc:	080025d7 	.word	0x080025d7
 80025d0:	2300      	movs	r3, #0
 80025d2:	77fb      	strb	r3, [r7, #31]
 80025d4:	e01d      	b.n	8002612 <UART_SetConfig+0xe2>
 80025d6:	2302      	movs	r3, #2
 80025d8:	77fb      	strb	r3, [r7, #31]
 80025da:	e01a      	b.n	8002612 <UART_SetConfig+0xe2>
 80025dc:	2304      	movs	r3, #4
 80025de:	77fb      	strb	r3, [r7, #31]
 80025e0:	e017      	b.n	8002612 <UART_SetConfig+0xe2>
 80025e2:	2308      	movs	r3, #8
 80025e4:	77fb      	strb	r3, [r7, #31]
 80025e6:	e014      	b.n	8002612 <UART_SetConfig+0xe2>
 80025e8:	2310      	movs	r3, #16
 80025ea:	77fb      	strb	r3, [r7, #31]
 80025ec:	e011      	b.n	8002612 <UART_SetConfig+0xe2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a67      	ldr	r2, [pc, #412]	; (8002790 <UART_SetConfig+0x260>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d102      	bne.n	80025fe <UART_SetConfig+0xce>
 80025f8:	2300      	movs	r3, #0
 80025fa:	77fb      	strb	r3, [r7, #31]
 80025fc:	e009      	b.n	8002612 <UART_SetConfig+0xe2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a64      	ldr	r2, [pc, #400]	; (8002794 <UART_SetConfig+0x264>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d102      	bne.n	800260e <UART_SetConfig+0xde>
 8002608:	2300      	movs	r3, #0
 800260a:	77fb      	strb	r3, [r7, #31]
 800260c:	e001      	b.n	8002612 <UART_SetConfig+0xe2>
 800260e:	2310      	movs	r3, #16
 8002610:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800261a:	d15a      	bne.n	80026d2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800261c:	7ffb      	ldrb	r3, [r7, #31]
 800261e:	2b08      	cmp	r3, #8
 8002620:	d827      	bhi.n	8002672 <UART_SetConfig+0x142>
 8002622:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <UART_SetConfig+0xf8>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	0800264d 	.word	0x0800264d
 800262c:	08002655 	.word	0x08002655
 8002630:	0800265d 	.word	0x0800265d
 8002634:	08002673 	.word	0x08002673
 8002638:	08002663 	.word	0x08002663
 800263c:	08002673 	.word	0x08002673
 8002640:	08002673 	.word	0x08002673
 8002644:	08002673 	.word	0x08002673
 8002648:	0800266b 	.word	0x0800266b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800264c:	f7ff fede 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 8002650:	61b8      	str	r0, [r7, #24]
        break;
 8002652:	e013      	b.n	800267c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002654:	f7ff fefc 	bl	8002450 <HAL_RCC_GetPCLK2Freq>
 8002658:	61b8      	str	r0, [r7, #24]
        break;
 800265a:	e00f      	b.n	800267c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800265c:	4b4e      	ldr	r3, [pc, #312]	; (8002798 <UART_SetConfig+0x268>)
 800265e:	61bb      	str	r3, [r7, #24]
        break;
 8002660:	e00c      	b.n	800267c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002662:	f7ff fe5d 	bl	8002320 <HAL_RCC_GetSysClockFreq>
 8002666:	61b8      	str	r0, [r7, #24]
        break;
 8002668:	e008      	b.n	800267c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800266a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800266e:	61bb      	str	r3, [r7, #24]
        break;
 8002670:	e004      	b.n	800267c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	77bb      	strb	r3, [r7, #30]
        break;
 800267a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d074      	beq.n	800276c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	005a      	lsls	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	085b      	lsrs	r3, r3, #1
 800268c:	441a      	add	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b0f      	cmp	r3, #15
 800269c:	d916      	bls.n	80026cc <UART_SetConfig+0x19c>
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d212      	bcs.n	80026cc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f023 030f 	bic.w	r3, r3, #15
 80026ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	89fb      	ldrh	r3, [r7, #14]
 80026be:	4313      	orrs	r3, r2
 80026c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	89fa      	ldrh	r2, [r7, #14]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	e04f      	b.n	800276c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	77bb      	strb	r3, [r7, #30]
 80026d0:	e04c      	b.n	800276c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026d2:	7ffb      	ldrb	r3, [r7, #31]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d828      	bhi.n	800272a <UART_SetConfig+0x1fa>
 80026d8:	a201      	add	r2, pc, #4	; (adr r2, 80026e0 <UART_SetConfig+0x1b0>)
 80026da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026de:	bf00      	nop
 80026e0:	08002705 	.word	0x08002705
 80026e4:	0800270d 	.word	0x0800270d
 80026e8:	08002715 	.word	0x08002715
 80026ec:	0800272b 	.word	0x0800272b
 80026f0:	0800271b 	.word	0x0800271b
 80026f4:	0800272b 	.word	0x0800272b
 80026f8:	0800272b 	.word	0x0800272b
 80026fc:	0800272b 	.word	0x0800272b
 8002700:	08002723 	.word	0x08002723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002704:	f7ff fe82 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 8002708:	61b8      	str	r0, [r7, #24]
        break;
 800270a:	e013      	b.n	8002734 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800270c:	f7ff fea0 	bl	8002450 <HAL_RCC_GetPCLK2Freq>
 8002710:	61b8      	str	r0, [r7, #24]
        break;
 8002712:	e00f      	b.n	8002734 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <UART_SetConfig+0x268>)
 8002716:	61bb      	str	r3, [r7, #24]
        break;
 8002718:	e00c      	b.n	8002734 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800271a:	f7ff fe01 	bl	8002320 <HAL_RCC_GetSysClockFreq>
 800271e:	61b8      	str	r0, [r7, #24]
        break;
 8002720:	e008      	b.n	8002734 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002726:	61bb      	str	r3, [r7, #24]
        break;
 8002728:	e004      	b.n	8002734 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	77bb      	strb	r3, [r7, #30]
        break;
 8002732:	bf00      	nop
    }

    if (pclk != 0U)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d018      	beq.n	800276c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	085a      	lsrs	r2, r3, #1
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	441a      	add	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b0f      	cmp	r3, #15
 8002752:	d909      	bls.n	8002768 <UART_SetConfig+0x238>
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275a:	d205      	bcs.n	8002768 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	b29a      	uxth	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	e001      	b.n	800276c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002778:	7fbb      	ldrb	r3, [r7, #30]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	efff69f3 	.word	0xefff69f3
 8002788:	40013800 	.word	0x40013800
 800278c:	40021000 	.word	0x40021000
 8002790:	40004400 	.word	0x40004400
 8002794:	40004800 	.word	0x40004800
 8002798:	007a1200 	.word	0x007a1200

0800279c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01a      	beq.n	80028b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800289a:	d10a      	bne.n	80028b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	605a      	str	r2, [r3, #4]
  }
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b098      	sub	sp, #96	; 0x60
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028f0:	f7fd ffee 	bl	80008d0 <HAL_GetTick>
 80028f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b08      	cmp	r3, #8
 8002902:	d12e      	bne.n	8002962 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290c:	2200      	movs	r2, #0
 800290e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f88c 	bl	8002a30 <UART_WaitOnFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d021      	beq.n	8002962 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002926:	e853 3f00 	ldrex	r3, [r3]
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002932:	653b      	str	r3, [r7, #80]	; 0x50
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293c:	647b      	str	r3, [r7, #68]	; 0x44
 800293e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002940:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002944:	e841 2300 	strex	r3, r2, [r1]
 8002948:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800294a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e6      	bne.n	800291e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e062      	b.n	8002a28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b04      	cmp	r3, #4
 800296e:	d149      	bne.n	8002a04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002978:	2200      	movs	r2, #0
 800297a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f856 	bl	8002a30 <UART_WaitOnFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d03c      	beq.n	8002a04 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	e853 3f00 	ldrex	r3, [r3]
 8002996:	623b      	str	r3, [r7, #32]
   return(result);
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800299e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
 80029aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b0:	e841 2300 	strex	r3, r2, [r1]
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e6      	bne.n	800298a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3308      	adds	r3, #8
 80029c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	e853 3f00 	ldrex	r3, [r3]
 80029ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3308      	adds	r3, #8
 80029da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029dc:	61fa      	str	r2, [r7, #28]
 80029de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e0:	69b9      	ldr	r1, [r7, #24]
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	e841 2300 	strex	r3, r2, [r1]
 80029e8:	617b      	str	r3, [r7, #20]
   return(result);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e5      	bne.n	80029bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e011      	b.n	8002a28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3758      	adds	r7, #88	; 0x58
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a40:	e049      	b.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a48:	d045      	beq.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4a:	f7fd ff41 	bl	80008d0 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d302      	bcc.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e048      	b.n	8002af6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d031      	beq.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d110      	bne.n	8002aa2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2208      	movs	r2, #8
 8002a86:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f838 	bl	8002afe <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2208      	movs	r2, #8
 8002a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e029      	b.n	8002af6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ab0:	d111      	bne.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f81e 	bl	8002afe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e00f      	b.n	8002af6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d0a6      	beq.n	8002a42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b095      	sub	sp, #84	; 0x54
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b24:	643b      	str	r3, [r7, #64]	; 0x40
 8002b26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e6      	bne.n	8002b06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3308      	adds	r3, #8
 8002b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	e853 3f00 	ldrex	r3, [r3]
 8002b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3308      	adds	r3, #8
 8002b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b60:	e841 2300 	strex	r3, r2, [r1]
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1e5      	bne.n	8002b38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d118      	bne.n	8002ba6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	e853 3f00 	ldrex	r3, [r3]
 8002b80:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f023 0310 	bic.w	r3, r3, #16
 8002b88:	647b      	str	r3, [r7, #68]	; 0x44
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b92:	61bb      	str	r3, [r7, #24]
 8002b94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b96:	6979      	ldr	r1, [r7, #20]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	e841 2300 	strex	r3, r2, [r1]
 8002b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1e6      	bne.n	8002b74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002bba:	bf00      	nop
 8002bbc:	3754      	adds	r7, #84	; 0x54
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	481c      	ldr	r0, [pc, #112]	; (8002c48 <network_configure_activations+0x80>)
 8002bd8:	f000 facc 	bl	8003174 <ai_platform_get_activations_map>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d027      	beq.n	8002c32 <network_configure_activations+0x6a>
    /* Updating activations (byte) offsets */
    
    _lstm_LSTM_output_0_forward_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002be2:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <network_configure_activations+0x80>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a19      	ldr	r2, [pc, #100]	; (8002c4c <network_configure_activations+0x84>)
 8002be8:	6093      	str	r3, [r2, #8]
    _lstm_LSTM_output_0_forward_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <network_configure_activations+0x80>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <network_configure_activations+0x84>)
 8002bf0:	60d3      	str	r3, [r2, #12]
    
    _lstm_LSTM_output_0_forward_output0_array.data = AI_PTR(g_network_activations_map[0] + 896);
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <network_configure_activations+0x80>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8002bfa:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <network_configure_activations+0x88>)
 8002bfc:	6093      	str	r3, [r2, #8]
    _lstm_LSTM_output_0_forward_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 896);
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <network_configure_activations+0x80>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8002c06:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <network_configure_activations+0x88>)
 8002c08:	60d3      	str	r3, [r2, #12]
    
    _Gather_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <network_configure_activations+0x80>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <network_configure_activations+0x8c>)
 8002c10:	6093      	str	r3, [r2, #8]
    _Gather_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <network_configure_activations+0x80>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <network_configure_activations+0x8c>)
 8002c18:	60d3      	str	r3, [r2, #12]
    
    _dense_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <network_configure_activations+0x80>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3380      	adds	r3, #128	; 0x80
 8002c20:	4a0d      	ldr	r2, [pc, #52]	; (8002c58 <network_configure_activations+0x90>)
 8002c22:	6093      	str	r3, [r2, #8]
    _dense_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 128);
 8002c24:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <network_configure_activations+0x80>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3380      	adds	r3, #128	; 0x80
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <network_configure_activations+0x90>)
 8002c2c:	60d3      	str	r3, [r2, #12]
    
    return true;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e005      	b.n	8002c3e <network_configure_activations+0x76>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8002c32:	2213      	movs	r2, #19
 8002c34:	2130      	movs	r1, #48	; 0x30
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fb80 	bl	800333c <ai_platform_network_set_error>
  return false;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20001098 	.word	0x20001098
 8002c4c:	2000002c 	.word	0x2000002c
 8002c50:	2000001c 	.word	0x2000001c
 8002c54:	2000003c 	.word	0x2000003c
 8002c58:	2000004c 	.word	0x2000004c

08002c5c <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4848      	ldr	r0, [pc, #288]	; (8002d8c <network_configure_weights+0x130>)
 8002c6c:	f000 fa2e 	bl	80030cc <ai_platform_get_weights_map>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d07f      	beq.n	8002d76 <network_configure_weights+0x11a>
    /* Updating weights (byte) offsets */
    
    _lstm_LSTM_output_0_forward_kernel_array.format |= AI_FMT_FLAG_CONST;
 8002c76:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <network_configure_weights+0x134>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c7e:	4a44      	ldr	r2, [pc, #272]	; (8002d90 <network_configure_weights+0x134>)
 8002c80:	6013      	str	r3, [r2, #0]
    _lstm_LSTM_output_0_forward_kernel_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8002c82:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <network_configure_weights+0x130>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a42      	ldr	r2, [pc, #264]	; (8002d90 <network_configure_weights+0x134>)
 8002c88:	6093      	str	r3, [r2, #8]
    _lstm_LSTM_output_0_forward_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8002c8a:	4b40      	ldr	r3, [pc, #256]	; (8002d8c <network_configure_weights+0x130>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a40      	ldr	r2, [pc, #256]	; (8002d90 <network_configure_weights+0x134>)
 8002c90:	60d3      	str	r3, [r2, #12]
    
    _lstm_LSTM_output_0_forward_recurrent_array.format |= AI_FMT_FLAG_CONST;
 8002c92:	4b40      	ldr	r3, [pc, #256]	; (8002d94 <network_configure_weights+0x138>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c9a:	4a3e      	ldr	r2, [pc, #248]	; (8002d94 <network_configure_weights+0x138>)
 8002c9c:	6013      	str	r3, [r2, #0]
    _lstm_LSTM_output_0_forward_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 512);
 8002c9e:	4b3b      	ldr	r3, [pc, #236]	; (8002d8c <network_configure_weights+0x130>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ca6:	4a3b      	ldr	r2, [pc, #236]	; (8002d94 <network_configure_weights+0x138>)
 8002ca8:	6093      	str	r3, [r2, #8]
    _lstm_LSTM_output_0_forward_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 512);
 8002caa:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <network_configure_weights+0x130>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002cb2:	4a38      	ldr	r2, [pc, #224]	; (8002d94 <network_configure_weights+0x138>)
 8002cb4:	60d3      	str	r3, [r2, #12]
    
    _lstm_LSTM_output_0_forward_peephole_array.format |= AI_FMT_FLAG_CONST;
 8002cb6:	4b38      	ldr	r3, [pc, #224]	; (8002d98 <network_configure_weights+0x13c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cbe:	4a36      	ldr	r2, [pc, #216]	; (8002d98 <network_configure_weights+0x13c>)
 8002cc0:	6013      	str	r3, [r2, #0]
    _lstm_LSTM_output_0_forward_peephole_array.data = AI_PTR(g_network_weights_map[0] + 16896);
 8002cc2:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <network_configure_weights+0x130>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002cca:	4a33      	ldr	r2, [pc, #204]	; (8002d98 <network_configure_weights+0x13c>)
 8002ccc:	6093      	str	r3, [r2, #8]
    _lstm_LSTM_output_0_forward_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 16896);
 8002cce:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <network_configure_weights+0x130>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002cd6:	4a30      	ldr	r2, [pc, #192]	; (8002d98 <network_configure_weights+0x13c>)
 8002cd8:	60d3      	str	r3, [r2, #12]
    
    _lstm_LSTM_output_0_forward_bias_array.format |= AI_FMT_FLAG_CONST;
 8002cda:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <network_configure_weights+0x140>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ce2:	4a2e      	ldr	r2, [pc, #184]	; (8002d9c <network_configure_weights+0x140>)
 8002ce4:	6013      	str	r3, [r2, #0]
    _lstm_LSTM_output_0_forward_bias_array.data = AI_PTR(g_network_weights_map[0] + 17280);
 8002ce6:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <network_configure_weights+0x130>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f503 4387 	add.w	r3, r3, #17280	; 0x4380
 8002cee:	4a2b      	ldr	r2, [pc, #172]	; (8002d9c <network_configure_weights+0x140>)
 8002cf0:	6093      	str	r3, [r2, #8]
    _lstm_LSTM_output_0_forward_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 17280);
 8002cf2:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <network_configure_weights+0x130>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f503 4387 	add.w	r3, r3, #17280	; 0x4380
 8002cfa:	4a28      	ldr	r2, [pc, #160]	; (8002d9c <network_configure_weights+0x140>)
 8002cfc:	60d3      	str	r3, [r2, #12]
    
    _Constant_1_output_0_array.format |= AI_FMT_FLAG_CONST;
 8002cfe:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <network_configure_weights+0x144>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d06:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <network_configure_weights+0x144>)
 8002d08:	6013      	str	r3, [r2, #0]
    _Constant_1_output_0_array.data = AI_PTR(g_network_weights_map[0] + 17792);
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <network_configure_weights+0x130>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f503 438b 	add.w	r3, r3, #17792	; 0x4580
 8002d12:	4a23      	ldr	r2, [pc, #140]	; (8002da0 <network_configure_weights+0x144>)
 8002d14:	6093      	str	r3, [r2, #8]
    _Constant_1_output_0_array.data_start = AI_PTR(g_network_weights_map[0] + 17792);
 8002d16:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <network_configure_weights+0x130>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f503 438b 	add.w	r3, r3, #17792	; 0x4580
 8002d1e:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <network_configure_weights+0x144>)
 8002d20:	60d3      	str	r3, [r2, #12]
    
    _dense_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <network_configure_weights+0x148>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d2a:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <network_configure_weights+0x148>)
 8002d2c:	6013      	str	r3, [r2, #0]
    _dense_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 17796);
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <network_configure_weights+0x130>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f503 438b 	add.w	r3, r3, #17792	; 0x4580
 8002d36:	3304      	adds	r3, #4
 8002d38:	4a1a      	ldr	r2, [pc, #104]	; (8002da4 <network_configure_weights+0x148>)
 8002d3a:	6093      	str	r3, [r2, #8]
    _dense_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 17796);
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <network_configure_weights+0x130>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f503 438b 	add.w	r3, r3, #17792	; 0x4580
 8002d44:	3304      	adds	r3, #4
 8002d46:	4a17      	ldr	r2, [pc, #92]	; (8002da4 <network_configure_weights+0x148>)
 8002d48:	60d3      	str	r3, [r2, #12]
    
    _dense_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <network_configure_weights+0x14c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d52:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <network_configure_weights+0x14c>)
 8002d54:	6013      	str	r3, [r2, #0]
    _dense_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 18052);
 8002d56:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <network_configure_weights+0x130>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f503 438d 	add.w	r3, r3, #18048	; 0x4680
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <network_configure_weights+0x14c>)
 8002d62:	6093      	str	r3, [r2, #8]
    _dense_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 18052);
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <network_configure_weights+0x130>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f503 438d 	add.w	r3, r3, #18048	; 0x4680
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	4a0e      	ldr	r2, [pc, #56]	; (8002da8 <network_configure_weights+0x14c>)
 8002d70:	60d3      	str	r3, [r2, #12]
    
    return true;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e005      	b.n	8002d82 <network_configure_weights+0x126>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8002d76:	2212      	movs	r2, #18
 8002d78:	2130      	movs	r1, #48	; 0x30
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fade 	bl	800333c <ai_platform_network_set_error>
  return false;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	2000109c 	.word	0x2000109c
 8002d90:	2000006c 	.word	0x2000006c
 8002d94:	2000007c 	.word	0x2000007c
 8002d98:	2000008c 	.word	0x2000008c
 8002d9c:	2000009c 	.word	0x2000009c
 8002da0:	200000ac 	.word	0x200000ac
 8002da4:	200000bc 	.word	0x200000bc
 8002da8:	200000cc 	.word	0x200000cc

08002dac <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fa53 	bl	8003260 <ai_platform_network_get_error>
 8002dba:	4603      	mov	r3, r0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8002dce:	2300      	movs	r3, #0
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	2305      	movs	r3, #5
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <ai_network_create+0x28>)
 8002dda:	6839      	ldr	r1, [r7, #0]
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fc59 	bl	8003694 <ai_platform_network_create>
 8002de2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20000630 	.word	0x20000630

08002df0 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b096      	sub	sp, #88	; 0x58
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f7ff ffe0 	bl	8002dc4 <ai_network_create>
 8002e04:	4603      	mov	r3, r0
 8002e06:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8002e08:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <ai_network_create_and_init+0x24>
        return err;
 8002e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e12:	e05d      	b.n	8002ed0 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 f8dd 	bl	8002fd8 <ai_network_data_params_get>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f083 0301 	eor.w	r3, r3, #1
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ffbc 	bl	8002dac <ai_network_get_error>
 8002e34:	4603      	mov	r3, r0
 8002e36:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8002e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3a:	e049      	b.n	8002ed0 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d016      	beq.n	8002e70 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	657b      	str	r3, [r7, #84]	; 0x54
 8002e46:	e00e      	b.n	8002e66 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8002e48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	4413      	add	r3, r2
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	330c      	adds	r3, #12
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f922 	bl	80030a4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8002e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e62:	3301      	adds	r3, #1
 8002e64:	657b      	str	r3, [r7, #84]	; 0x54
 8002e66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	dbeb      	blt.n	8002e48 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d016      	beq.n	8002ea4 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	653b      	str	r3, [r7, #80]	; 0x50
 8002e7a:	e00e      	b.n	8002e9a <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8002e7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f908 	bl	80030a4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8002e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e96:	3301      	adds	r3, #1
 8002e98:	653b      	str	r3, [r7, #80]	; 0x50
 8002e9a:	8b7b      	ldrh	r3, [r7, #26]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	dbeb      	blt.n	8002e7c <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f107 0214 	add.w	r2, r7, #20
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f846 	bl	8002f40 <ai_network_init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f083 0301 	eor.w	r3, r3, #1
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff71 	bl	8002dac <ai_network_get_error>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8002ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3758      	adds	r7, #88	; 0x58
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d104      	bne.n	8002ef2 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <ai_network_inputs_get+0x2c>)
 8002eea:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a06      	ldr	r2, [pc, #24]	; (8002f08 <ai_network_inputs_get+0x30>)
 8002ef0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8002ef2:	6839      	ldr	r1, [r7, #0]
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fa27 	bl	8003348 <ai_platform_inputs_get>
 8002efa:	4603      	mov	r3, r0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000630 	.word	0x20000630
 8002f08:	a1c00100 	.word	0xa1c00100

08002f0c <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d104      	bne.n	8002f26 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <ai_network_outputs_get+0x2c>)
 8002f1e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <ai_network_outputs_get+0x30>)
 8002f24:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8002f26:	6839      	ldr	r1, [r7, #0]
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fae3 	bl	80034f4 <ai_platform_outputs_get>
 8002f2e:	4603      	mov	r3, r0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000630 	.word	0x20000630
 8002f3c:	a1c00100 	.word	0xa1c00100

08002f40 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fc77 	bl	8003840 <ai_platform_network_init>
 8002f52:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <ai_network_init+0x1e>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e028      	b.n	8002fb0 <ai_network_init+0x70>

  ai_bool ok = true;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8002f62:	6839      	ldr	r1, [r7, #0]
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff fe79 	bl	8002c5c <network_configure_weights>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	7afb      	ldrb	r3, [r7, #11]
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf14      	ite	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	2300      	moveq	r3, #0
 8002f7a:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f7ff fe22 	bl	8002bc8 <network_configure_activations>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	7afb      	ldrb	r3, [r7, #11]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fd40 	bl	8003a1c <ai_platform_network_post_init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	7afb      	ldrb	r3, [r7, #11]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	72fb      	strb	r3, [r7, #11]

  return ok;
 8002fae:	7afb      	ldrb	r3, [r7, #11]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fdaf 	bl	8003b2c <ai_platform_network_process>
 8002fce:	4603      	mov	r3, r0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <ai_network_data_params_get+0x12>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e016      	b.n	8003018 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8002fea:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <ai_network_data_params_get+0x48>)
 8002fec:	f107 0310 	add.w	r3, r7, #16
 8002ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ff4:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8002ff8:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <ai_network_data_params_get+0x4c>)
 8002ffa:	f107 0308 	add.w	r3, r7, #8
 8002ffe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003002:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8003006:	f107 0210 	add.w	r2, r7, #16
 800300a:	f107 0308 	add.w	r3, r7, #8
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f903 	bl	800321c <ai_platform_bind_network_params>
 8003016:	4603      	mov	r3, r0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	08007da0 	.word	0x08007da0
 8003024:	08007da8 	.word	0x08007da8

08003028 <ai_buffer_get_size>:
 8003028:	b378      	cbz	r0, 800308a <ai_buffer_get_size+0x62>
 800302a:	b410      	push	{r4}
 800302c:	6803      	ldr	r3, [r0, #0]
 800302e:	4a17      	ldr	r2, [pc, #92]	; (800308c <ai_buffer_get_size+0x64>)
 8003030:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003034:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003038:	4293      	cmp	r3, r2
 800303a:	d01e      	beq.n	800307a <ai_buffer_get_size+0x52>
 800303c:	6984      	ldr	r4, [r0, #24]
 800303e:	6862      	ldr	r2, [r4, #4]
 8003040:	7d03      	ldrb	r3, [r0, #20]
 8003042:	6941      	ldr	r1, [r0, #20]
 8003044:	f1a3 0301 	sub.w	r3, r3, #1
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8003052:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8003056:	da0b      	bge.n	8003070 <ai_buffer_get_size+0x48>
 8003058:	2b01      	cmp	r3, #1
 800305a:	d102      	bne.n	8003062 <ai_buffer_get_size+0x3a>
 800305c:	2802      	cmp	r0, #2
 800305e:	d007      	beq.n	8003070 <ai_buffer_get_size+0x48>
 8003060:	2302      	movs	r3, #2
 8003062:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8003066:	3301      	adds	r3, #1
 8003068:	4298      	cmp	r0, r3
 800306a:	fb01 f202 	mul.w	r2, r1, r2
 800306e:	d1f3      	bne.n	8003058 <ai_buffer_get_size+0x30>
 8003070:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8003074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	2900      	cmp	r1, #0
 800307c:	d0de      	beq.n	800303c <ai_buffer_get_size+0x14>
 800307e:	6984      	ldr	r4, [r0, #24]
 8003080:	6863      	ldr	r3, [r4, #4]
 8003082:	331f      	adds	r3, #31
 8003084:	f023 021f 	bic.w	r2, r3, #31
 8003088:	e7da      	b.n	8003040 <ai_buffer_get_size+0x18>
 800308a:	4770      	bx	lr
 800308c:	000400c0 	.word	0x000400c0

08003090 <ai_buffer_array_sane>:
 8003090:	b138      	cbz	r0, 80030a2 <ai_buffer_array_sane+0x12>
 8003092:	6843      	ldr	r3, [r0, #4]
 8003094:	b123      	cbz	r3, 80030a0 <ai_buffer_array_sane+0x10>
 8003096:	8840      	ldrh	r0, [r0, #2]
 8003098:	3800      	subs	r0, #0
 800309a:	bf18      	it	ne
 800309c:	2001      	movne	r0, #1
 800309e:	4770      	bx	lr
 80030a0:	4618      	mov	r0, r3
 80030a2:	4770      	bx	lr

080030a4 <ai_buffer_array_item_set_address>:
 80030a4:	b150      	cbz	r0, 80030bc <ai_buffer_array_item_set_address+0x18>
 80030a6:	6843      	ldr	r3, [r0, #4]
 80030a8:	b14b      	cbz	r3, 80030be <ai_buffer_array_item_set_address+0x1a>
 80030aa:	8840      	ldrh	r0, [r0, #2]
 80030ac:	b900      	cbnz	r0, 80030b0 <ai_buffer_array_item_set_address+0xc>
 80030ae:	4770      	bx	lr
 80030b0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80030b4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80030b8:	2001      	movs	r0, #1
 80030ba:	604a      	str	r2, [r1, #4]
 80030bc:	4770      	bx	lr
 80030be:	4618      	mov	r0, r3
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop

080030c4 <_ai_platform_acquire_crc>:
 80030c4:	2001      	movs	r0, #1
 80030c6:	4770      	bx	lr

080030c8 <_ai_platform_release_crc>:
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop

080030cc <ai_platform_get_weights_map>:
 80030cc:	2a00      	cmp	r2, #0
 80030ce:	d037      	beq.n	8003140 <ai_platform_get_weights_map+0x74>
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	4604      	mov	r4, r0
 80030d4:	b1a0      	cbz	r0, 8003100 <ai_platform_get_weights_map+0x34>
 80030d6:	460f      	mov	r7, r1
 80030d8:	b191      	cbz	r1, 8003100 <ai_platform_get_weights_map+0x34>
 80030da:	4b25      	ldr	r3, [pc, #148]	; (8003170 <ai_platform_get_weights_map+0xa4>)
 80030dc:	6810      	ldr	r0, [r2, #0]
 80030de:	4298      	cmp	r0, r3
 80030e0:	4615      	mov	r5, r2
 80030e2:	d00f      	beq.n	8003104 <ai_platform_get_weights_map+0x38>
 80030e4:	6855      	ldr	r5, [r2, #4]
 80030e6:	b15d      	cbz	r5, 8003100 <ai_platform_get_weights_map+0x34>
 80030e8:	682e      	ldr	r6, [r5, #0]
 80030ea:	429e      	cmp	r6, r3
 80030ec:	d02a      	beq.n	8003144 <ai_platform_get_weights_map+0x78>
 80030ee:	f1a1 0001 	sub.w	r0, r1, #1
 80030f2:	6025      	str	r5, [r4, #0]
 80030f4:	fab0 f080 	clz	r0, r0
 80030f8:	0940      	lsrs	r0, r0, #5
 80030fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030fc:	42a7      	cmp	r7, r4
 80030fe:	d034      	beq.n	800316a <ai_platform_get_weights_map+0x9e>
 8003100:	2000      	movs	r0, #0
 8003102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003104:	1d10      	adds	r0, r2, #4
 8003106:	f7ff ffc3 	bl	8003090 <ai_buffer_array_sane>
 800310a:	2800      	cmp	r0, #0
 800310c:	d0f8      	beq.n	8003100 <ai_platform_get_weights_map+0x34>
 800310e:	88eb      	ldrh	r3, [r5, #6]
 8003110:	429f      	cmp	r7, r3
 8003112:	d1f5      	bne.n	8003100 <ai_platform_get_weights_map+0x34>
 8003114:	f04f 0e00 	mov.w	lr, #0
 8003118:	1f23      	subs	r3, r4, #4
 800311a:	4670      	mov	r0, lr
 800311c:	68aa      	ldr	r2, [r5, #8]
 800311e:	eb02 0c0e 	add.w	ip, r2, lr
 8003122:	f10e 0e1c 	add.w	lr, lr, #28
 8003126:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800312a:	b124      	cbz	r4, 8003136 <ai_platform_get_weights_map+0x6a>
 800312c:	3001      	adds	r0, #1
 800312e:	4287      	cmp	r7, r0
 8003130:	f843 4f04 	str.w	r4, [r3, #4]!
 8003134:	d1f2      	bne.n	800311c <ai_platform_get_weights_map+0x50>
 8003136:	1a38      	subs	r0, r7, r0
 8003138:	fab0 f080 	clz	r0, r0
 800313c:	0940      	lsrs	r0, r0, #5
 800313e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003140:	2000      	movs	r0, #0
 8003142:	4770      	bx	lr
 8003144:	1f23      	subs	r3, r4, #4
 8003146:	4628      	mov	r0, r5
 8003148:	2400      	movs	r4, #0
 800314a:	e000      	b.n	800314e <ai_platform_get_weights_map+0x82>
 800314c:	4614      	mov	r4, r2
 800314e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8003152:	42b2      	cmp	r2, r6
 8003154:	d0d2      	beq.n	80030fc <ai_platform_get_weights_map+0x30>
 8003156:	f843 2f04 	str.w	r2, [r3, #4]!
 800315a:	1c62      	adds	r2, r4, #1
 800315c:	4297      	cmp	r7, r2
 800315e:	d1f5      	bne.n	800314c <ai_platform_get_weights_map+0x80>
 8003160:	3402      	adds	r4, #2
 8003162:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003166:	42b3      	cmp	r3, r6
 8003168:	d1ca      	bne.n	8003100 <ai_platform_get_weights_map+0x34>
 800316a:	2001      	movs	r0, #1
 800316c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800316e:	bf00      	nop
 8003170:	a1facade 	.word	0xa1facade

08003174 <ai_platform_get_activations_map>:
 8003174:	2a00      	cmp	r2, #0
 8003176:	d038      	beq.n	80031ea <ai_platform_get_activations_map+0x76>
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	4604      	mov	r4, r0
 800317c:	b1a0      	cbz	r0, 80031a8 <ai_platform_get_activations_map+0x34>
 800317e:	460f      	mov	r7, r1
 8003180:	b191      	cbz	r1, 80031a8 <ai_platform_get_activations_map+0x34>
 8003182:	4b25      	ldr	r3, [pc, #148]	; (8003218 <ai_platform_get_activations_map+0xa4>)
 8003184:	6810      	ldr	r0, [r2, #0]
 8003186:	4298      	cmp	r0, r3
 8003188:	4615      	mov	r5, r2
 800318a:	d00f      	beq.n	80031ac <ai_platform_get_activations_map+0x38>
 800318c:	6a15      	ldr	r5, [r2, #32]
 800318e:	b15d      	cbz	r5, 80031a8 <ai_platform_get_activations_map+0x34>
 8003190:	682e      	ldr	r6, [r5, #0]
 8003192:	429e      	cmp	r6, r3
 8003194:	d02b      	beq.n	80031ee <ai_platform_get_activations_map+0x7a>
 8003196:	f1a1 0001 	sub.w	r0, r1, #1
 800319a:	6025      	str	r5, [r4, #0]
 800319c:	fab0 f080 	clz	r0, r0
 80031a0:	0940      	lsrs	r0, r0, #5
 80031a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031a4:	42a7      	cmp	r7, r4
 80031a6:	d035      	beq.n	8003214 <ai_platform_get_activations_map+0xa0>
 80031a8:	2000      	movs	r0, #0
 80031aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ac:	f102 000c 	add.w	r0, r2, #12
 80031b0:	f7ff ff6e 	bl	8003090 <ai_buffer_array_sane>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d0f7      	beq.n	80031a8 <ai_platform_get_activations_map+0x34>
 80031b8:	89eb      	ldrh	r3, [r5, #14]
 80031ba:	429f      	cmp	r7, r3
 80031bc:	d1f4      	bne.n	80031a8 <ai_platform_get_activations_map+0x34>
 80031be:	f04f 0e00 	mov.w	lr, #0
 80031c2:	1f23      	subs	r3, r4, #4
 80031c4:	4670      	mov	r0, lr
 80031c6:	692a      	ldr	r2, [r5, #16]
 80031c8:	eb02 0c0e 	add.w	ip, r2, lr
 80031cc:	f10e 0e1c 	add.w	lr, lr, #28
 80031d0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80031d4:	b124      	cbz	r4, 80031e0 <ai_platform_get_activations_map+0x6c>
 80031d6:	3001      	adds	r0, #1
 80031d8:	4287      	cmp	r7, r0
 80031da:	f843 4f04 	str.w	r4, [r3, #4]!
 80031de:	d1f2      	bne.n	80031c6 <ai_platform_get_activations_map+0x52>
 80031e0:	1a38      	subs	r0, r7, r0
 80031e2:	fab0 f080 	clz	r0, r0
 80031e6:	0940      	lsrs	r0, r0, #5
 80031e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ea:	2000      	movs	r0, #0
 80031ec:	4770      	bx	lr
 80031ee:	1f23      	subs	r3, r4, #4
 80031f0:	4628      	mov	r0, r5
 80031f2:	2400      	movs	r4, #0
 80031f4:	e000      	b.n	80031f8 <ai_platform_get_activations_map+0x84>
 80031f6:	4614      	mov	r4, r2
 80031f8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80031fc:	42b2      	cmp	r2, r6
 80031fe:	d0d1      	beq.n	80031a4 <ai_platform_get_activations_map+0x30>
 8003200:	f843 2f04 	str.w	r2, [r3, #4]!
 8003204:	1c62      	adds	r2, r4, #1
 8003206:	4297      	cmp	r7, r2
 8003208:	d1f5      	bne.n	80031f6 <ai_platform_get_activations_map+0x82>
 800320a:	3402      	adds	r4, #2
 800320c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003210:	42b3      	cmp	r3, r6
 8003212:	d1c9      	bne.n	80031a8 <ai_platform_get_activations_map+0x34>
 8003214:	2001      	movs	r0, #1
 8003216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003218:	a1facade 	.word	0xa1facade

0800321c <ai_platform_bind_network_params>:
 800321c:	b1a0      	cbz	r0, 8003248 <ai_platform_bind_network_params+0x2c>
 800321e:	b1b1      	cbz	r1, 800324e <ai_platform_bind_network_params+0x32>
 8003220:	b1c2      	cbz	r2, 8003254 <ai_platform_bind_network_params+0x38>
 8003222:	b410      	push	{r4}
 8003224:	4603      	mov	r3, r0
 8003226:	4c0d      	ldr	r4, [pc, #52]	; (800325c <ai_platform_bind_network_params+0x40>)
 8003228:	f843 4b04 	str.w	r4, [r3], #4
 800322c:	f100 0c0c 	add.w	ip, r0, #12
 8003230:	c903      	ldmia	r1, {r0, r1}
 8003232:	e883 0003 	stmia.w	r3, {r0, r1}
 8003236:	e892 0003 	ldmia.w	r2, {r0, r1}
 800323a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800323e:	2301      	movs	r3, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	4603      	mov	r3, r0
 800324a:	4618      	mov	r0, r3
 800324c:	4770      	bx	lr
 800324e:	460b      	mov	r3, r1
 8003250:	4618      	mov	r0, r3
 8003252:	4770      	bx	lr
 8003254:	4613      	mov	r3, r2
 8003256:	4618      	mov	r0, r3
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	a1facade 	.word	0xa1facade

08003260 <ai_platform_network_get_error>:
 8003260:	b510      	push	{r4, lr}
 8003262:	b1f0      	cbz	r0, 80032a2 <ai_platform_network_get_error+0x42>
 8003264:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <ai_platform_network_get_error+0xc4>)
 8003266:	6802      	ldr	r2, [r0, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	4604      	mov	r4, r0
 800326c:	d119      	bne.n	80032a2 <ai_platform_network_get_error+0x42>
 800326e:	f7ff ff29 	bl	80030c4 <_ai_platform_acquire_crc>
 8003272:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <ai_platform_network_get_error+0xc8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327e:	d03c      	beq.n	80032fa <ai_platform_network_get_error+0x9a>
 8003280:	4a2a      	ldr	r2, [pc, #168]	; (800332c <ai_platform_network_get_error+0xcc>)
 8003282:	2301      	movs	r3, #1
 8003284:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003288:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1fb      	bne.n	8003288 <ai_platform_network_get_error+0x28>
 8003290:	4b27      	ldr	r3, [pc, #156]	; (8003330 <ai_platform_network_get_error+0xd0>)
 8003292:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003296:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <ai_platform_network_get_error+0xd4>)
 800329c:	429a      	cmp	r2, r3
 800329e:	d038      	beq.n	8003312 <ai_platform_network_get_error+0xb2>
 80032a0:	e7fe      	b.n	80032a0 <ai_platform_network_get_error+0x40>
 80032a2:	f7ff ff0f 	bl	80030c4 <_ai_platform_acquire_crc>
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <ai_platform_network_get_error+0xc8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d010      	beq.n	80032d6 <ai_platform_network_get_error+0x76>
 80032b4:	4a1d      	ldr	r2, [pc, #116]	; (800332c <ai_platform_network_get_error+0xcc>)
 80032b6:	2301      	movs	r3, #1
 80032b8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80032bc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1fb      	bne.n	80032bc <ai_platform_network_get_error+0x5c>
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <ai_platform_network_get_error+0xd0>)
 80032c6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80032ca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80032ce:	4b19      	ldr	r3, [pc, #100]	; (8003334 <ai_platform_network_get_error+0xd4>)
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d00d      	beq.n	80032f0 <ai_platform_network_get_error+0x90>
 80032d4:	e7fe      	b.n	80032d4 <ai_platform_network_get_error+0x74>
 80032d6:	4a18      	ldr	r2, [pc, #96]	; (8003338 <ai_platform_network_get_error+0xd8>)
 80032d8:	2301      	movs	r3, #1
 80032da:	6093      	str	r3, [r2, #8]
 80032dc:	6893      	ldr	r3, [r2, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1fc      	bne.n	80032dc <ai_platform_network_get_error+0x7c>
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <ai_platform_network_get_error+0xd0>)
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <ai_platform_network_get_error+0xd4>)
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d000      	beq.n	80032f0 <ai_platform_network_get_error+0x90>
 80032ee:	e7fe      	b.n	80032ee <ai_platform_network_get_error+0x8e>
 80032f0:	f7ff feea 	bl	80030c8 <_ai_platform_release_crc>
 80032f4:	f241 0010 	movw	r0, #4112	; 0x1010
 80032f8:	bd10      	pop	{r4, pc}
 80032fa:	4a0f      	ldr	r2, [pc, #60]	; (8003338 <ai_platform_network_get_error+0xd8>)
 80032fc:	2301      	movs	r3, #1
 80032fe:	6093      	str	r3, [r2, #8]
 8003300:	6893      	ldr	r3, [r2, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1fc      	bne.n	8003300 <ai_platform_network_get_error+0xa0>
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <ai_platform_network_get_error+0xd0>)
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <ai_platform_network_get_error+0xd4>)
 800330e:	429a      	cmp	r2, r3
 8003310:	d107      	bne.n	8003322 <ai_platform_network_get_error+0xc2>
 8003312:	f7ff fed9 	bl	80030c8 <_ai_platform_release_crc>
 8003316:	f104 0010 	add.w	r0, r4, #16
 800331a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800331e:	f000 be8b 	b.w	8004038 <core_get_error>
 8003322:	e7fe      	b.n	8003322 <ai_platform_network_get_error+0xc2>
 8003324:	a1c00100 	.word	0xa1c00100
 8003328:	e0042000 	.word	0xe0042000
 800332c:	58024000 	.word	0x58024000
 8003330:	f407a5c2 	.word	0xf407a5c2
 8003334:	b5e8b5cd 	.word	0xb5e8b5cd
 8003338:	40023000 	.word	0x40023000

0800333c <ai_platform_network_set_error>:
 800333c:	b110      	cbz	r0, 8003344 <ai_platform_network_set_error+0x8>
 800333e:	3010      	adds	r0, #16
 8003340:	f000 be80 	b.w	8004044 <core_set_error>
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop

08003348 <ai_platform_inputs_get>:
 8003348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800334c:	b085      	sub	sp, #20
 800334e:	9102      	str	r1, [sp, #8]
 8003350:	b1f0      	cbz	r0, 8003390 <ai_platform_inputs_get+0x48>
 8003352:	4b62      	ldr	r3, [pc, #392]	; (80034dc <ai_platform_inputs_get+0x194>)
 8003354:	6802      	ldr	r2, [r0, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	4607      	mov	r7, r0
 800335a:	d119      	bne.n	8003390 <ai_platform_inputs_get+0x48>
 800335c:	f7ff feb2 	bl	80030c4 <_ai_platform_acquire_crc>
 8003360:	4b5f      	ldr	r3, [pc, #380]	; (80034e0 <ai_platform_inputs_get+0x198>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336c:	d03d      	beq.n	80033ea <ai_platform_inputs_get+0xa2>
 800336e:	4a5d      	ldr	r2, [pc, #372]	; (80034e4 <ai_platform_inputs_get+0x19c>)
 8003370:	2301      	movs	r3, #1
 8003372:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003376:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1fb      	bne.n	8003376 <ai_platform_inputs_get+0x2e>
 800337e:	4b5a      	ldr	r3, [pc, #360]	; (80034e8 <ai_platform_inputs_get+0x1a0>)
 8003380:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003384:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003388:	4b58      	ldr	r3, [pc, #352]	; (80034ec <ai_platform_inputs_get+0x1a4>)
 800338a:	429a      	cmp	r2, r3
 800338c:	d039      	beq.n	8003402 <ai_platform_inputs_get+0xba>
 800338e:	e7fe      	b.n	800338e <ai_platform_inputs_get+0x46>
 8003390:	f7ff fe98 	bl	80030c4 <_ai_platform_acquire_crc>
 8003394:	4b52      	ldr	r3, [pc, #328]	; (80034e0 <ai_platform_inputs_get+0x198>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a0:	d010      	beq.n	80033c4 <ai_platform_inputs_get+0x7c>
 80033a2:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <ai_platform_inputs_get+0x19c>)
 80033a4:	2301      	movs	r3, #1
 80033a6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80033aa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1fb      	bne.n	80033aa <ai_platform_inputs_get+0x62>
 80033b2:	4b4d      	ldr	r3, [pc, #308]	; (80034e8 <ai_platform_inputs_get+0x1a0>)
 80033b4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80033b8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80033bc:	4b4b      	ldr	r3, [pc, #300]	; (80034ec <ai_platform_inputs_get+0x1a4>)
 80033be:	429a      	cmp	r2, r3
 80033c0:	d00d      	beq.n	80033de <ai_platform_inputs_get+0x96>
 80033c2:	e7fe      	b.n	80033c2 <ai_platform_inputs_get+0x7a>
 80033c4:	4a4a      	ldr	r2, [pc, #296]	; (80034f0 <ai_platform_inputs_get+0x1a8>)
 80033c6:	2301      	movs	r3, #1
 80033c8:	6093      	str	r3, [r2, #8]
 80033ca:	6893      	ldr	r3, [r2, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1fc      	bne.n	80033ca <ai_platform_inputs_get+0x82>
 80033d0:	4b45      	ldr	r3, [pc, #276]	; (80034e8 <ai_platform_inputs_get+0x1a0>)
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	4b45      	ldr	r3, [pc, #276]	; (80034ec <ai_platform_inputs_get+0x1a4>)
 80033d8:	429a      	cmp	r2, r3
 80033da:	d000      	beq.n	80033de <ai_platform_inputs_get+0x96>
 80033dc:	e7fe      	b.n	80033dc <ai_platform_inputs_get+0x94>
 80033de:	f7ff fe73 	bl	80030c8 <_ai_platform_release_crc>
 80033e2:	2000      	movs	r0, #0
 80033e4:	b005      	add	sp, #20
 80033e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ea:	4a41      	ldr	r2, [pc, #260]	; (80034f0 <ai_platform_inputs_get+0x1a8>)
 80033ec:	2301      	movs	r3, #1
 80033ee:	6093      	str	r3, [r2, #8]
 80033f0:	6893      	ldr	r3, [r2, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1fc      	bne.n	80033f0 <ai_platform_inputs_get+0xa8>
 80033f6:	4b3c      	ldr	r3, [pc, #240]	; (80034e8 <ai_platform_inputs_get+0x1a0>)
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <ai_platform_inputs_get+0x1a4>)
 80033fe:	429a      	cmp	r2, r3
 8003400:	d155      	bne.n	80034ae <ai_platform_inputs_get+0x166>
 8003402:	f7ff fe61 	bl	80030c8 <_ai_platform_release_crc>
 8003406:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d051      	beq.n	80034b0 <ai_platform_inputs_get+0x168>
 800340c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8003410:	f1ba 0f00 	cmp.w	sl, #0
 8003414:	d04c      	beq.n	80034b0 <ai_platform_inputs_get+0x168>
 8003416:	f04f 0b00 	mov.w	fp, #0
 800341a:	465d      	mov	r5, fp
 800341c:	9703      	str	r7, [sp, #12]
 800341e:	e016      	b.n	800344e <ai_platform_inputs_get+0x106>
 8003420:	9901      	ldr	r1, [sp, #4]
 8003422:	2301      	movs	r3, #1
 8003424:	507b      	str	r3, [r7, r1]
 8003426:	69b1      	ldr	r1, [r6, #24]
 8003428:	6849      	ldr	r1, [r1, #4]
 800342a:	6121      	str	r1, [r4, #16]
 800342c:	f04f 0301 	mov.w	r3, #1
 8003430:	7523      	strb	r3, [r4, #20]
 8003432:	e9c4 c200 	strd	ip, r2, [r4]
 8003436:	6962      	ldr	r2, [r4, #20]
 8003438:	60a0      	str	r0, [r4, #8]
 800343a:	2300      	movs	r3, #0
 800343c:	f369 221f 	bfi	r2, r9, #8, #24
 8003440:	f8c4 8018 	str.w	r8, [r4, #24]
 8003444:	60e3      	str	r3, [r4, #12]
 8003446:	3501      	adds	r5, #1
 8003448:	f10b 0b1c 	add.w	fp, fp, #28
 800344c:	6162      	str	r2, [r4, #20]
 800344e:	f8ba 3000 	ldrh.w	r3, [sl]
 8003452:	42ab      	cmp	r3, r5
 8003454:	b2aa      	uxth	r2, r5
 8003456:	d93a      	bls.n	80034ce <ai_platform_inputs_get+0x186>
 8003458:	f8da 3004 	ldr.w	r3, [sl, #4]
 800345c:	00e9      	lsls	r1, r5, #3
 800345e:	9101      	str	r1, [sp, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d034      	beq.n	80034ce <ai_platform_inputs_get+0x186>
 8003464:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003468:	2e00      	cmp	r6, #0
 800346a:	d030      	beq.n	80034ce <ai_platform_inputs_get+0x186>
 800346c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003470:	69b2      	ldr	r2, [r6, #24]
 8003472:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003476:	6810      	ldr	r0, [r2, #0]
 8003478:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800347c:	68b3      	ldr	r3, [r6, #8]
 800347e:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003482:	f003 f971 	bl	8006768 <ai_array_to_buffer_fmt>
 8003486:	69b1      	ldr	r1, [r6, #24]
 8003488:	4684      	mov	ip, r0
 800348a:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800348e:	688a      	ldr	r2, [r1, #8]
 8003490:	445c      	add	r4, fp
 8003492:	2800      	cmp	r0, #0
 8003494:	d0c8      	beq.n	8003428 <ai_platform_inputs_get+0xe0>
 8003496:	2100      	movs	r1, #0
 8003498:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800349c:	6831      	ldr	r1, [r6, #0]
 800349e:	6041      	str	r1, [r0, #4]
 80034a0:	b111      	cbz	r1, 80034a8 <ai_platform_inputs_get+0x160>
 80034a2:	8849      	ldrh	r1, [r1, #2]
 80034a4:	2900      	cmp	r1, #0
 80034a6:	d1bb      	bne.n	8003420 <ai_platform_inputs_get+0xd8>
 80034a8:	69b1      	ldr	r1, [r6, #24]
 80034aa:	2000      	movs	r0, #0
 80034ac:	e7bc      	b.n	8003428 <ai_platform_inputs_get+0xe0>
 80034ae:	e7fe      	b.n	80034ae <ai_platform_inputs_get+0x166>
 80034b0:	2218      	movs	r2, #24
 80034b2:	2111      	movs	r1, #17
 80034b4:	f107 0010 	add.w	r0, r7, #16
 80034b8:	f000 fdc4 	bl	8004044 <core_set_error>
 80034bc:	2200      	movs	r2, #0
 80034be:	4610      	mov	r0, r2
 80034c0:	9b02      	ldr	r3, [sp, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d08e      	beq.n	80033e4 <ai_platform_inputs_get+0x9c>
 80034c6:	801a      	strh	r2, [r3, #0]
 80034c8:	b005      	add	sp, #20
 80034ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ce:	9f03      	ldr	r7, [sp, #12]
 80034d0:	2a00      	cmp	r2, #0
 80034d2:	d0ed      	beq.n	80034b0 <ai_platform_inputs_get+0x168>
 80034d4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80034d8:	6858      	ldr	r0, [r3, #4]
 80034da:	e7f1      	b.n	80034c0 <ai_platform_inputs_get+0x178>
 80034dc:	a1c00100 	.word	0xa1c00100
 80034e0:	e0042000 	.word	0xe0042000
 80034e4:	58024000 	.word	0x58024000
 80034e8:	f407a5c2 	.word	0xf407a5c2
 80034ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80034f0:	40023000 	.word	0x40023000

080034f4 <ai_platform_outputs_get>:
 80034f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f8:	b085      	sub	sp, #20
 80034fa:	9102      	str	r1, [sp, #8]
 80034fc:	b1f0      	cbz	r0, 800353c <ai_platform_outputs_get+0x48>
 80034fe:	4b5f      	ldr	r3, [pc, #380]	; (800367c <ai_platform_outputs_get+0x188>)
 8003500:	6802      	ldr	r2, [r0, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	4607      	mov	r7, r0
 8003506:	d119      	bne.n	800353c <ai_platform_outputs_get+0x48>
 8003508:	f7ff fddc 	bl	80030c4 <_ai_platform_acquire_crc>
 800350c:	4b5c      	ldr	r3, [pc, #368]	; (8003680 <ai_platform_outputs_get+0x18c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003518:	d03d      	beq.n	8003596 <ai_platform_outputs_get+0xa2>
 800351a:	4a5a      	ldr	r2, [pc, #360]	; (8003684 <ai_platform_outputs_get+0x190>)
 800351c:	2301      	movs	r3, #1
 800351e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003522:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1fb      	bne.n	8003522 <ai_platform_outputs_get+0x2e>
 800352a:	4b57      	ldr	r3, [pc, #348]	; (8003688 <ai_platform_outputs_get+0x194>)
 800352c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003530:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003534:	4b55      	ldr	r3, [pc, #340]	; (800368c <ai_platform_outputs_get+0x198>)
 8003536:	429a      	cmp	r2, r3
 8003538:	d039      	beq.n	80035ae <ai_platform_outputs_get+0xba>
 800353a:	e7fe      	b.n	800353a <ai_platform_outputs_get+0x46>
 800353c:	f7ff fdc2 	bl	80030c4 <_ai_platform_acquire_crc>
 8003540:	4b4f      	ldr	r3, [pc, #316]	; (8003680 <ai_platform_outputs_get+0x18c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354c:	d010      	beq.n	8003570 <ai_platform_outputs_get+0x7c>
 800354e:	4a4d      	ldr	r2, [pc, #308]	; (8003684 <ai_platform_outputs_get+0x190>)
 8003550:	2301      	movs	r3, #1
 8003552:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003556:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1fb      	bne.n	8003556 <ai_platform_outputs_get+0x62>
 800355e:	4b4a      	ldr	r3, [pc, #296]	; (8003688 <ai_platform_outputs_get+0x194>)
 8003560:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003564:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003568:	4b48      	ldr	r3, [pc, #288]	; (800368c <ai_platform_outputs_get+0x198>)
 800356a:	429a      	cmp	r2, r3
 800356c:	d00d      	beq.n	800358a <ai_platform_outputs_get+0x96>
 800356e:	e7fe      	b.n	800356e <ai_platform_outputs_get+0x7a>
 8003570:	4a47      	ldr	r2, [pc, #284]	; (8003690 <ai_platform_outputs_get+0x19c>)
 8003572:	2301      	movs	r3, #1
 8003574:	6093      	str	r3, [r2, #8]
 8003576:	6893      	ldr	r3, [r2, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1fc      	bne.n	8003576 <ai_platform_outputs_get+0x82>
 800357c:	4b42      	ldr	r3, [pc, #264]	; (8003688 <ai_platform_outputs_get+0x194>)
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	4b42      	ldr	r3, [pc, #264]	; (800368c <ai_platform_outputs_get+0x198>)
 8003584:	429a      	cmp	r2, r3
 8003586:	d000      	beq.n	800358a <ai_platform_outputs_get+0x96>
 8003588:	e7fe      	b.n	8003588 <ai_platform_outputs_get+0x94>
 800358a:	f7ff fd9d 	bl	80030c8 <_ai_platform_release_crc>
 800358e:	2000      	movs	r0, #0
 8003590:	b005      	add	sp, #20
 8003592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003596:	4a3e      	ldr	r2, [pc, #248]	; (8003690 <ai_platform_outputs_get+0x19c>)
 8003598:	2301      	movs	r3, #1
 800359a:	6093      	str	r3, [r2, #8]
 800359c:	6893      	ldr	r3, [r2, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1fc      	bne.n	800359c <ai_platform_outputs_get+0xa8>
 80035a2:	4b39      	ldr	r3, [pc, #228]	; (8003688 <ai_platform_outputs_get+0x194>)
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	4b38      	ldr	r3, [pc, #224]	; (800368c <ai_platform_outputs_get+0x198>)
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d150      	bne.n	8003650 <ai_platform_outputs_get+0x15c>
 80035ae:	f7ff fd8b 	bl	80030c8 <_ai_platform_release_crc>
 80035b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d958      	bls.n	800366a <ai_platform_outputs_get+0x176>
 80035b8:	f04f 0b00 	mov.w	fp, #0
 80035bc:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80035c0:	9703      	str	r7, [sp, #12]
 80035c2:	465d      	mov	r5, fp
 80035c4:	e016      	b.n	80035f4 <ai_platform_outputs_get+0x100>
 80035c6:	9901      	ldr	r1, [sp, #4]
 80035c8:	2301      	movs	r3, #1
 80035ca:	507b      	str	r3, [r7, r1]
 80035cc:	69b1      	ldr	r1, [r6, #24]
 80035ce:	6849      	ldr	r1, [r1, #4]
 80035d0:	6121      	str	r1, [r4, #16]
 80035d2:	f04f 0301 	mov.w	r3, #1
 80035d6:	7523      	strb	r3, [r4, #20]
 80035d8:	e9c4 c200 	strd	ip, r2, [r4]
 80035dc:	6962      	ldr	r2, [r4, #20]
 80035de:	60a0      	str	r0, [r4, #8]
 80035e0:	2300      	movs	r3, #0
 80035e2:	f369 221f 	bfi	r2, r9, #8, #24
 80035e6:	f8c4 8018 	str.w	r8, [r4, #24]
 80035ea:	60e3      	str	r3, [r4, #12]
 80035ec:	3501      	adds	r5, #1
 80035ee:	f10b 0b1c 	add.w	fp, fp, #28
 80035f2:	6162      	str	r2, [r4, #20]
 80035f4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80035f8:	42ab      	cmp	r3, r5
 80035fa:	b2aa      	uxth	r2, r5
 80035fc:	d929      	bls.n	8003652 <ai_platform_outputs_get+0x15e>
 80035fe:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003602:	00e9      	lsls	r1, r5, #3
 8003604:	9101      	str	r1, [sp, #4]
 8003606:	b323      	cbz	r3, 8003652 <ai_platform_outputs_get+0x15e>
 8003608:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800360c:	b30e      	cbz	r6, 8003652 <ai_platform_outputs_get+0x15e>
 800360e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003612:	69b2      	ldr	r2, [r6, #24]
 8003614:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003618:	6810      	ldr	r0, [r2, #0]
 800361a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800361e:	68b3      	ldr	r3, [r6, #8]
 8003620:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003624:	f003 f8a0 	bl	8006768 <ai_array_to_buffer_fmt>
 8003628:	69b1      	ldr	r1, [r6, #24]
 800362a:	4684      	mov	ip, r0
 800362c:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8003630:	688a      	ldr	r2, [r1, #8]
 8003632:	445c      	add	r4, fp
 8003634:	2800      	cmp	r0, #0
 8003636:	d0ca      	beq.n	80035ce <ai_platform_outputs_get+0xda>
 8003638:	2100      	movs	r1, #0
 800363a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800363e:	6831      	ldr	r1, [r6, #0]
 8003640:	6041      	str	r1, [r0, #4]
 8003642:	b111      	cbz	r1, 800364a <ai_platform_outputs_get+0x156>
 8003644:	8849      	ldrh	r1, [r1, #2]
 8003646:	2900      	cmp	r1, #0
 8003648:	d1bd      	bne.n	80035c6 <ai_platform_outputs_get+0xd2>
 800364a:	69b1      	ldr	r1, [r6, #24]
 800364c:	2000      	movs	r0, #0
 800364e:	e7be      	b.n	80035ce <ai_platform_outputs_get+0xda>
 8003650:	e7fe      	b.n	8003650 <ai_platform_outputs_get+0x15c>
 8003652:	9f03      	ldr	r7, [sp, #12]
 8003654:	b14a      	cbz	r2, 800366a <ai_platform_outputs_get+0x176>
 8003656:	f8da 3014 	ldr.w	r3, [sl, #20]
 800365a:	6858      	ldr	r0, [r3, #4]
 800365c:	9b02      	ldr	r3, [sp, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d096      	beq.n	8003590 <ai_platform_outputs_get+0x9c>
 8003662:	801a      	strh	r2, [r3, #0]
 8003664:	b005      	add	sp, #20
 8003666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366a:	2218      	movs	r2, #24
 800366c:	2111      	movs	r1, #17
 800366e:	f107 0010 	add.w	r0, r7, #16
 8003672:	f000 fce7 	bl	8004044 <core_set_error>
 8003676:	2200      	movs	r2, #0
 8003678:	4610      	mov	r0, r2
 800367a:	e7ef      	b.n	800365c <ai_platform_outputs_get+0x168>
 800367c:	a1c00100 	.word	0xa1c00100
 8003680:	e0042000 	.word	0xe0042000
 8003684:	58024000 	.word	0x58024000
 8003688:	f407a5c2 	.word	0xf407a5c2
 800368c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003690:	40023000 	.word	0x40023000

08003694 <ai_platform_network_create>:
 8003694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003698:	b083      	sub	sp, #12
 800369a:	4606      	mov	r6, r0
 800369c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80036a0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80036a4:	4615      	mov	r5, r2
 80036a6:	461f      	mov	r7, r3
 80036a8:	f7ff fd0c 	bl	80030c4 <_ai_platform_acquire_crc>
 80036ac:	b188      	cbz	r0, 80036d2 <ai_platform_network_create+0x3e>
 80036ae:	4a5d      	ldr	r2, [pc, #372]	; (8003824 <ai_platform_network_create+0x190>)
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80036b6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80036ba:	4603      	mov	r3, r0
 80036bc:	d00e      	beq.n	80036dc <ai_platform_network_create+0x48>
 80036be:	4a5a      	ldr	r2, [pc, #360]	; (8003828 <ai_platform_network_create+0x194>)
 80036c0:	2118      	movs	r1, #24
 80036c2:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80036c6:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80036ca:	2918      	cmp	r1, #24
 80036cc:	d018      	beq.n	8003700 <ai_platform_network_create+0x6c>
 80036ce:	f7ff fcfb 	bl	80030c8 <_ai_platform_release_crc>
 80036d2:	f244 1033 	movw	r0, #16691	; 0x4133
 80036d6:	b003      	add	sp, #12
 80036d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036dc:	4a53      	ldr	r2, [pc, #332]	; (800382c <ai_platform_network_create+0x198>)
 80036de:	2101      	movs	r1, #1
 80036e0:	6091      	str	r1, [r2, #8]
 80036e2:	2114      	movs	r1, #20
 80036e4:	e001      	b.n	80036ea <ai_platform_network_create+0x56>
 80036e6:	3901      	subs	r1, #1
 80036e8:	d002      	beq.n	80036f0 <ai_platform_network_create+0x5c>
 80036ea:	6894      	ldr	r4, [r2, #8]
 80036ec:	2c00      	cmp	r4, #0
 80036ee:	d1fa      	bne.n	80036e6 <ai_platform_network_create+0x52>
 80036f0:	4a4e      	ldr	r2, [pc, #312]	; (800382c <ai_platform_network_create+0x198>)
 80036f2:	6891      	ldr	r1, [r2, #8]
 80036f4:	b911      	cbnz	r1, 80036fc <ai_platform_network_create+0x68>
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	3201      	adds	r2, #1
 80036fa:	d008      	beq.n	800370e <ai_platform_network_create+0x7a>
 80036fc:	4618      	mov	r0, r3
 80036fe:	e7e6      	b.n	80036ce <ai_platform_network_create+0x3a>
 8003700:	2101      	movs	r1, #1
 8003702:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003706:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800370a:	2900      	cmp	r1, #0
 800370c:	d1fb      	bne.n	8003706 <ai_platform_network_create+0x72>
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fcda 	bl	80030c8 <_ai_platform_release_crc>
 8003714:	f7ff fcd6 	bl	80030c4 <_ai_platform_acquire_crc>
 8003718:	4b42      	ldr	r3, [pc, #264]	; (8003824 <ai_platform_network_create+0x190>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003724:	d010      	beq.n	8003748 <ai_platform_network_create+0xb4>
 8003726:	4b40      	ldr	r3, [pc, #256]	; (8003828 <ai_platform_network_create+0x194>)
 8003728:	2201      	movs	r2, #1
 800372a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800372e:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8003732:	2900      	cmp	r1, #0
 8003734:	d1fb      	bne.n	800372e <ai_platform_network_create+0x9a>
 8003736:	4a3e      	ldr	r2, [pc, #248]	; (8003830 <ai_platform_network_create+0x19c>)
 8003738:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800373c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003740:	4b3c      	ldr	r3, [pc, #240]	; (8003834 <ai_platform_network_create+0x1a0>)
 8003742:	429a      	cmp	r2, r3
 8003744:	d00c      	beq.n	8003760 <ai_platform_network_create+0xcc>
 8003746:	e7fe      	b.n	8003746 <ai_platform_network_create+0xb2>
 8003748:	4a38      	ldr	r2, [pc, #224]	; (800382c <ai_platform_network_create+0x198>)
 800374a:	2301      	movs	r3, #1
 800374c:	6093      	str	r3, [r2, #8]
 800374e:	6893      	ldr	r3, [r2, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1fc      	bne.n	800374e <ai_platform_network_create+0xba>
 8003754:	4b36      	ldr	r3, [pc, #216]	; (8003830 <ai_platform_network_create+0x19c>)
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	4b36      	ldr	r3, [pc, #216]	; (8003834 <ai_platform_network_create+0x1a0>)
 800375c:	429a      	cmp	r2, r3
 800375e:	d122      	bne.n	80037a6 <ai_platform_network_create+0x112>
 8003760:	f7ff fcb2 	bl	80030c8 <_ai_platform_release_crc>
 8003764:	b38e      	cbz	r6, 80037ca <ai_platform_network_create+0x136>
 8003766:	4b34      	ldr	r3, [pc, #208]	; (8003838 <ai_platform_network_create+0x1a4>)
 8003768:	602b      	str	r3, [r5, #0]
 800376a:	6035      	str	r5, [r6, #0]
 800376c:	f000 fc62 	bl	8004034 <core_init>
 8003770:	b1d0      	cbz	r0, 80037a8 <ai_platform_network_create+0x114>
 8003772:	f7ff fca7 	bl	80030c4 <_ai_platform_acquire_crc>
 8003776:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <ai_platform_network_create+0x190>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800377e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003782:	d025      	beq.n	80037d0 <ai_platform_network_create+0x13c>
 8003784:	4a28      	ldr	r2, [pc, #160]	; (8003828 <ai_platform_network_create+0x194>)
 8003786:	2301      	movs	r3, #1
 8003788:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800378c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1fb      	bne.n	800378c <ai_platform_network_create+0xf8>
 8003794:	4b26      	ldr	r3, [pc, #152]	; (8003830 <ai_platform_network_create+0x19c>)
 8003796:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800379a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800379e:	4b25      	ldr	r3, [pc, #148]	; (8003834 <ai_platform_network_create+0x1a0>)
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d022      	beq.n	80037ea <ai_platform_network_create+0x156>
 80037a4:	e7fe      	b.n	80037a4 <ai_platform_network_create+0x110>
 80037a6:	e7fe      	b.n	80037a6 <ai_platform_network_create+0x112>
 80037a8:	2430      	movs	r4, #48	; 0x30
 80037aa:	2300      	movs	r3, #0
 80037ac:	6033      	str	r3, [r6, #0]
 80037ae:	2610      	movs	r6, #16
 80037b0:	464a      	mov	r2, r9
 80037b2:	4641      	mov	r1, r8
 80037b4:	4638      	mov	r0, r7
 80037b6:	f003 f87d 	bl	80068b4 <ai_version_get>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2000      	movs	r0, #0
 80037be:	f364 0007 	bfi	r0, r4, #0, #8
 80037c2:	64ab      	str	r3, [r5, #72]	; 0x48
 80037c4:	f366 201f 	bfi	r0, r6, #8, #24
 80037c8:	e785      	b.n	80036d6 <ai_platform_network_create+0x42>
 80037ca:	f241 0010 	movw	r0, #4112	; 0x1010
 80037ce:	e782      	b.n	80036d6 <ai_platform_network_create+0x42>
 80037d0:	4a16      	ldr	r2, [pc, #88]	; (800382c <ai_platform_network_create+0x198>)
 80037d2:	2301      	movs	r3, #1
 80037d4:	6093      	str	r3, [r2, #8]
 80037d6:	6893      	ldr	r3, [r2, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1fc      	bne.n	80037d6 <ai_platform_network_create+0x142>
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <ai_platform_network_create+0x19c>)
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	4b14      	ldr	r3, [pc, #80]	; (8003834 <ai_platform_network_create+0x1a0>)
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d000      	beq.n	80037ea <ai_platform_network_create+0x156>
 80037e8:	e7fe      	b.n	80037e8 <ai_platform_network_create+0x154>
 80037ea:	f7ff fc6d 	bl	80030c8 <_ai_platform_release_crc>
 80037ee:	2200      	movs	r2, #0
 80037f0:	4641      	mov	r1, r8
 80037f2:	4638      	mov	r0, r7
 80037f4:	f003 f85e 	bl	80068b4 <ai_version_get>
 80037f8:	2200      	movs	r2, #0
 80037fa:	4604      	mov	r4, r0
 80037fc:	2105      	movs	r1, #5
 80037fe:	2001      	movs	r0, #1
 8003800:	f003 f858 	bl	80068b4 <ai_version_get>
 8003804:	4284      	cmp	r4, r0
 8003806:	d001      	beq.n	800380c <ai_platform_network_create+0x178>
 8003808:	2401      	movs	r4, #1
 800380a:	e7ce      	b.n	80037aa <ai_platform_network_create+0x116>
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <ai_platform_network_create+0x1a8>)
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	a801      	add	r0, sp, #4
 8003812:	f000 fc23 	bl	800405c <ai_check_custom_types>
 8003816:	b110      	cbz	r0, 800381e <ai_platform_network_create+0x18a>
 8003818:	2600      	movs	r6, #0
 800381a:	4634      	mov	r4, r6
 800381c:	e7c8      	b.n	80037b0 <ai_platform_network_create+0x11c>
 800381e:	2402      	movs	r4, #2
 8003820:	e7c3      	b.n	80037aa <ai_platform_network_create+0x116>
 8003822:	bf00      	nop
 8003824:	e0042000 	.word	0xe0042000
 8003828:	58024000 	.word	0x58024000
 800382c:	40023000 	.word	0x40023000
 8003830:	f407a5c2 	.word	0xf407a5c2
 8003834:	b5e8b5cd 	.word	0xb5e8b5cd
 8003838:	a1c00100 	.word	0xa1c00100
 800383c:	84048403 	.word	0x84048403

08003840 <ai_platform_network_init>:
 8003840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003844:	b1f8      	cbz	r0, 8003886 <ai_platform_network_init+0x46>
 8003846:	4b6e      	ldr	r3, [pc, #440]	; (8003a00 <ai_platform_network_init+0x1c0>)
 8003848:	6802      	ldr	r2, [r0, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	4604      	mov	r4, r0
 800384e:	d11a      	bne.n	8003886 <ai_platform_network_init+0x46>
 8003850:	460e      	mov	r6, r1
 8003852:	f7ff fc37 	bl	80030c4 <_ai_platform_acquire_crc>
 8003856:	4b6b      	ldr	r3, [pc, #428]	; (8003a04 <ai_platform_network_init+0x1c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003862:	d03d      	beq.n	80038e0 <ai_platform_network_init+0xa0>
 8003864:	4a68      	ldr	r2, [pc, #416]	; (8003a08 <ai_platform_network_init+0x1c8>)
 8003866:	2301      	movs	r3, #1
 8003868:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800386c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1fb      	bne.n	800386c <ai_platform_network_init+0x2c>
 8003874:	4b65      	ldr	r3, [pc, #404]	; (8003a0c <ai_platform_network_init+0x1cc>)
 8003876:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800387a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800387e:	4b64      	ldr	r3, [pc, #400]	; (8003a10 <ai_platform_network_init+0x1d0>)
 8003880:	429a      	cmp	r2, r3
 8003882:	d039      	beq.n	80038f8 <ai_platform_network_init+0xb8>
 8003884:	e7fe      	b.n	8003884 <ai_platform_network_init+0x44>
 8003886:	f7ff fc1d 	bl	80030c4 <_ai_platform_acquire_crc>
 800388a:	4b5e      	ldr	r3, [pc, #376]	; (8003a04 <ai_platform_network_init+0x1c4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003896:	d010      	beq.n	80038ba <ai_platform_network_init+0x7a>
 8003898:	4a5b      	ldr	r2, [pc, #364]	; (8003a08 <ai_platform_network_init+0x1c8>)
 800389a:	2301      	movs	r3, #1
 800389c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80038a0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1fb      	bne.n	80038a0 <ai_platform_network_init+0x60>
 80038a8:	4b58      	ldr	r3, [pc, #352]	; (8003a0c <ai_platform_network_init+0x1cc>)
 80038aa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80038ae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80038b2:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <ai_platform_network_init+0x1d0>)
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d00d      	beq.n	80038d4 <ai_platform_network_init+0x94>
 80038b8:	e7fe      	b.n	80038b8 <ai_platform_network_init+0x78>
 80038ba:	4a56      	ldr	r2, [pc, #344]	; (8003a14 <ai_platform_network_init+0x1d4>)
 80038bc:	2301      	movs	r3, #1
 80038be:	6093      	str	r3, [r2, #8]
 80038c0:	6893      	ldr	r3, [r2, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1fc      	bne.n	80038c0 <ai_platform_network_init+0x80>
 80038c6:	4b51      	ldr	r3, [pc, #324]	; (8003a0c <ai_platform_network_init+0x1cc>)
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	4b50      	ldr	r3, [pc, #320]	; (8003a10 <ai_platform_network_init+0x1d0>)
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d000      	beq.n	80038d4 <ai_platform_network_init+0x94>
 80038d2:	e7fe      	b.n	80038d2 <ai_platform_network_init+0x92>
 80038d4:	f7ff fbf8 	bl	80030c8 <_ai_platform_release_crc>
 80038d8:	2600      	movs	r6, #0
 80038da:	4630      	mov	r0, r6
 80038dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038e0:	4a4c      	ldr	r2, [pc, #304]	; (8003a14 <ai_platform_network_init+0x1d4>)
 80038e2:	2301      	movs	r3, #1
 80038e4:	6093      	str	r3, [r2, #8]
 80038e6:	6893      	ldr	r3, [r2, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1fc      	bne.n	80038e6 <ai_platform_network_init+0xa6>
 80038ec:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <ai_platform_network_init+0x1cc>)
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <ai_platform_network_init+0x1d0>)
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d11c      	bne.n	8003932 <ai_platform_network_init+0xf2>
 80038f8:	f7ff fbe6 	bl	80030c8 <_ai_platform_release_crc>
 80038fc:	2e00      	cmp	r6, #0
 80038fe:	d06f      	beq.n	80039e0 <ai_platform_network_init+0x1a0>
 8003900:	4b45      	ldr	r3, [pc, #276]	; (8003a18 <ai_platform_network_init+0x1d8>)
 8003902:	6832      	ldr	r2, [r6, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d115      	bne.n	8003934 <ai_platform_network_init+0xf4>
 8003908:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800390c:	6933      	ldr	r3, [r6, #16]
 800390e:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8003912:	89f7      	ldrh	r7, [r6, #14]
 8003914:	62a3      	str	r3, [r4, #40]	; 0x28
 8003916:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800391a:	2303      	movs	r3, #3
 800391c:	84e7      	strh	r7, [r4, #38]	; 0x26
 800391e:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8003922:	60e3      	str	r3, [r4, #12]
 8003924:	4620      	mov	r0, r4
 8003926:	4626      	mov	r6, r4
 8003928:	f000 fbc2 	bl	80040b0 <ai_layers_init_all>
 800392c:	4630      	mov	r0, r6
 800392e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003932:	e7fe      	b.n	8003932 <ai_platform_network_init+0xf2>
 8003934:	2101      	movs	r1, #1
 8003936:	4630      	mov	r0, r6
 8003938:	4635      	mov	r5, r6
 800393a:	6876      	ldr	r6, [r6, #4]
 800393c:	f7ff fb74 	bl	8003028 <ai_buffer_get_size>
 8003940:	f105 081c 	add.w	r8, r5, #28
 8003944:	4681      	mov	r9, r0
 8003946:	2101      	movs	r1, #1
 8003948:	4640      	mov	r0, r8
 800394a:	6a2f      	ldr	r7, [r5, #32]
 800394c:	f7ff fb6c 	bl	8003028 <ai_buffer_get_size>
 8003950:	f1b9 0f00 	cmp.w	r9, #0
 8003954:	d025      	beq.n	80039a2 <ai_platform_network_init+0x162>
 8003956:	2201      	movs	r2, #1
 8003958:	4696      	mov	lr, r2
 800395a:	bb30      	cbnz	r0, 80039aa <ai_platform_network_init+0x16a>
 800395c:	4680      	mov	r8, r0
 800395e:	4607      	mov	r7, r0
 8003960:	b376      	cbz	r6, 80039c0 <ai_platform_network_init+0x180>
 8003962:	8be3      	ldrh	r3, [r4, #30]
 8003964:	4573      	cmp	r3, lr
 8003966:	d323      	bcc.n	80039b0 <ai_platform_network_init+0x170>
 8003968:	b142      	cbz	r2, 800397c <ai_platform_network_init+0x13c>
 800396a:	46ac      	mov	ip, r5
 800396c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003970:	6a25      	ldr	r5, [r4, #32]
 8003972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003974:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003978:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800397c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800397e:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8003982:	2600      	movs	r6, #0
 8003984:	42bb      	cmp	r3, r7
 8003986:	83a6      	strh	r6, [r4, #28]
 8003988:	d323      	bcc.n	80039d2 <ai_platform_network_init+0x192>
 800398a:	b37f      	cbz	r7, 80039ec <ai_platform_network_init+0x1ac>
 800398c:	46c4      	mov	ip, r8
 800398e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003992:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003996:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800399a:	46b6      	mov	lr, r6
 800399c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80039a0:	e7bb      	b.n	800391a <ai_platform_network_init+0xda>
 80039a2:	464a      	mov	r2, r9
 80039a4:	46ce      	mov	lr, r9
 80039a6:	464d      	mov	r5, r9
 80039a8:	e7d7      	b.n	800395a <ai_platform_network_init+0x11a>
 80039aa:	b30f      	cbz	r7, 80039f0 <ai_platform_network_init+0x1b0>
 80039ac:	2701      	movs	r7, #1
 80039ae:	e7d7      	b.n	8003960 <ai_platform_network_init+0x120>
 80039b0:	2212      	movs	r2, #18
 80039b2:	2116      	movs	r1, #22
 80039b4:	f104 0010 	add.w	r0, r4, #16
 80039b8:	f000 fb44 	bl	8004044 <core_set_error>
 80039bc:	2600      	movs	r6, #0
 80039be:	e78c      	b.n	80038da <ai_platform_network_init+0x9a>
 80039c0:	f1b9 0f00 	cmp.w	r9, #0
 80039c4:	d0cd      	beq.n	8003962 <ai_platform_network_init+0x122>
 80039c6:	2110      	movs	r1, #16
 80039c8:	2212      	movs	r2, #18
 80039ca:	1860      	adds	r0, r4, r1
 80039cc:	f000 fb3a 	bl	8004044 <core_set_error>
 80039d0:	e783      	b.n	80038da <ai_platform_network_init+0x9a>
 80039d2:	2213      	movs	r2, #19
 80039d4:	2116      	movs	r1, #22
 80039d6:	f104 0010 	add.w	r0, r4, #16
 80039da:	f000 fb33 	bl	8004044 <core_set_error>
 80039de:	e77c      	b.n	80038da <ai_platform_network_init+0x9a>
 80039e0:	2110      	movs	r1, #16
 80039e2:	2211      	movs	r2, #17
 80039e4:	1860      	adds	r0, r4, r1
 80039e6:	f000 fb2d 	bl	8004044 <core_set_error>
 80039ea:	e776      	b.n	80038da <ai_platform_network_init+0x9a>
 80039ec:	46be      	mov	lr, r7
 80039ee:	e794      	b.n	800391a <ai_platform_network_init+0xda>
 80039f0:	2110      	movs	r1, #16
 80039f2:	2213      	movs	r2, #19
 80039f4:	1860      	adds	r0, r4, r1
 80039f6:	f000 fb25 	bl	8004044 <core_set_error>
 80039fa:	463e      	mov	r6, r7
 80039fc:	e76d      	b.n	80038da <ai_platform_network_init+0x9a>
 80039fe:	bf00      	nop
 8003a00:	a1c00100 	.word	0xa1c00100
 8003a04:	e0042000 	.word	0xe0042000
 8003a08:	58024000 	.word	0x58024000
 8003a0c:	f407a5c2 	.word	0xf407a5c2
 8003a10:	b5e8b5cd 	.word	0xb5e8b5cd
 8003a14:	40023000 	.word	0x40023000
 8003a18:	a1facade 	.word	0xa1facade

08003a1c <ai_platform_network_post_init>:
 8003a1c:	b538      	push	{r3, r4, r5, lr}
 8003a1e:	b1f0      	cbz	r0, 8003a5e <ai_platform_network_post_init+0x42>
 8003a20:	4b3c      	ldr	r3, [pc, #240]	; (8003b14 <ai_platform_network_post_init+0xf8>)
 8003a22:	6802      	ldr	r2, [r0, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	4604      	mov	r4, r0
 8003a28:	d119      	bne.n	8003a5e <ai_platform_network_post_init+0x42>
 8003a2a:	f7ff fb4b 	bl	80030c4 <_ai_platform_acquire_crc>
 8003a2e:	4b3a      	ldr	r3, [pc, #232]	; (8003b18 <ai_platform_network_post_init+0xfc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3a:	d03b      	beq.n	8003ab4 <ai_platform_network_post_init+0x98>
 8003a3c:	4a37      	ldr	r2, [pc, #220]	; (8003b1c <ai_platform_network_post_init+0x100>)
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003a44:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1fb      	bne.n	8003a44 <ai_platform_network_post_init+0x28>
 8003a4c:	4b34      	ldr	r3, [pc, #208]	; (8003b20 <ai_platform_network_post_init+0x104>)
 8003a4e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003a52:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003a56:	4b33      	ldr	r3, [pc, #204]	; (8003b24 <ai_platform_network_post_init+0x108>)
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d037      	beq.n	8003acc <ai_platform_network_post_init+0xb0>
 8003a5c:	e7fe      	b.n	8003a5c <ai_platform_network_post_init+0x40>
 8003a5e:	f7ff fb31 	bl	80030c4 <_ai_platform_acquire_crc>
 8003a62:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <ai_platform_network_post_init+0xfc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6e:	d010      	beq.n	8003a92 <ai_platform_network_post_init+0x76>
 8003a70:	4a2a      	ldr	r2, [pc, #168]	; (8003b1c <ai_platform_network_post_init+0x100>)
 8003a72:	2301      	movs	r3, #1
 8003a74:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003a78:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1fb      	bne.n	8003a78 <ai_platform_network_post_init+0x5c>
 8003a80:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <ai_platform_network_post_init+0x104>)
 8003a82:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003a86:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003a8a:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <ai_platform_network_post_init+0x108>)
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d00d      	beq.n	8003aac <ai_platform_network_post_init+0x90>
 8003a90:	e7fe      	b.n	8003a90 <ai_platform_network_post_init+0x74>
 8003a92:	4a25      	ldr	r2, [pc, #148]	; (8003b28 <ai_platform_network_post_init+0x10c>)
 8003a94:	2301      	movs	r3, #1
 8003a96:	6093      	str	r3, [r2, #8]
 8003a98:	6893      	ldr	r3, [r2, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1fc      	bne.n	8003a98 <ai_platform_network_post_init+0x7c>
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <ai_platform_network_post_init+0x104>)
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <ai_platform_network_post_init+0x108>)
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d000      	beq.n	8003aac <ai_platform_network_post_init+0x90>
 8003aaa:	e7fe      	b.n	8003aaa <ai_platform_network_post_init+0x8e>
 8003aac:	f7ff fb0c 	bl	80030c8 <_ai_platform_release_crc>
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <ai_platform_network_post_init+0x10c>)
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	6093      	str	r3, [r2, #8]
 8003aba:	6893      	ldr	r3, [r2, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1fc      	bne.n	8003aba <ai_platform_network_post_init+0x9e>
 8003ac0:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <ai_platform_network_post_init+0x104>)
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <ai_platform_network_post_init+0x108>)
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d11a      	bne.n	8003b02 <ai_platform_network_post_init+0xe6>
 8003acc:	f7ff fafc 	bl	80030c8 <_ai_platform_release_crc>
 8003ad0:	68e3      	ldr	r3, [r4, #12]
 8003ad2:	f013 0502 	ands.w	r5, r3, #2
 8003ad6:	d015      	beq.n	8003b04 <ai_platform_network_post_init+0xe8>
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f000 faf7 	bl	80040cc <ai_layers_post_init_all>
 8003ade:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ae0:	b16b      	cbz	r3, 8003afe <ai_platform_network_post_init+0xe2>
 8003ae2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003ae4:	e007      	b.n	8003af6 <ai_platform_network_post_init+0xda>
 8003ae6:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8003aea:	4798      	blx	r3
 8003aec:	692b      	ldr	r3, [r5, #16]
 8003aee:	42ab      	cmp	r3, r5
 8003af0:	d005      	beq.n	8003afe <ai_platform_network_post_init+0xe2>
 8003af2:	b123      	cbz	r3, 8003afe <ai_platform_network_post_init+0xe2>
 8003af4:	461d      	mov	r5, r3
 8003af6:	4629      	mov	r1, r5
 8003af8:	2000      	movs	r0, #0
 8003afa:	2d00      	cmp	r5, #0
 8003afc:	d1f3      	bne.n	8003ae6 <ai_platform_network_post_init+0xca>
 8003afe:	2001      	movs	r0, #1
 8003b00:	bd38      	pop	{r3, r4, r5, pc}
 8003b02:	e7fe      	b.n	8003b02 <ai_platform_network_post_init+0xe6>
 8003b04:	2210      	movs	r2, #16
 8003b06:	2111      	movs	r1, #17
 8003b08:	18a0      	adds	r0, r4, r2
 8003b0a:	f000 fa9b 	bl	8004044 <core_set_error>
 8003b0e:	4628      	mov	r0, r5
 8003b10:	bd38      	pop	{r3, r4, r5, pc}
 8003b12:	bf00      	nop
 8003b14:	a1c00100 	.word	0xa1c00100
 8003b18:	e0042000 	.word	0xe0042000
 8003b1c:	58024000 	.word	0x58024000
 8003b20:	f407a5c2 	.word	0xf407a5c2
 8003b24:	b5e8b5cd 	.word	0xb5e8b5cd
 8003b28:	40023000 	.word	0x40023000

08003b2c <ai_platform_network_process>:
 8003b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b30:	460e      	mov	r6, r1
 8003b32:	b085      	sub	sp, #20
 8003b34:	4693      	mov	fp, r2
 8003b36:	4605      	mov	r5, r0
 8003b38:	b120      	cbz	r0, 8003b44 <ai_platform_network_process+0x18>
 8003b3a:	4bb8      	ldr	r3, [pc, #736]	; (8003e1c <ai_platform_network_process+0x2f0>)
 8003b3c:	6802      	ldr	r2, [r0, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	bf18      	it	ne
 8003b42:	2500      	movne	r5, #0
 8003b44:	f7ff fabe 	bl	80030c4 <_ai_platform_acquire_crc>
 8003b48:	4bb5      	ldr	r3, [pc, #724]	; (8003e20 <ai_platform_network_process+0x2f4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b54:	d010      	beq.n	8003b78 <ai_platform_network_process+0x4c>
 8003b56:	4ab3      	ldr	r2, [pc, #716]	; (8003e24 <ai_platform_network_process+0x2f8>)
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003b5e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1fb      	bne.n	8003b5e <ai_platform_network_process+0x32>
 8003b66:	4bb0      	ldr	r3, [pc, #704]	; (8003e28 <ai_platform_network_process+0x2fc>)
 8003b68:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003b6c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003b70:	4bae      	ldr	r3, [pc, #696]	; (8003e2c <ai_platform_network_process+0x300>)
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d00d      	beq.n	8003b92 <ai_platform_network_process+0x66>
 8003b76:	e7fe      	b.n	8003b76 <ai_platform_network_process+0x4a>
 8003b78:	4aad      	ldr	r2, [pc, #692]	; (8003e30 <ai_platform_network_process+0x304>)
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	6093      	str	r3, [r2, #8]
 8003b7e:	6893      	ldr	r3, [r2, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1fc      	bne.n	8003b7e <ai_platform_network_process+0x52>
 8003b84:	4ba8      	ldr	r3, [pc, #672]	; (8003e28 <ai_platform_network_process+0x2fc>)
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	4ba8      	ldr	r3, [pc, #672]	; (8003e2c <ai_platform_network_process+0x300>)
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	f040 812c 	bne.w	8003dea <ai_platform_network_process+0x2be>
 8003b92:	f7ff fa99 	bl	80030c8 <_ai_platform_release_crc>
 8003b96:	2d00      	cmp	r5, #0
 8003b98:	f000 8154 	beq.w	8003e44 <ai_platform_network_process+0x318>
 8003b9c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8124 	beq.w	8003dec <ai_platform_network_process+0x2c0>
 8003ba4:	68eb      	ldr	r3, [r5, #12]
 8003ba6:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2700      	movs	r7, #0
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	616f      	str	r7, [r5, #20]
 8003bb4:	f040 813e 	bne.w	8003e34 <ai_platform_network_process+0x308>
 8003bb8:	2e00      	cmp	r6, #0
 8003bba:	f000 811d 	beq.w	8003df8 <ai_platform_network_process+0x2cc>
 8003bbe:	f1ba 0f00 	cmp.w	sl, #0
 8003bc2:	f000 8119 	beq.w	8003df8 <ai_platform_network_process+0x2cc>
 8003bc6:	f8ba 3000 	ldrh.w	r3, [sl]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8114 	beq.w	8003df8 <ai_platform_network_process+0x2cc>
 8003bd0:	69b3      	ldr	r3, [r6, #24]
 8003bd2:	f8cd b00c 	str.w	fp, [sp, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8003bdc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d072      	beq.n	8003cca <ai_platform_network_process+0x19e>
 8003be4:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8003be8:	2c00      	cmp	r4, #0
 8003bea:	d06e      	beq.n	8003cca <ai_platform_network_process+0x19e>
 8003bec:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003bf0:	f8d3 9000 	ldr.w	r9, [r3]
 8003bf4:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8003bf8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003bfc:	f000 81de 	beq.w	8003fbc <ai_platform_network_process+0x490>
 8003c00:	69a3      	ldr	r3, [r4, #24]
 8003c02:	2101      	movs	r1, #1
 8003c04:	4630      	mov	r0, r6
 8003c06:	685d      	ldr	r5, [r3, #4]
 8003c08:	f7ff fa0e 	bl	8003028 <ai_buffer_get_size>
 8003c0c:	4285      	cmp	r5, r0
 8003c0e:	f0c0 811b 	bcc.w	8003e48 <ai_platform_network_process+0x31c>
 8003c12:	68e0      	ldr	r0, [r4, #12]
 8003c14:	69b1      	ldr	r1, [r6, #24]
 8003c16:	68c2      	ldr	r2, [r0, #12]
 8003c18:	68cb      	ldr	r3, [r1, #12]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	f040 8114 	bne.w	8003e48 <ai_platform_network_process+0x31c>
 8003c20:	6882      	ldr	r2, [r0, #8]
 8003c22:	688b      	ldr	r3, [r1, #8]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	f040 810f 	bne.w	8003e48 <ai_platform_network_process+0x31c>
 8003c2a:	6842      	ldr	r2, [r0, #4]
 8003c2c:	684b      	ldr	r3, [r1, #4]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	f040 810a 	bne.w	8003e48 <ai_platform_network_process+0x31c>
 8003c34:	69a3      	ldr	r3, [r4, #24]
 8003c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c3a:	f002 fe29 	bl	8006890 <ai_array_get_data_byte_size>
 8003c3e:	4605      	mov	r5, r0
 8003c40:	4620      	mov	r0, r4
 8003c42:	f002 fe3d 	bl	80068c0 <get_tensor_byte_size>
 8003c46:	4285      	cmp	r5, r0
 8003c48:	f0c0 80fe 	bcc.w	8003e48 <ai_platform_network_process+0x31c>
 8003c4c:	69a3      	ldr	r3, [r4, #24]
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	f002 fd8a 	bl	8006768 <ai_array_to_buffer_fmt>
 8003c54:	6833      	ldr	r3, [r6, #0]
 8003c56:	4058      	eors	r0, r3
 8003c58:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003c5c:	f040 81b9 	bne.w	8003fd2 <ai_platform_network_process+0x4a6>
 8003c60:	6873      	ldr	r3, [r6, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 81ac 	beq.w	8003fc0 <ai_platform_network_process+0x494>
 8003c68:	69b3      	ldr	r3, [r6, #24]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 819c 	beq.w	8003faa <ai_platform_network_process+0x47e>
 8003c72:	9a01      	ldr	r2, [sp, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	bf38      	it	cc
 8003c78:	461a      	movcc	r2, r3
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	9201      	str	r2, [sp, #4]
 8003c7e:	f002 fe1f 	bl	80068c0 <get_tensor_byte_size>
 8003c82:	f8c8 0008 	str.w	r0, [r8, #8]
 8003c86:	69b3      	ldr	r3, [r6, #24]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	fb00 f303 	mul.w	r3, r0, r3
 8003c8e:	f8c8 300c 	str.w	r3, [r8, #12]
 8003c92:	6871      	ldr	r1, [r6, #4]
 8003c94:	f8c8 1004 	str.w	r1, [r8, #4]
 8003c98:	440b      	add	r3, r1
 8003c9a:	f849 300b 	str.w	r3, [r9, fp]
 8003c9e:	69a0      	ldr	r0, [r4, #24]
 8003ca0:	6803      	ldr	r3, [r0, #0]
 8003ca2:	009a      	lsls	r2, r3, #2
 8003ca4:	f107 0701 	add.w	r7, r7, #1
 8003ca8:	f106 061c 	add.w	r6, r6, #28
 8003cac:	f100 80af 	bmi.w	8003e0e <ai_platform_network_process+0x2e2>
 8003cb0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	4419      	add	r1, r3
 8003cb8:	6081      	str	r1, [r0, #8]
 8003cba:	69a3      	ldr	r3, [r4, #24]
 8003cbc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	f8ba 3000 	ldrh.w	r3, [sl]
 8003cc6:	42bb      	cmp	r3, r7
 8003cc8:	d888      	bhi.n	8003bdc <ai_platform_network_process+0xb0>
 8003cca:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8003cce:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8003cd0:	f1bb 0f00 	cmp.w	fp, #0
 8003cd4:	f000 8186 	beq.w	8003fe4 <ai_platform_network_process+0x4b8>
 8003cd8:	2a01      	cmp	r2, #1
 8003cda:	f240 815e 	bls.w	8003f9a <ai_platform_network_process+0x46e>
 8003cde:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8003ce2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8157 	beq.w	8003f9a <ai_platform_network_process+0x46e>
 8003cec:	465e      	mov	r6, fp
 8003cee:	2700      	movs	r7, #0
 8003cf0:	462c      	mov	r4, r5
 8003cf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80b4 	beq.w	8003e64 <ai_platform_network_process+0x338>
 8003cfc:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8003d00:	2d00      	cmp	r5, #0
 8003d02:	f000 80af 	beq.w	8003e64 <ai_platform_network_process+0x338>
 8003d06:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003d0a:	f8d3 8000 	ldr.w	r8, [r3]
 8003d0e:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8003d12:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003d16:	f000 8171 	beq.w	8003ffc <ai_platform_network_process+0x4d0>
 8003d1a:	69ab      	ldr	r3, [r5, #24]
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	9302      	str	r3, [sp, #8]
 8003d22:	4630      	mov	r0, r6
 8003d24:	f7ff f980 	bl	8003028 <ai_buffer_get_size>
 8003d28:	9b02      	ldr	r3, [sp, #8]
 8003d2a:	4283      	cmp	r3, r0
 8003d2c:	f0c0 8134 	bcc.w	8003f98 <ai_platform_network_process+0x46c>
 8003d30:	68e8      	ldr	r0, [r5, #12]
 8003d32:	69b1      	ldr	r1, [r6, #24]
 8003d34:	68c2      	ldr	r2, [r0, #12]
 8003d36:	68cb      	ldr	r3, [r1, #12]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	f040 812d 	bne.w	8003f98 <ai_platform_network_process+0x46c>
 8003d3e:	6882      	ldr	r2, [r0, #8]
 8003d40:	688b      	ldr	r3, [r1, #8]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	f040 8128 	bne.w	8003f98 <ai_platform_network_process+0x46c>
 8003d48:	6842      	ldr	r2, [r0, #4]
 8003d4a:	684b      	ldr	r3, [r1, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	f040 8123 	bne.w	8003f98 <ai_platform_network_process+0x46c>
 8003d52:	69ab      	ldr	r3, [r5, #24]
 8003d54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d58:	f002 fd9a 	bl	8006890 <ai_array_get_data_byte_size>
 8003d5c:	9002      	str	r0, [sp, #8]
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f002 fdae 	bl	80068c0 <get_tensor_byte_size>
 8003d64:	9b02      	ldr	r3, [sp, #8]
 8003d66:	4283      	cmp	r3, r0
 8003d68:	f0c0 8116 	bcc.w	8003f98 <ai_platform_network_process+0x46c>
 8003d6c:	69ab      	ldr	r3, [r5, #24]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	f002 fcfa 	bl	8006768 <ai_array_to_buffer_fmt>
 8003d74:	6833      	ldr	r3, [r6, #0]
 8003d76:	4058      	eors	r0, r3
 8003d78:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003d7c:	f040 8136 	bne.w	8003fec <ai_platform_network_process+0x4c0>
 8003d80:	6873      	ldr	r3, [r6, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 814d 	beq.w	8004022 <ai_platform_network_process+0x4f6>
 8003d88:	69b3      	ldr	r3, [r6, #24]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 813f 	beq.w	8004010 <ai_platform_network_process+0x4e4>
 8003d92:	9a01      	ldr	r2, [sp, #4]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	bf38      	it	cc
 8003d98:	461a      	movcc	r2, r3
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	9201      	str	r2, [sp, #4]
 8003d9e:	f002 fd8f 	bl	80068c0 <get_tensor_byte_size>
 8003da2:	f8ca 0008 	str.w	r0, [sl, #8]
 8003da6:	69b3      	ldr	r3, [r6, #24]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	fb00 f303 	mul.w	r3, r0, r3
 8003dae:	f8ca 300c 	str.w	r3, [sl, #12]
 8003db2:	6871      	ldr	r1, [r6, #4]
 8003db4:	f8ca 1004 	str.w	r1, [sl, #4]
 8003db8:	440b      	add	r3, r1
 8003dba:	f848 300b 	str.w	r3, [r8, fp]
 8003dbe:	69a8      	ldr	r0, [r5, #24]
 8003dc0:	6803      	ldr	r3, [r0, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	f107 0701 	add.w	r7, r7, #1
 8003dc8:	f106 061c 	add.w	r6, r6, #28
 8003dcc:	d445      	bmi.n	8003e5a <ai_platform_network_process+0x32e>
 8003dce:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	4419      	add	r1, r3
 8003dd6:	6081      	str	r1, [r0, #8]
 8003dd8:	69ab      	ldr	r3, [r5, #24]
 8003dda:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003dde:	60da      	str	r2, [r3, #12]
 8003de0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003de4:	429f      	cmp	r7, r3
 8003de6:	d384      	bcc.n	8003cf2 <ai_platform_network_process+0x1c6>
 8003de8:	e03c      	b.n	8003e64 <ai_platform_network_process+0x338>
 8003dea:	e7fe      	b.n	8003dea <ai_platform_network_process+0x2be>
 8003dec:	68ea      	ldr	r2, [r5, #12]
 8003dee:	616b      	str	r3, [r5, #20]
 8003df0:	f002 0203 	and.w	r2, r2, #3
 8003df4:	2a03      	cmp	r2, #3
 8003df6:	d11d      	bne.n	8003e34 <ai_platform_network_process+0x308>
 8003df8:	2217      	movs	r2, #23
 8003dfa:	2112      	movs	r1, #18
 8003dfc:	f105 0010 	add.w	r0, r5, #16
 8003e00:	f000 f920 	bl	8004044 <core_set_error>
 8003e04:	2400      	movs	r4, #0
 8003e06:	4620      	mov	r0, r4
 8003e08:	b005      	add	sp, #20
 8003e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0e:	f8ba 3000 	ldrh.w	r3, [sl]
 8003e12:	429f      	cmp	r7, r3
 8003e14:	f4ff aee2 	bcc.w	8003bdc <ai_platform_network_process+0xb0>
 8003e18:	e757      	b.n	8003cca <ai_platform_network_process+0x19e>
 8003e1a:	bf00      	nop
 8003e1c:	a1c00100 	.word	0xa1c00100
 8003e20:	e0042000 	.word	0xe0042000
 8003e24:	58024000 	.word	0x58024000
 8003e28:	f407a5c2 	.word	0xf407a5c2
 8003e2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003e30:	40023000 	.word	0x40023000
 8003e34:	2230      	movs	r2, #48	; 0x30
 8003e36:	2111      	movs	r1, #17
 8003e38:	f105 0010 	add.w	r0, r5, #16
 8003e3c:	f000 f902 	bl	8004044 <core_set_error>
 8003e40:	2400      	movs	r4, #0
 8003e42:	e7e0      	b.n	8003e06 <ai_platform_network_process+0x2da>
 8003e44:	462c      	mov	r4, r5
 8003e46:	e7de      	b.n	8003e06 <ai_platform_network_process+0x2da>
 8003e48:	9d02      	ldr	r5, [sp, #8]
 8003e4a:	2218      	movs	r2, #24
 8003e4c:	2112      	movs	r1, #18
 8003e4e:	f105 0010 	add.w	r0, r5, #16
 8003e52:	f000 f8f7 	bl	8004044 <core_set_error>
 8003e56:	2400      	movs	r4, #0
 8003e58:	e7d5      	b.n	8003e06 <ai_platform_network_process+0x2da>
 8003e5a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003e5e:	429f      	cmp	r7, r3
 8003e60:	f4ff af47 	bcc.w	8003cf2 <ai_platform_network_process+0x1c6>
 8003e64:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003e68:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003e6a:	82a3      	strh	r3, [r4, #20]
 8003e6c:	4625      	mov	r5, r4
 8003e6e:	2a00      	cmp	r2, #0
 8003e70:	f040 808c 	bne.w	8003f8c <ai_platform_network_process+0x460>
 8003e74:	4616      	mov	r6, r2
 8003e76:	4617      	mov	r7, r2
 8003e78:	8aec      	ldrh	r4, [r5, #22]
 8003e7a:	429c      	cmp	r4, r3
 8003e7c:	bf38      	it	cc
 8003e7e:	46ab      	movcc	fp, r5
 8003e80:	d2c1      	bcs.n	8003e06 <ai_platform_network_process+0x2da>
 8003e82:	2e00      	cmp	r6, #0
 8003e84:	d030      	beq.n	8003ee8 <ai_platform_network_process+0x3bc>
 8003e86:	f04f 0800 	mov.w	r8, #0
 8003e8a:	e014      	b.n	8003eb6 <ai_platform_network_process+0x38a>
 8003e8c:	6882      	ldr	r2, [r0, #8]
 8003e8e:	68c5      	ldr	r5, [r0, #12]
 8003e90:	6863      	ldr	r3, [r4, #4]
 8003e92:	1b52      	subs	r2, r2, r5
 8003e94:	4413      	add	r3, r2
 8003e96:	6083      	str	r3, [r0, #8]
 8003e98:	698b      	ldr	r3, [r1, #24]
 8003e9a:	6862      	ldr	r2, [r4, #4]
 8003e9c:	60da      	str	r2, [r3, #12]
 8003e9e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8003ea2:	f859 200a 	ldr.w	r2, [r9, sl]
 8003ea6:	440b      	add	r3, r1
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	bf24      	itt	cs
 8003eac:	68e3      	ldrcs	r3, [r4, #12]
 8003eae:	1ad3      	subcs	r3, r2, r3
 8003eb0:	6063      	str	r3, [r4, #4]
 8003eb2:	f108 0801 	add.w	r8, r8, #1
 8003eb6:	8833      	ldrh	r3, [r6, #0]
 8003eb8:	4543      	cmp	r3, r8
 8003eba:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8003ebe:	d913      	bls.n	8003ee8 <ai_platform_network_process+0x3bc>
 8003ec0:	6873      	ldr	r3, [r6, #4]
 8003ec2:	b18b      	cbz	r3, 8003ee8 <ai_platform_network_process+0x3bc>
 8003ec4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8003ec8:	b171      	cbz	r1, 8003ee8 <ai_platform_network_process+0x3bc>
 8003eca:	6988      	ldr	r0, [r1, #24]
 8003ecc:	68b2      	ldr	r2, [r6, #8]
 8003ece:	6803      	ldr	r3, [r0, #0]
 8003ed0:	f8d2 9000 	ldr.w	r9, [r2]
 8003ed4:	009d      	lsls	r5, r3, #2
 8003ed6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8003eda:	d5d7      	bpl.n	8003e8c <ai_platform_network_process+0x360>
 8003edc:	6881      	ldr	r1, [r0, #8]
 8003ede:	68a2      	ldr	r2, [r4, #8]
 8003ee0:	6860      	ldr	r0, [r4, #4]
 8003ee2:	f002 fbbb 	bl	800665c <st_int8_copy>
 8003ee6:	e7da      	b.n	8003e9e <ai_platform_network_process+0x372>
 8003ee8:	4658      	mov	r0, fp
 8003eea:	f000 f903 	bl	80040f4 <ai_layers_forward_all>
 8003eee:	2f00      	cmp	r7, #0
 8003ef0:	d03d      	beq.n	8003f6e <ai_platform_network_process+0x442>
 8003ef2:	2400      	movs	r4, #0
 8003ef4:	e016      	b.n	8003f24 <ai_platform_network_process+0x3f8>
 8003ef6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8003efa:	f859 100a 	ldr.w	r1, [r9, sl]
 8003efe:	4413      	add	r3, r2
 8003f00:	428b      	cmp	r3, r1
 8003f02:	bf24      	itt	cs
 8003f04:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8003f08:	1acb      	subcs	r3, r1, r3
 8003f0a:	f8c8 3004 	str.w	r3, [r8, #4]
 8003f0e:	6981      	ldr	r1, [r0, #24]
 8003f10:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8003f14:	1b52      	subs	r2, r2, r5
 8003f16:	4413      	add	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
 8003f1a:	6983      	ldr	r3, [r0, #24]
 8003f1c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	3401      	adds	r4, #1
 8003f24:	883b      	ldrh	r3, [r7, #0]
 8003f26:	42a3      	cmp	r3, r4
 8003f28:	d921      	bls.n	8003f6e <ai_platform_network_process+0x442>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	b1fb      	cbz	r3, 8003f6e <ai_platform_network_process+0x442>
 8003f2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003f32:	b1e0      	cbz	r0, 8003f6e <ai_platform_network_process+0x442>
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	6983      	ldr	r3, [r0, #24]
 8003f38:	f8d2 9000 	ldr.w	r9, [r2]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	0092      	lsls	r2, r2, #2
 8003f40:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8003f44:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8003f48:	d5d5      	bpl.n	8003ef6 <ai_platform_network_process+0x3ca>
 8003f4a:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8003f4e:	6898      	ldr	r0, [r3, #8]
 8003f50:	f002 fb84 	bl	800665c <st_int8_copy>
 8003f54:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8003f58:	f859 200a 	ldr.w	r2, [r9, sl]
 8003f5c:	440b      	add	r3, r1
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	bf24      	itt	cs
 8003f62:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8003f66:	1ad3      	subcs	r3, r2, r3
 8003f68:	f8c8 3004 	str.w	r3, [r8, #4]
 8003f6c:	e7d9      	b.n	8003f22 <ai_platform_network_process+0x3f6>
 8003f6e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8003f72:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8003f76:	3401      	adds	r4, #1
 8003f78:	b2a4      	uxth	r4, r4
 8003f7a:	42a3      	cmp	r3, r4
 8003f7c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8003f80:	f63f af7f 	bhi.w	8003e82 <ai_platform_network_process+0x356>
 8003f84:	4620      	mov	r0, r4
 8003f86:	b005      	add	sp, #20
 8003f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8c:	2a01      	cmp	r2, #1
 8003f8e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8003f90:	d03c      	beq.n	800400c <ai_platform_network_process+0x4e0>
 8003f92:	f106 070c 	add.w	r7, r6, #12
 8003f96:	e76f      	b.n	8003e78 <ai_platform_network_process+0x34c>
 8003f98:	4625      	mov	r5, r4
 8003f9a:	2218      	movs	r2, #24
 8003f9c:	2113      	movs	r1, #19
 8003f9e:	f105 0010 	add.w	r0, r5, #16
 8003fa2:	f000 f84f 	bl	8004044 <core_set_error>
 8003fa6:	2400      	movs	r4, #0
 8003fa8:	e72d      	b.n	8003e06 <ai_platform_network_process+0x2da>
 8003faa:	9d02      	ldr	r5, [sp, #8]
 8003fac:	4604      	mov	r4, r0
 8003fae:	2221      	movs	r2, #33	; 0x21
 8003fb0:	2112      	movs	r1, #18
 8003fb2:	f105 0010 	add.w	r0, r5, #16
 8003fb6:	f000 f845 	bl	8004044 <core_set_error>
 8003fba:	e724      	b.n	8003e06 <ai_platform_network_process+0x2da>
 8003fbc:	9d02      	ldr	r5, [sp, #8]
 8003fbe:	e71b      	b.n	8003df8 <ai_platform_network_process+0x2cc>
 8003fc0:	9d02      	ldr	r5, [sp, #8]
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	2217      	movs	r2, #23
 8003fc6:	2112      	movs	r1, #18
 8003fc8:	f105 0010 	add.w	r0, r5, #16
 8003fcc:	f000 f83a 	bl	8004044 <core_set_error>
 8003fd0:	e719      	b.n	8003e06 <ai_platform_network_process+0x2da>
 8003fd2:	9d02      	ldr	r5, [sp, #8]
 8003fd4:	2219      	movs	r2, #25
 8003fd6:	2112      	movs	r1, #18
 8003fd8:	f105 0010 	add.w	r0, r5, #16
 8003fdc:	f000 f832 	bl	8004044 <core_set_error>
 8003fe0:	2400      	movs	r4, #0
 8003fe2:	e710      	b.n	8003e06 <ai_platform_network_process+0x2da>
 8003fe4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003fe8:	82ab      	strh	r3, [r5, #20]
 8003fea:	e740      	b.n	8003e6e <ai_platform_network_process+0x342>
 8003fec:	f104 0010 	add.w	r0, r4, #16
 8003ff0:	2219      	movs	r2, #25
 8003ff2:	2113      	movs	r1, #19
 8003ff4:	f000 f826 	bl	8004044 <core_set_error>
 8003ff8:	2400      	movs	r4, #0
 8003ffa:	e704      	b.n	8003e06 <ai_platform_network_process+0x2da>
 8003ffc:	f104 0010 	add.w	r0, r4, #16
 8004000:	2217      	movs	r2, #23
 8004002:	2113      	movs	r1, #19
 8004004:	f000 f81e 	bl	8004044 <core_set_error>
 8004008:	4654      	mov	r4, sl
 800400a:	e6fc      	b.n	8003e06 <ai_platform_network_process+0x2da>
 800400c:	2700      	movs	r7, #0
 800400e:	e733      	b.n	8003e78 <ai_platform_network_process+0x34c>
 8004010:	4625      	mov	r5, r4
 8004012:	2221      	movs	r2, #33	; 0x21
 8004014:	4604      	mov	r4, r0
 8004016:	2113      	movs	r1, #19
 8004018:	f105 0010 	add.w	r0, r5, #16
 800401c:	f000 f812 	bl	8004044 <core_set_error>
 8004020:	e6f1      	b.n	8003e06 <ai_platform_network_process+0x2da>
 8004022:	4625      	mov	r5, r4
 8004024:	2217      	movs	r2, #23
 8004026:	4604      	mov	r4, r0
 8004028:	2113      	movs	r1, #19
 800402a:	f105 0010 	add.w	r0, r5, #16
 800402e:	f000 f809 	bl	8004044 <core_set_error>
 8004032:	e6e8      	b.n	8003e06 <ai_platform_network_process+0x2da>

08004034 <core_init>:
 8004034:	2001      	movs	r0, #1
 8004036:	4770      	bx	lr

08004038 <core_get_error>:
 8004038:	4603      	mov	r3, r0
 800403a:	2200      	movs	r2, #0
 800403c:	6800      	ldr	r0, [r0, #0]
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop

08004044 <core_set_error>:
 8004044:	4603      	mov	r3, r0
 8004046:	7800      	ldrb	r0, [r0, #0]
 8004048:	b108      	cbz	r0, 800404e <core_set_error+0xa>
 800404a:	2000      	movs	r0, #0
 800404c:	4770      	bx	lr
 800404e:	7019      	strb	r1, [r3, #0]
 8004050:	6819      	ldr	r1, [r3, #0]
 8004052:	f362 211f 	bfi	r1, r2, #8, #24
 8004056:	2001      	movs	r0, #1
 8004058:	6019      	str	r1, [r3, #0]
 800405a:	4770      	bx	lr

0800405c <ai_check_custom_types>:
 800405c:	b082      	sub	sp, #8
 800405e:	4b13      	ldr	r3, [pc, #76]	; (80040ac <ai_check_custom_types+0x50>)
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	b118      	cbz	r0, 800406c <ai_check_custom_types+0x10>
 8004064:	7803      	ldrb	r3, [r0, #0]
 8004066:	2b03      	cmp	r3, #3
 8004068:	d002      	beq.n	8004070 <ai_check_custom_types+0x14>
 800406a:	2000      	movs	r0, #0
 800406c:	b002      	add	sp, #8
 800406e:	4770      	bx	lr
 8004070:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <ai_check_custom_types+0x26>
 8004078:	2001      	movs	r0, #1
 800407a:	f080 0001 	eor.w	r0, r0, #1
 800407e:	b002      	add	sp, #8
 8004080:	4770      	bx	lr
 8004082:	7842      	ldrb	r2, [r0, #1]
 8004084:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004088:	429a      	cmp	r2, r3
 800408a:	f100 0001 	add.w	r0, r0, #1
 800408e:	d1f3      	bne.n	8004078 <ai_check_custom_types+0x1c>
 8004090:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004094:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004098:	429a      	cmp	r2, r3
 800409a:	d1ed      	bne.n	8004078 <ai_check_custom_types+0x1c>
 800409c:	7842      	ldrb	r2, [r0, #1]
 800409e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d1e8      	bne.n	8004078 <ai_check_custom_types+0x1c>
 80040a6:	2000      	movs	r0, #0
 80040a8:	e7e7      	b.n	800407a <ai_check_custom_types+0x1e>
 80040aa:	bf00      	nop
 80040ac:	84048403 	.word	0x84048403

080040b0 <ai_layers_init_all>:
 80040b0:	4601      	mov	r1, r0
 80040b2:	2000      	movs	r0, #0
 80040b4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80040b6:	b143      	cbz	r3, 80040ca <ai_layers_init_all+0x1a>
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	60d9      	str	r1, [r3, #12]
 80040bc:	429a      	cmp	r2, r3
 80040be:	f100 0001 	add.w	r0, r0, #1
 80040c2:	d002      	beq.n	80040ca <ai_layers_init_all+0x1a>
 80040c4:	b10a      	cbz	r2, 80040ca <ai_layers_init_all+0x1a>
 80040c6:	4613      	mov	r3, r2
 80040c8:	e7f5      	b.n	80040b6 <ai_layers_init_all+0x6>
 80040ca:	4770      	bx	lr

080040cc <ai_layers_post_init_all>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80040d0:	2500      	movs	r5, #0
 80040d2:	b16c      	cbz	r4, 80040f0 <ai_layers_post_init_all+0x24>
 80040d4:	6863      	ldr	r3, [r4, #4]
 80040d6:	07db      	lsls	r3, r3, #31
 80040d8:	d504      	bpl.n	80040e4 <ai_layers_post_init_all+0x18>
 80040da:	6a23      	ldr	r3, [r4, #32]
 80040dc:	4620      	mov	r0, r4
 80040de:	b10b      	cbz	r3, 80040e4 <ai_layers_post_init_all+0x18>
 80040e0:	4798      	blx	r3
 80040e2:	3501      	adds	r5, #1
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	42a3      	cmp	r3, r4
 80040e8:	d002      	beq.n	80040f0 <ai_layers_post_init_all+0x24>
 80040ea:	b10b      	cbz	r3, 80040f0 <ai_layers_post_init_all+0x24>
 80040ec:	461c      	mov	r4, r3
 80040ee:	e7f0      	b.n	80040d2 <ai_layers_post_init_all+0x6>
 80040f0:	4628      	mov	r0, r5
 80040f2:	bd38      	pop	{r3, r4, r5, pc}

080040f4 <ai_layers_forward_all>:
 80040f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80040fc:	4604      	mov	r4, r0
 80040fe:	f1b8 0f00 	cmp.w	r8, #0
 8004102:	d02b      	beq.n	800415c <ai_layers_forward_all+0x68>
 8004104:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004106:	6381      	str	r1, [r0, #56]	; 0x38
 8004108:	b321      	cbz	r1, 8004154 <ai_layers_forward_all+0x60>
 800410a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800410c:	2001      	movs	r0, #1
 800410e:	47c0      	blx	r8
 8004110:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004112:	b1fe      	cbz	r6, 8004154 <ai_layers_forward_all+0x60>
 8004114:	2700      	movs	r7, #0
 8004116:	4631      	mov	r1, r6
 8004118:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800411a:	2002      	movs	r0, #2
 800411c:	47c0      	blx	r8
 800411e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004120:	4628      	mov	r0, r5
 8004122:	696b      	ldr	r3, [r5, #20]
 8004124:	4798      	blx	r3
 8004126:	692e      	ldr	r6, [r5, #16]
 8004128:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800412a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800412c:	42b5      	cmp	r5, r6
 800412e:	f04f 0003 	mov.w	r0, #3
 8004132:	d007      	beq.n	8004144 <ai_layers_forward_all+0x50>
 8004134:	47c0      	blx	r8
 8004136:	3701      	adds	r7, #1
 8004138:	63a6      	str	r6, [r4, #56]	; 0x38
 800413a:	2e00      	cmp	r6, #0
 800413c:	d1eb      	bne.n	8004116 <ai_layers_forward_all+0x22>
 800413e:	4638      	mov	r0, r7
 8004140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004144:	2003      	movs	r0, #3
 8004146:	47c0      	blx	r8
 8004148:	2300      	movs	r3, #0
 800414a:	3701      	adds	r7, #1
 800414c:	63a3      	str	r3, [r4, #56]	; 0x38
 800414e:	4638      	mov	r0, r7
 8004150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004154:	2700      	movs	r7, #0
 8004156:	4638      	mov	r0, r7
 8004158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800415c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800415e:	6385      	str	r5, [r0, #56]	; 0x38
 8004160:	2d00      	cmp	r5, #0
 8004162:	d0f7      	beq.n	8004154 <ai_layers_forward_all+0x60>
 8004164:	4647      	mov	r7, r8
 8004166:	696b      	ldr	r3, [r5, #20]
 8004168:	4628      	mov	r0, r5
 800416a:	4798      	blx	r3
 800416c:	462b      	mov	r3, r5
 800416e:	692d      	ldr	r5, [r5, #16]
 8004170:	429d      	cmp	r5, r3
 8004172:	d004      	beq.n	800417e <ai_layers_forward_all+0x8a>
 8004174:	63a5      	str	r5, [r4, #56]	; 0x38
 8004176:	3701      	adds	r7, #1
 8004178:	2d00      	cmp	r5, #0
 800417a:	d1f4      	bne.n	8004166 <ai_layers_forward_all+0x72>
 800417c:	e7df      	b.n	800413e <ai_layers_forward_all+0x4a>
 800417e:	2300      	movs	r3, #0
 8004180:	63a3      	str	r3, [r4, #56]	; 0x38
 8004182:	3701      	adds	r7, #1
 8004184:	e7db      	b.n	800413e <ai_layers_forward_all+0x4a>
 8004186:	bf00      	nop

08004188 <forward_dense>:
 8004188:	6983      	ldr	r3, [r0, #24]
 800418a:	881a      	ldrh	r2, [r3, #0]
 800418c:	2a00      	cmp	r2, #0
 800418e:	f000 8181 	beq.w	8004494 <forward_dense+0x30c>
 8004192:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004196:	ed2d 8b02 	vpush	{d8}
 800419a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800419e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80041a2:	b095      	sub	sp, #84	; 0x54
 80041a4:	b105      	cbz	r5, 80041a8 <forward_dense+0x20>
 80041a6:	682d      	ldr	r5, [r5, #0]
 80041a8:	2a01      	cmp	r2, #1
 80041aa:	f000 828f 	beq.w	80046cc <forward_dense+0x544>
 80041ae:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80041b2:	b106      	cbz	r6, 80041b6 <forward_dense+0x2e>
 80041b4:	6836      	ldr	r6, [r6, #0]
 80041b6:	2a02      	cmp	r2, #2
 80041b8:	f000 816e 	beq.w	8004498 <forward_dense+0x310>
 80041bc:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80041c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8274 	beq.w	80046b0 <forward_dense+0x528>
 80041c8:	4619      	mov	r1, r3
 80041ca:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80041ce:	6809      	ldr	r1, [r1, #0]
 80041d0:	910d      	str	r1, [sp, #52]	; 0x34
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	f240 826e 	bls.w	80046b4 <forward_dense+0x52c>
 80041d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80041de:	460b      	mov	r3, r1
 80041e0:	68e8      	ldr	r0, [r5, #12]
 80041e2:	68f7      	ldr	r7, [r6, #12]
 80041e4:	6840      	ldr	r0, [r0, #4]
 80041e6:	6999      	ldr	r1, [r3, #24]
 80041e8:	9013      	str	r0, [sp, #76]	; 0x4c
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	680b      	ldr	r3, [r1, #0]
 80041ee:	9012      	str	r0, [sp, #72]	; 0x48
 80041f0:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80041f4:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80041f8:	fb00 f404 	mul.w	r4, r0, r4
 80041fc:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8004200:	fa4e f000 	asr.w	r0, lr, r0
 8004204:	2a03      	cmp	r2, #3
 8004206:	9010      	str	r0, [sp, #64]	; 0x40
 8004208:	f000 825d 	beq.w	80046c6 <forward_dense+0x53e>
 800420c:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8004210:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8004214:	2a00      	cmp	r2, #0
 8004216:	f000 8246 	beq.w	80046a6 <forward_dense+0x51e>
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	2a00      	cmp	r2, #0
 800421e:	f000 8242 	beq.w	80046a6 <forward_dense+0x51e>
 8004222:	2b04      	cmp	r3, #4
 8004224:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8004228:	f000 822c 	beq.w	8004684 <forward_dense+0x4fc>
 800422c:	2b08      	cmp	r3, #8
 800422e:	f000 8229 	beq.w	8004684 <forward_dense+0x4fc>
 8004232:	f04f 0b00 	mov.w	fp, #0
 8004236:	69b2      	ldr	r2, [r6, #24]
 8004238:	69ab      	ldr	r3, [r5, #24]
 800423a:	6891      	ldr	r1, [r2, #8]
 800423c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	6952      	ldr	r2, [r2, #20]
 8004242:	9106      	str	r1, [sp, #24]
 8004244:	fb07 f404 	mul.w	r4, r7, r4
 8004248:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800424c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800424e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004252:	4281      	cmp	r1, r0
 8004254:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8004258:	900e      	str	r0, [sp, #56]	; 0x38
 800425a:	940c      	str	r4, [sp, #48]	; 0x30
 800425c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8004260:	f080 8113 	bcs.w	800448a <forward_dense+0x302>
 8004264:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004266:	ed9f 8a93 	vldr	s16, [pc, #588]	; 80044b4 <forward_dense+0x32c>
 800426a:	f021 0201 	bic.w	r2, r1, #1
 800426e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004272:	9204      	str	r2, [sp, #16]
 8004274:	f001 0201 	and.w	r2, r1, #1
 8004278:	08c8      	lsrs	r0, r1, #3
 800427a:	9208      	str	r2, [sp, #32]
 800427c:	008a      	lsls	r2, r1, #2
 800427e:	f001 0a07 	and.w	sl, r1, #7
 8004282:	920f      	str	r2, [sp, #60]	; 0x3c
 8004284:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8004288:	3320      	adds	r3, #32
 800428a:	465c      	mov	r4, fp
 800428c:	9007      	str	r0, [sp, #28]
 800428e:	46cb      	mov	fp, r9
 8004290:	9205      	str	r2, [sp, #20]
 8004292:	9302      	str	r3, [sp, #8]
 8004294:	46c1      	mov	r9, r8
 8004296:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800429a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	9b02      	ldr	r3, [sp, #8]
 80042a2:	3b20      	subs	r3, #32
 80042a4:	930a      	str	r3, [sp, #40]	; 0x28
 80042a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042a8:	b10b      	cbz	r3, 80042ae <forward_dense+0x126>
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2c00      	cmp	r4, #0
 80042b0:	f000 81da 	beq.w	8004668 <forward_dense+0x4e0>
 80042b4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80042b6:	2904      	cmp	r1, #4
 80042b8:	9906      	ldr	r1, [sp, #24]
 80042ba:	f000 80fd 	beq.w	80044b8 <forward_dense+0x330>
 80042be:	4549      	cmp	r1, r9
 80042c0:	f080 80d2 	bcs.w	8004468 <forward_dense+0x2e0>
 80042c4:	460f      	mov	r7, r1
 80042c6:	9907      	ldr	r1, [sp, #28]
 80042c8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80042cc:	f8dd a014 	ldr.w	sl, [sp, #20]
 80042d0:	1c4e      	adds	r6, r1, #1
 80042d2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80042d6:	4694      	mov	ip, r2
 80042d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80042da:	468e      	mov	lr, r1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80de 	beq.w	800449e <forward_dense+0x316>
 80042e2:	ecf3 2a01 	vldmia	r3!, {s5}
 80042e6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80044b4 <forward_dense+0x32c>
 80042ea:	f1be 0f00 	cmp.w	lr, #0
 80042ee:	f000 80de 	beq.w	80044ae <forward_dense+0x326>
 80042f2:	f10c 0108 	add.w	r1, ip, #8
 80042f6:	4640      	mov	r0, r8
 80042f8:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80042fc:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8004300:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8004304:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8004308:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 800430c:	ed10 5a04 	vldr	s10, [r0, #-16]
 8004310:	ed50 5a03 	vldr	s11, [r0, #-12]
 8004314:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004318:	ed50 6a01 	vldr	s13, [r0, #-4]
 800431c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004320:	edd5 7a00 	vldr	s15, [r5]
 8004324:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8004328:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800432c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004330:	ed95 3a00 	vldr	s6, [r5]
 8004334:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8004338:	eee3 7a23 	vfma.f32	s15, s6, s7
 800433c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004340:	3108      	adds	r1, #8
 8004342:	edd5 3a00 	vldr	s7, [r5]
 8004346:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800434a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800434e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004352:	3020      	adds	r0, #32
 8004354:	ed95 4a00 	vldr	s8, [r5]
 8004358:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800435c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004360:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004364:	edd5 4a00 	vldr	s9, [r5]
 8004368:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800436c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004370:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004374:	ed95 5a00 	vldr	s10, [r5]
 8004378:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800437c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004380:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004384:	edd5 5a00 	vldr	s11, [r5]
 8004388:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800438c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004390:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004394:	428e      	cmp	r6, r1
 8004396:	ed95 6a00 	vldr	s12, [r5]
 800439a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800439e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043a2:	d1a9      	bne.n	80042f8 <forward_dense+0x170>
 80043a4:	f1a6 0108 	sub.w	r1, r6, #8
 80043a8:	4650      	mov	r0, sl
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	d04a      	beq.n	8004444 <forward_dense+0x2bc>
 80043ae:	780d      	ldrb	r5, [r1, #0]
 80043b0:	edd0 6a00 	vldr	s13, [r0]
 80043b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80043b8:	edd5 7a00 	vldr	s15, [r5]
 80043bc:	2a01      	cmp	r2, #1
 80043be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80043c2:	d03f      	beq.n	8004444 <forward_dense+0x2bc>
 80043c4:	784d      	ldrb	r5, [r1, #1]
 80043c6:	edd0 6a01 	vldr	s13, [r0, #4]
 80043ca:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80043ce:	edd5 7a00 	vldr	s15, [r5]
 80043d2:	2a02      	cmp	r2, #2
 80043d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80043d8:	d034      	beq.n	8004444 <forward_dense+0x2bc>
 80043da:	788d      	ldrb	r5, [r1, #2]
 80043dc:	edd0 6a02 	vldr	s13, [r0, #8]
 80043e0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80043e4:	edd5 7a00 	vldr	s15, [r5]
 80043e8:	2a03      	cmp	r2, #3
 80043ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80043ee:	d029      	beq.n	8004444 <forward_dense+0x2bc>
 80043f0:	78cd      	ldrb	r5, [r1, #3]
 80043f2:	edd0 6a03 	vldr	s13, [r0, #12]
 80043f6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80043fa:	edd5 7a00 	vldr	s15, [r5]
 80043fe:	2a04      	cmp	r2, #4
 8004400:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004404:	d01e      	beq.n	8004444 <forward_dense+0x2bc>
 8004406:	790d      	ldrb	r5, [r1, #4]
 8004408:	edd0 6a04 	vldr	s13, [r0, #16]
 800440c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004410:	edd5 7a00 	vldr	s15, [r5]
 8004414:	2a05      	cmp	r2, #5
 8004416:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800441a:	d013      	beq.n	8004444 <forward_dense+0x2bc>
 800441c:	794d      	ldrb	r5, [r1, #5]
 800441e:	edd0 6a05 	vldr	s13, [r0, #20]
 8004422:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004426:	edd5 7a00 	vldr	s15, [r5]
 800442a:	2a06      	cmp	r2, #6
 800442c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004430:	d008      	beq.n	8004444 <forward_dense+0x2bc>
 8004432:	7989      	ldrb	r1, [r1, #6]
 8004434:	edd0 7a06 	vldr	s15, [r0, #24]
 8004438:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800443c:	edd1 6a00 	vldr	s13, [r1]
 8004440:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004444:	44dc      	add	ip, fp
 8004446:	445e      	add	r6, fp
 8004448:	ee32 7a87 	vadd.f32	s14, s5, s14
 800444c:	eca7 7a01 	vstmia	r7!, {s14}
 8004450:	454f      	cmp	r7, r9
 8004452:	f4ff af43 	bcc.w	80042dc <forward_dense+0x154>
 8004456:	9a06      	ldr	r2, [sp, #24]
 8004458:	eba9 0302 	sub.w	r3, r9, r2
 800445c:	3b01      	subs	r3, #1
 800445e:	f023 0303 	bic.w	r3, r3, #3
 8004462:	3304      	adds	r3, #4
 8004464:	18d3      	adds	r3, r2, r3
 8004466:	9306      	str	r3, [sp, #24]
 8004468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800446a:	9a05      	ldr	r2, [sp, #20]
 800446c:	4499      	add	r9, r3
 800446e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004470:	441a      	add	r2, r3
 8004472:	9205      	str	r2, [sp, #20]
 8004474:	9a02      	ldr	r2, [sp, #8]
 8004476:	441a      	add	r2, r3
 8004478:	9202      	str	r2, [sp, #8]
 800447a:	9a04      	ldr	r2, [sp, #16]
 800447c:	441a      	add	r2, r3
 800447e:	9204      	str	r2, [sp, #16]
 8004480:	9b06      	ldr	r3, [sp, #24]
 8004482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004484:	4293      	cmp	r3, r2
 8004486:	f4ff af08 	bcc.w	800429a <forward_dense+0x112>
 800448a:	b015      	add	sp, #84	; 0x54
 800448c:	ecbd 8b02 	vpop	{d8}
 8004490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004494:	6853      	ldr	r3, [r2, #4]
 8004496:	deff      	udf	#255	; 0xff
 8004498:	2300      	movs	r3, #0
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	deff      	udf	#255	; 0xff
 800449e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80044b4 <forward_dense+0x32c>
 80044a2:	eef0 2a48 	vmov.f32	s5, s16
 80044a6:	f1be 0f00 	cmp.w	lr, #0
 80044aa:	f47f af22 	bne.w	80042f2 <forward_dense+0x16a>
 80044ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80044b0:	4661      	mov	r1, ip
 80044b2:	e77a      	b.n	80043aa <forward_dense+0x222>
 80044b4:	00000000 	.word	0x00000000
 80044b8:	4549      	cmp	r1, r9
 80044ba:	d2d5      	bcs.n	8004468 <forward_dense+0x2e0>
 80044bc:	9807      	ldr	r0, [sp, #28]
 80044be:	9103      	str	r1, [sp, #12]
 80044c0:	9904      	ldr	r1, [sp, #16]
 80044c2:	f100 0c01 	add.w	ip, r0, #1
 80044c6:	3901      	subs	r1, #1
 80044c8:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80044cc:	9109      	str	r1, [sp, #36]	; 0x24
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80b2 	beq.w	8004638 <forward_dense+0x4b0>
 80044d4:	9907      	ldr	r1, [sp, #28]
 80044d6:	ecf3 2a01 	vldmia	r3!, {s5}
 80044da:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 80044b4 <forward_dense+0x32c>
 80044de:	2900      	cmp	r1, #0
 80044e0:	f000 80b2 	beq.w	8004648 <forward_dense+0x4c0>
 80044e4:	9902      	ldr	r1, [sp, #8]
 80044e6:	1d10      	adds	r0, r2, #4
 80044e8:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80044ec:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80044f0:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80044f4:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 80044f8:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80044fc:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8004500:	ed11 5a04 	vldr	s10, [r1, #-16]
 8004504:	ed51 5a03 	vldr	s11, [r1, #-12]
 8004508:	ed11 6a02 	vldr	s12, [r1, #-8]
 800450c:	ed51 6a01 	vldr	s13, [r1, #-4]
 8004510:	f006 070f 	and.w	r7, r6, #15
 8004514:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004518:	edd7 7a00 	vldr	s15, [r7]
 800451c:	0936      	lsrs	r6, r6, #4
 800451e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004522:	ed96 3a00 	vldr	s6, [r6]
 8004526:	ee67 7a82 	vmul.f32	s15, s15, s4
 800452a:	092e      	lsrs	r6, r5, #4
 800452c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004530:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004534:	f005 050f 	and.w	r5, r5, #15
 8004538:	edd6 3a00 	vldr	s7, [r6]
 800453c:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8004540:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004544:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004548:	0937      	lsrs	r7, r6, #4
 800454a:	ed95 4a00 	vldr	s8, [r5]
 800454e:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8004552:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004556:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800455a:	f006 060f 	and.w	r6, r6, #15
 800455e:	edd7 4a00 	vldr	s9, [r7]
 8004562:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004566:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800456a:	3004      	adds	r0, #4
 800456c:	ed96 5a00 	vldr	s10, [r6]
 8004570:	092e      	lsrs	r6, r5, #4
 8004572:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004576:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800457a:	f005 050f 	and.w	r5, r5, #15
 800457e:	edd6 5a00 	vldr	s11, [r6]
 8004582:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004586:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800458a:	4584      	cmp	ip, r0
 800458c:	ed95 6a00 	vldr	s12, [r5]
 8004590:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004594:	f101 0120 	add.w	r1, r1, #32
 8004598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800459c:	d1a4      	bne.n	80044e8 <forward_dense+0x360>
 800459e:	f8dd e014 	ldr.w	lr, [sp, #20]
 80045a2:	f1ac 0804 	sub.w	r8, ip, #4
 80045a6:	9904      	ldr	r1, [sp, #16]
 80045a8:	458e      	cmp	lr, r1
 80045aa:	d22a      	bcs.n	8004602 <forward_dense+0x47a>
 80045ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045ae:	eba1 070e 	sub.w	r7, r1, lr
 80045b2:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 80045b6:	f10e 0008 	add.w	r0, lr, #8
 80045ba:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80045be:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 80045c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045c6:	ed50 5a01 	vldr	s11, [r0, #-4]
 80045ca:	ed50 6a02 	vldr	s13, [r0, #-8]
 80045ce:	f001 050f 	and.w	r5, r1, #15
 80045d2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80045d6:	edd5 7a00 	vldr	s15, [r5]
 80045da:	0909      	lsrs	r1, r1, #4
 80045dc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80045e0:	ed91 6a00 	vldr	s12, [r1]
 80045e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80045e8:	42b7      	cmp	r7, r6
 80045ea:	eee6 7a26 	vfma.f32	s15, s12, s13
 80045ee:	f100 0008 	add.w	r0, r0, #8
 80045f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045f6:	d1e4      	bne.n	80045c2 <forward_dense+0x43a>
 80045f8:	f10a 0a01 	add.w	sl, sl, #1
 80045fc:	44d0      	add	r8, sl
 80045fe:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8004602:	9908      	ldr	r1, [sp, #32]
 8004604:	b321      	cbz	r1, 8004650 <forward_dense+0x4c8>
 8004606:	f898 1000 	ldrb.w	r1, [r8]
 800460a:	edde 7a00 	vldr	s15, [lr]
 800460e:	0909      	lsrs	r1, r1, #4
 8004610:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004614:	edd1 6a00 	vldr	s13, [r1]
 8004618:	9903      	ldr	r1, [sp, #12]
 800461a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800461e:	445a      	add	r2, fp
 8004620:	44dc      	add	ip, fp
 8004622:	ee72 2a87 	vadd.f32	s5, s5, s14
 8004626:	ece1 2a01 	vstmia	r1!, {s5}
 800462a:	4589      	cmp	r9, r1
 800462c:	9103      	str	r1, [sp, #12]
 800462e:	f67f af12 	bls.w	8004456 <forward_dense+0x2ce>
 8004632:	2b00      	cmp	r3, #0
 8004634:	f47f af4e 	bne.w	80044d4 <forward_dense+0x34c>
 8004638:	9907      	ldr	r1, [sp, #28]
 800463a:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 80044b4 <forward_dense+0x32c>
 800463e:	eef0 2a48 	vmov.f32	s5, s16
 8004642:	2900      	cmp	r1, #0
 8004644:	f47f af4e 	bne.w	80044e4 <forward_dense+0x35c>
 8004648:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800464c:	4690      	mov	r8, r2
 800464e:	e7aa      	b.n	80045a6 <forward_dense+0x41e>
 8004650:	9903      	ldr	r1, [sp, #12]
 8004652:	ee32 7a87 	vadd.f32	s14, s5, s14
 8004656:	445a      	add	r2, fp
 8004658:	eca1 7a01 	vstmia	r1!, {s14}
 800465c:	4549      	cmp	r1, r9
 800465e:	9103      	str	r1, [sp, #12]
 8004660:	44dc      	add	ip, fp
 8004662:	f4ff af34 	bcc.w	80044ce <forward_dense+0x346>
 8004666:	e6f6      	b.n	8004456 <forward_dense+0x2ce>
 8004668:	9912      	ldr	r1, [sp, #72]	; 0x48
 800466a:	9d06      	ldr	r5, [sp, #24]
 800466c:	9101      	str	r1, [sp, #4]
 800466e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004670:	9100      	str	r1, [sp, #0]
 8004672:	4628      	mov	r0, r5
 8004674:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004676:	f001 fe71 	bl	800635c <forward_lite_dense_if32of32wf32>
 800467a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800467c:	462b      	mov	r3, r5
 800467e:	4413      	add	r3, r2
 8004680:	9306      	str	r3, [sp, #24]
 8004682:	e6f1      	b.n	8004468 <forward_dense+0x2e0>
 8004684:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8004688:	f1b9 0f00 	cmp.w	r9, #0
 800468c:	d016      	beq.n	80046bc <forward_dense+0x534>
 800468e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004692:	f002 f8d5 	bl	8006840 <ai_array_get_byte_size>
 8004696:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800469a:	4602      	mov	r2, r0
 800469c:	4659      	mov	r1, fp
 800469e:	4640      	mov	r0, r8
 80046a0:	f001 ffdc 	bl	800665c <st_int8_copy>
 80046a4:	e5c7      	b.n	8004236 <forward_dense+0xae>
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d00a      	beq.n	80046c0 <forward_dense+0x538>
 80046aa:	f04f 0900 	mov.w	r9, #0
 80046ae:	e5bd      	b.n	800422c <forward_dense+0xa4>
 80046b0:	930d      	str	r3, [sp, #52]	; 0x34
 80046b2:	e595      	b.n	80041e0 <forward_dense+0x58>
 80046b4:	2300      	movs	r3, #0
 80046b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80046b8:	460b      	mov	r3, r1
 80046ba:	e591      	b.n	80041e0 <forward_dense+0x58>
 80046bc:	46c3      	mov	fp, r8
 80046be:	e5ba      	b.n	8004236 <forward_dense+0xae>
 80046c0:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80046c4:	e5b7      	b.n	8004236 <forward_dense+0xae>
 80046c6:	2300      	movs	r3, #0
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	deff      	udf	#255	; 0xff
 80046cc:	2300      	movs	r3, #0
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	deff      	udf	#255	; 0xff
 80046d2:	bf00      	nop

080046d4 <forward_gather>:
 80046d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d8:	ed2d 8b02 	vpush	{d8}
 80046dc:	6983      	ldr	r3, [r0, #24]
 80046de:	b09d      	sub	sp, #116	; 0x74
 80046e0:	881a      	ldrh	r2, [r3, #0]
 80046e2:	900e      	str	r0, [sp, #56]	; 0x38
 80046e4:	2a00      	cmp	r2, #0
 80046e6:	f000 811a 	beq.w	800491e <forward_gather+0x24a>
 80046ea:	6859      	ldr	r1, [r3, #4]
 80046ec:	684b      	ldr	r3, [r1, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8117 	beq.w	8004922 <forward_gather+0x24e>
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80046fa:	2a01      	cmp	r2, #1
 80046fc:	f000 8113 	beq.w	8004926 <forward_gather+0x252>
 8004700:	690a      	ldr	r2, [r1, #16]
 8004702:	2a00      	cmp	r2, #0
 8004704:	f000 8112 	beq.w	800492c <forward_gather+0x258>
 8004708:	6811      	ldr	r1, [r2, #0]
 800470a:	68dc      	ldr	r4, [r3, #12]
 800470c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800470e:	6989      	ldr	r1, [r1, #24]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	68ea      	ldr	r2, [r5, #12]
 8004714:	6888      	ldr	r0, [r1, #8]
 8004716:	6899      	ldr	r1, [r3, #8]
 8004718:	68e6      	ldr	r6, [r4, #12]
 800471a:	6864      	ldr	r4, [r4, #4]
 800471c:	9618      	str	r6, [sp, #96]	; 0x60
 800471e:	e9d5 3505 	ldrd	r3, r5, [r5, #20]
 8004722:	68ad      	ldr	r5, [r5, #8]
 8004724:	9510      	str	r5, [sp, #64]	; 0x40
 8004726:	68d5      	ldr	r5, [r2, #12]
 8004728:	9503      	str	r5, [sp, #12]
 800472a:	689d      	ldr	r5, [r3, #8]
 800472c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8004730:	940c      	str	r4, [sp, #48]	; 0x30
 8004732:	e9d2 7b01 	ldrd	r7, fp, [r2, #4]
 8004736:	9511      	str	r5, [sp, #68]	; 0x44
 8004738:	2e00      	cmp	r6, #0
 800473a:	f000 809c 	beq.w	8004876 <forward_gather+0x1a2>
 800473e:	9b03      	ldr	r3, [sp, #12]
 8004740:	4622      	mov	r2, r4
 8004742:	fb0b f303 	mul.w	r3, fp, r3
 8004746:	2c00      	cmp	r4, #0
 8004748:	f000 8095 	beq.w	8004876 <forward_gather+0x1a2>
 800474c:	fb09 f303 	mul.w	r3, r9, r3
 8004750:	fb04 f403 	mul.w	r4, r4, r3
 8004754:	fb02 f30b 	mul.w	r3, r2, fp
 8004758:	3904      	subs	r1, #4
 800475a:	941a      	str	r4, [sp, #104]	; 0x68
 800475c:	fb03 f405 	mul.w	r4, r3, r5
 8004760:	911b      	str	r1, [sp, #108]	; 0x6c
 8004762:	9419      	str	r4, [sp, #100]	; 0x64
 8004764:	fb07 f10b 	mul.w	r1, r7, fp
 8004768:	fb09 f403 	mul.w	r4, r9, r3
 800476c:	fb09 f101 	mul.w	r1, r9, r1
 8004770:	9404      	str	r4, [sp, #16]
 8004772:	fb05 f40b 	mul.w	r4, r5, fp
 8004776:	9105      	str	r1, [sp, #20]
 8004778:	940b      	str	r4, [sp, #44]	; 0x2c
 800477a:	2100      	movs	r1, #0
 800477c:	fb05 f406 	mul.w	r4, r5, r6
 8004780:	fb09 fa02 	mul.w	sl, r9, r2
 8004784:	fb05 f202 	mul.w	r2, r5, r2
 8004788:	9013      	str	r0, [sp, #76]	; 0x4c
 800478a:	fb09 f707 	mul.w	r7, r9, r7
 800478e:	9116      	str	r1, [sp, #88]	; 0x58
 8004790:	940d      	str	r4, [sp, #52]	; 0x34
 8004792:	9214      	str	r2, [sp, #80]	; 0x50
 8004794:	9015      	str	r0, [sp, #84]	; 0x54
 8004796:	9012      	str	r0, [sp, #72]	; 0x48
 8004798:	9117      	str	r1, [sp, #92]	; 0x5c
 800479a:	465e      	mov	r6, fp
 800479c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800479e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80047a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80047a4:	930a      	str	r3, [sp, #40]	; 0x28
 80047a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80047a8:	9306      	str	r3, [sp, #24]
 80047aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80047ac:	9307      	str	r3, [sp, #28]
 80047ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80047b0:	9308      	str	r3, [sp, #32]
 80047b2:	2300      	movs	r3, #0
 80047b4:	9309      	str	r3, [sp, #36]	; 0x24
 80047b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80047ba:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80047be:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80047c2:	910a      	str	r1, [sp, #40]	; 0x28
 80047c4:	2a03      	cmp	r2, #3
 80047c6:	f000 8088 	beq.w	80048da <forward_gather+0x206>
 80047ca:	2a02      	cmp	r2, #2
 80047cc:	d058      	beq.n	8004880 <forward_gather+0x1ac>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bfbd      	ittte	lt
 80047d2:	9a0f      	ldrlt	r2, [sp, #60]	; 0x3c
 80047d4:	68d2      	ldrlt	r2, [r2, #12]
 80047d6:	6852      	ldrlt	r2, [r2, #4]
 80047d8:	2200      	movge	r2, #0
 80047da:	4413      	add	r3, r2
 80047dc:	9a03      	ldr	r2, [sp, #12]
 80047de:	b31a      	cbz	r2, 8004828 <forward_gather+0x154>
 80047e0:	b316      	cbz	r6, 8004828 <forward_gather+0x154>
 80047e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80047e4:	f8dd b018 	ldr.w	fp, [sp, #24]
 80047e8:	fb09 2303 	mla	r3, r9, r3, r2
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	2300      	movs	r3, #0
 80047f0:	9302      	str	r3, [sp, #8]
 80047f2:	46c8      	mov	r8, r9
 80047f4:	9d01      	ldr	r5, [sp, #4]
 80047f6:	46d9      	mov	r9, fp
 80047f8:	2400      	movs	r4, #0
 80047fa:	4649      	mov	r1, r9
 80047fc:	4628      	mov	r0, r5
 80047fe:	3401      	adds	r4, #1
 8004800:	4642      	mov	r2, r8
 8004802:	f001 ff2b 	bl	800665c <st_int8_copy>
 8004806:	42a6      	cmp	r6, r4
 8004808:	44d1      	add	r9, sl
 800480a:	443d      	add	r5, r7
 800480c:	d1f5      	bne.n	80047fa <forward_gather+0x126>
 800480e:	9a01      	ldr	r2, [sp, #4]
 8004810:	9905      	ldr	r1, [sp, #20]
 8004812:	9b02      	ldr	r3, [sp, #8]
 8004814:	440a      	add	r2, r1
 8004816:	9201      	str	r2, [sp, #4]
 8004818:	9a04      	ldr	r2, [sp, #16]
 800481a:	4493      	add	fp, r2
 800481c:	9a03      	ldr	r2, [sp, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	429a      	cmp	r2, r3
 8004822:	9302      	str	r3, [sp, #8]
 8004824:	d1e6      	bne.n	80047f4 <forward_gather+0x120>
 8004826:	46c1      	mov	r9, r8
 8004828:	9a08      	ldr	r2, [sp, #32]
 800482a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800482c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800482e:	440a      	add	r2, r1
 8004830:	9208      	str	r2, [sp, #32]
 8004832:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004834:	9a07      	ldr	r2, [sp, #28]
 8004836:	440a      	add	r2, r1
 8004838:	9207      	str	r2, [sp, #28]
 800483a:	9a06      	ldr	r2, [sp, #24]
 800483c:	444a      	add	r2, r9
 800483e:	9206      	str	r2, [sp, #24]
 8004840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004842:	3301      	adds	r3, #1
 8004844:	429a      	cmp	r2, r3
 8004846:	9309      	str	r3, [sp, #36]	; 0x24
 8004848:	d1b5      	bne.n	80047b6 <forward_gather+0xe2>
 800484a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800484c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800484e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004850:	440a      	add	r2, r1
 8004852:	9213      	str	r2, [sp, #76]	; 0x4c
 8004854:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 8004858:	440a      	add	r2, r1
 800485a:	9212      	str	r2, [sp, #72]	; 0x48
 800485c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800485e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004860:	440a      	add	r2, r1
 8004862:	9215      	str	r2, [sp, #84]	; 0x54
 8004864:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004866:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004868:	440a      	add	r2, r1
 800486a:	9216      	str	r2, [sp, #88]	; 0x58
 800486c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800486e:	3301      	adds	r3, #1
 8004870:	429a      	cmp	r2, r3
 8004872:	9317      	str	r3, [sp, #92]	; 0x5c
 8004874:	d192      	bne.n	800479c <forward_gather+0xc8>
 8004876:	b01d      	add	sp, #116	; 0x74
 8004878:	ecbd 8b02 	vpop	{d8}
 800487c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004880:	2b00      	cmp	r3, #0
 8004882:	bfbd      	ittte	lt
 8004884:	9a0f      	ldrlt	r2, [sp, #60]	; 0x3c
 8004886:	68d2      	ldrlt	r2, [r2, #12]
 8004888:	68d2      	ldrlt	r2, [r2, #12]
 800488a:	2200      	movge	r2, #0
 800488c:	4413      	add	r3, r2
 800488e:	9a03      	ldr	r2, [sp, #12]
 8004890:	2a00      	cmp	r2, #0
 8004892:	d0c9      	beq.n	8004828 <forward_gather+0x154>
 8004894:	e9dd 1010 	ldrd	r1, r0, [sp, #64]	; 0x40
 8004898:	9d07      	ldr	r5, [sp, #28]
 800489a:	9601      	str	r6, [sp, #4]
 800489c:	fb00 1803 	mla	r8, r0, r3, r1
 80048a0:	9702      	str	r7, [sp, #8]
 80048a2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80048a6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80048a8:	4647      	mov	r7, r8
 80048aa:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80048ae:	ee08 9a10 	vmov	s16, r9
 80048b2:	2400      	movs	r4, #0
 80048b4:	46a9      	mov	r9, r5
 80048b6:	4615      	mov	r5, r2
 80048b8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80048bc:	4649      	mov	r1, r9
 80048be:	4638      	mov	r0, r7
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	3401      	adds	r4, #1
 80048c4:	f001 feca 	bl	800665c <st_int8_copy>
 80048c8:	42a5      	cmp	r5, r4
 80048ca:	44b1      	add	r9, r6
 80048cc:	4447      	add	r7, r8
 80048ce:	d1f3      	bne.n	80048b8 <forward_gather+0x1e4>
 80048d0:	9e01      	ldr	r6, [sp, #4]
 80048d2:	9f02      	ldr	r7, [sp, #8]
 80048d4:	ee18 9a10 	vmov	r9, s16
 80048d8:	e7a6      	b.n	8004828 <forward_gather+0x154>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bfbd      	ittte	lt
 80048de:	9a0f      	ldrlt	r2, [sp, #60]	; 0x3c
 80048e0:	68d2      	ldrlt	r2, [r2, #12]
 80048e2:	68d2      	ldrlt	r2, [r2, #12]
 80048e4:	2200      	movge	r2, #0
 80048e6:	4413      	add	r3, r2
 80048e8:	2e00      	cmp	r6, #0
 80048ea:	d09d      	beq.n	8004828 <forward_gather+0x154>
 80048ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80048ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048f0:	9701      	str	r7, [sp, #4]
 80048f2:	9d08      	ldr	r5, [sp, #32]
 80048f4:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80048f8:	4637      	mov	r7, r6
 80048fa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80048fc:	fb01 2803 	mla	r8, r1, r3, r2
 8004900:	2400      	movs	r4, #0
 8004902:	6973      	ldr	r3, [r6, #20]
 8004904:	4629      	mov	r1, r5
 8004906:	4640      	mov	r0, r8
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	3401      	adds	r4, #1
 800490c:	f001 fea6 	bl	800665c <st_int8_copy>
 8004910:	42a7      	cmp	r7, r4
 8004912:	445d      	add	r5, fp
 8004914:	44d8      	add	r8, fp
 8004916:	d1f4      	bne.n	8004902 <forward_gather+0x22e>
 8004918:	463e      	mov	r6, r7
 800491a:	9f01      	ldr	r7, [sp, #4]
 800491c:	e784      	b.n	8004828 <forward_gather+0x154>
 800491e:	6853      	ldr	r3, [r2, #4]
 8004920:	deff      	udf	#255	; 0xff
 8004922:	930f      	str	r3, [sp, #60]	; 0x3c
 8004924:	e6e9      	b.n	80046fa <forward_gather+0x26>
 8004926:	2300      	movs	r3, #0
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	deff      	udf	#255	; 0xff
 800492c:	6993      	ldr	r3, [r2, #24]
 800492e:	deff      	udf	#255	; 0xff

08004930 <nl_func_sigmoid_array_f32>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	ed2d 8b02 	vpush	{d8}
 8004936:	698f      	ldr	r7, [r1, #24]
 8004938:	6980      	ldr	r0, [r0, #24]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	6886      	ldr	r6, [r0, #8]
 800493e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004942:	3a01      	subs	r2, #1
 8004944:	0093      	lsls	r3, r2, #2
 8004946:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800494a:	4291      	cmp	r1, r2
 800494c:	d815      	bhi.n	800497a <nl_func_sigmoid_array_f32+0x4a>
 800494e:	3304      	adds	r3, #4
 8004950:	1d14      	adds	r4, r2, #4
 8004952:	441e      	add	r6, r3
 8004954:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004958:	4625      	mov	r5, r4
 800495a:	ed34 0a01 	vldmdb	r4!, {s0}
 800495e:	eeb1 0a40 	vneg.f32	s0, s0
 8004962:	f002 fefd 	bl	8007760 <expf>
 8004966:	ee30 0a08 	vadd.f32	s0, s0, s16
 800496a:	3d08      	subs	r5, #8
 800496c:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8004970:	ed66 7a01 	vstmdb	r6!, {s15}
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	42ab      	cmp	r3, r5
 8004978:	d9ee      	bls.n	8004958 <nl_func_sigmoid_array_f32+0x28>
 800497a:	ecbd 8b02 	vpop	{d8}
 800497e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004980 <nl_func_tanh_array_f32>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	698f      	ldr	r7, [r1, #24]
 8004984:	6980      	ldr	r0, [r0, #24]
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	6886      	ldr	r6, [r0, #8]
 800498a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800498e:	3a01      	subs	r2, #1
 8004990:	0093      	lsls	r3, r2, #2
 8004992:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004996:	4291      	cmp	r1, r2
 8004998:	d80d      	bhi.n	80049b6 <nl_func_tanh_array_f32+0x36>
 800499a:	3304      	adds	r3, #4
 800499c:	1d14      	adds	r4, r2, #4
 800499e:	441e      	add	r6, r3
 80049a0:	4625      	mov	r5, r4
 80049a2:	ed34 0a01 	vldmdb	r4!, {s0}
 80049a6:	f002 ff19 	bl	80077dc <tanhf>
 80049aa:	ed26 0a01 	vstmdb	r6!, {s0}
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	3d08      	subs	r5, #8
 80049b2:	42ab      	cmp	r3, r5
 80049b4:	d9f4      	bls.n	80049a0 <nl_func_tanh_array_f32+0x20>
 80049b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049b8 <forward_sm>:
 80049b8:	6982      	ldr	r2, [r0, #24]
 80049ba:	8813      	ldrh	r3, [r2, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d07c      	beq.n	8004aba <forward_sm+0x102>
 80049c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c4:	ed2d 8b04 	vpush	{d8-d9}
 80049c8:	6852      	ldr	r2, [r2, #4]
 80049ca:	6854      	ldr	r4, [r2, #4]
 80049cc:	b085      	sub	sp, #20
 80049ce:	b104      	cbz	r4, 80049d2 <forward_sm+0x1a>
 80049d0:	6824      	ldr	r4, [r4, #0]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d076      	beq.n	8004ac4 <forward_sm+0x10c>
 80049d6:	6913      	ldr	r3, [r2, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d076      	beq.n	8004aca <forward_sm+0x112>
 80049dc:	681e      	ldr	r6, [r3, #0]
 80049de:	68a3      	ldr	r3, [r4, #8]
 80049e0:	68e0      	ldr	r0, [r4, #12]
 80049e2:	68f2      	ldr	r2, [r6, #12]
 80049e4:	6845      	ldr	r5, [r0, #4]
 80049e6:	6857      	ldr	r7, [r2, #4]
 80049e8:	0a1b      	lsrs	r3, r3, #8
 80049ea:	d068      	beq.n	8004abe <forward_sm+0x106>
 80049ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80049f0:	2201      	movs	r2, #1
 80049f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80049f6:	4298      	cmp	r0, r3
 80049f8:	fb01 f202 	mul.w	r2, r1, r2
 80049fc:	d1f9      	bne.n	80049f2 <forward_sm+0x3a>
 80049fe:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8004a02:	69a2      	ldr	r2, [r4, #24]
 8004a04:	69b3      	ldr	r3, [r6, #24]
 8004a06:	6892      	ldr	r2, [r2, #8]
 8004a08:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8004a0c:	eb02 0309 	add.w	r3, r2, r9
 8004a10:	429a      	cmp	r2, r3
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	d24c      	bcs.n	8004ab0 <forward_sm+0xf8>
 8004a16:	00bb      	lsls	r3, r7, #2
 8004a18:	9303      	str	r3, [sp, #12]
 8004a1a:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8004a1e:	00ab      	lsls	r3, r5, #2
 8004a20:	2d01      	cmp	r5, #1
 8004a22:	ed92 8a00 	vldr	s16, [r2]
 8004a26:	9302      	str	r3, [sp, #8]
 8004a28:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8004a2c:	463e      	mov	r6, r7
 8004a2e:	d93c      	bls.n	8004aaa <forward_sm+0xf2>
 8004a30:	1d13      	adds	r3, r2, #4
 8004a32:	ecf3 7a01 	vldmia	r3!, {s15}
 8004a36:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3e:	bfb8      	it	lt
 8004a40:	eeb0 8a67 	vmovlt.f32	s16, s15
 8004a44:	429e      	cmp	r6, r3
 8004a46:	d1f4      	bne.n	8004a32 <forward_sm+0x7a>
 8004a48:	eddf 8a21 	vldr	s17, [pc, #132]	; 8004ad0 <forward_sm+0x118>
 8004a4c:	4692      	mov	sl, r2
 8004a4e:	46c3      	mov	fp, r8
 8004a50:	46c1      	mov	r9, r8
 8004a52:	2400      	movs	r4, #0
 8004a54:	ecba 0a01 	vldmia	sl!, {s0}
 8004a58:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004a5c:	f002 fe80 	bl	8007760 <expf>
 8004a60:	3401      	adds	r4, #1
 8004a62:	42a5      	cmp	r5, r4
 8004a64:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004a68:	eca9 0a01 	vstmia	r9!, {s0}
 8004a6c:	d8f2      	bhi.n	8004a54 <forward_sm+0x9c>
 8004a6e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a76:	d00b      	beq.n	8004a90 <forward_sm+0xd8>
 8004a78:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	3301      	adds	r3, #1
 8004a80:	429d      	cmp	r5, r3
 8004a82:	eddb 7a00 	vldr	s15, [fp]
 8004a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8a:	eceb 7a01 	vstmia	fp!, {s15}
 8004a8e:	d8f6      	bhi.n	8004a7e <forward_sm+0xc6>
 8004a90:	9b03      	ldr	r3, [sp, #12]
 8004a92:	9901      	ldr	r1, [sp, #4]
 8004a94:	4498      	add	r8, r3
 8004a96:	9b02      	ldr	r3, [sp, #8]
 8004a98:	42b9      	cmp	r1, r7
 8004a9a:	463a      	mov	r2, r7
 8004a9c:	441e      	add	r6, r3
 8004a9e:	d907      	bls.n	8004ab0 <forward_sm+0xf8>
 8004aa0:	2d01      	cmp	r5, #1
 8004aa2:	ed92 8a00 	vldr	s16, [r2]
 8004aa6:	441f      	add	r7, r3
 8004aa8:	d8c2      	bhi.n	8004a30 <forward_sm+0x78>
 8004aaa:	2d00      	cmp	r5, #0
 8004aac:	d0f0      	beq.n	8004a90 <forward_sm+0xd8>
 8004aae:	e7cb      	b.n	8004a48 <forward_sm+0x90>
 8004ab0:	b005      	add	sp, #20
 8004ab2:	ecbd 8b04 	vpop	{d8-d9}
 8004ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	deff      	udf	#255	; 0xff
 8004abe:	f04f 0904 	mov.w	r9, #4
 8004ac2:	e79e      	b.n	8004a02 <forward_sm+0x4a>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	deff      	udf	#255	; 0xff
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	deff      	udf	#255	; 0xff
 8004ace:	bf00      	nop
 8004ad0:	00000000 	.word	0x00000000

08004ad4 <array_f32_identity>:
 8004ad4:	6980      	ldr	r0, [r0, #24]
 8004ad6:	698b      	ldr	r3, [r1, #24]
 8004ad8:	4298      	cmp	r0, r3
 8004ada:	d004      	beq.n	8004ae6 <array_f32_identity+0x12>
 8004adc:	68c1      	ldr	r1, [r0, #12]
 8004ade:	68d8      	ldr	r0, [r3, #12]
 8004ae0:	0092      	lsls	r2, r2, #2
 8004ae2:	f001 bdbb 	b.w	800665c <st_int8_copy>
 8004ae6:	4770      	bx	lr

08004ae8 <forward_lstm>:
 8004ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aec:	ed2d 8b06 	vpush	{d8-d10}
 8004af0:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8004af4:	6983      	ldr	r3, [r0, #24]
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	60b8      	str	r0, [r7, #8]
 8004afc:	2a00      	cmp	r2, #0
 8004afe:	f001 842a 	beq.w	8006356 <forward_lstm+0x186e>
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b08:	2a01      	cmp	r2, #1
 8004b0a:	f001 8424 	beq.w	8006356 <forward_lstm+0x186e>
 8004b0e:	2a02      	cmp	r2, #2
 8004b10:	f001 8421 	beq.w	8006356 <forward_lstm+0x186e>
 8004b14:	69d8      	ldr	r0, [r3, #28]
 8004b16:	2800      	cmp	r0, #0
 8004b18:	f001 8414 	beq.w	8006344 <forward_lstm+0x185c>
 8004b1c:	8b1b      	ldrh	r3, [r3, #24]
 8004b1e:	6801      	ldr	r1, [r0, #0]
 8004b20:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	6883      	ldr	r3, [r0, #8]
 8004b28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004b2c:	bf88      	it	hi
 8004b2e:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8004b32:	68c3      	ldr	r3, [r0, #12]
 8004b34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b38:	bf98      	it	ls
 8004b3a:	f04f 0b00 	movls.w	fp, #0
 8004b3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b46:	b10b      	cbz	r3, 8004b4c <forward_lstm+0x64>
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b50:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b52:	899b      	ldrh	r3, [r3, #12]
 8004b54:	68cd      	ldr	r5, [r1, #12]
 8004b56:	0099      	lsls	r1, r3, #2
 8004b58:	3107      	adds	r1, #7
 8004b5a:	08c9      	lsrs	r1, r1, #3
 8004b5c:	466c      	mov	r4, sp
 8004b5e:	eba4 04c1 	sub.w	r4, r4, r1, lsl #3
 8004b62:	46a5      	mov	sp, r4
 8004b64:	1ddc      	adds	r4, r3, #7
 8004b66:	466e      	mov	r6, sp
 8004b68:	08e4      	lsrs	r4, r4, #3
 8004b6a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8004b6e:	46a5      	mov	sp, r4
 8004b70:	68bc      	ldr	r4, [r7, #8]
 8004b72:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8004b76:	466c      	mov	r4, sp
 8004b78:	eba4 0cc1 	sub.w	ip, r4, r1, lsl #3
 8004b7c:	46e5      	mov	sp, ip
 8004b7e:	ebac 01c1 	sub.w	r1, ip, r1, lsl #3
 8004b82:	f8c7 d010 	str.w	sp, [r7, #16]
 8004b86:	468d      	mov	sp, r1
 8004b88:	68e9      	ldr	r1, [r5, #12]
 8004b8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b8c:	6869      	ldr	r1, [r5, #4]
 8004b8e:	6779      	str	r1, [r7, #116]	; 0x74
 8004b90:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8004b94:	ee09 1a10 	vmov	s18, r1
 8004b98:	46ee      	mov	lr, sp
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	f001 83c9 	beq.w	8006332 <forward_lstm+0x184a>
 8004ba0:	6945      	ldr	r5, [r0, #20]
 8004ba2:	6901      	ldr	r1, [r0, #16]
 8004ba4:	ee09 5a90 	vmov	s19, r5
 8004ba8:	6985      	ldr	r5, [r0, #24]
 8004baa:	ee0a 1a90 	vmov	s21, r1
 8004bae:	e9d0 9007 	ldrd	r9, r0, [r0, #28]
 8004bb2:	ee0a 5a10 	vmov	s20, r5
 8004bb6:	b119      	cbz	r1, 8004bc0 <forward_lstm+0xd8>
 8004bb8:	6989      	ldr	r1, [r1, #24]
 8004bba:	6889      	ldr	r1, [r1, #8]
 8004bbc:	ee0a 1a90 	vmov	s21, r1
 8004bc0:	ee19 1a90 	vmov	r1, s19
 8004bc4:	b119      	cbz	r1, 8004bce <forward_lstm+0xe6>
 8004bc6:	6989      	ldr	r1, [r1, #24]
 8004bc8:	6889      	ldr	r1, [r1, #8]
 8004bca:	ee09 1a90 	vmov	s19, r1
 8004bce:	ee1a 1a10 	vmov	r1, s20
 8004bd2:	b119      	cbz	r1, 8004bdc <forward_lstm+0xf4>
 8004bd4:	6989      	ldr	r1, [r1, #24]
 8004bd6:	6889      	ldr	r1, [r1, #8]
 8004bd8:	ee0a 1a10 	vmov	s20, r1
 8004bdc:	f1b9 0f00 	cmp.w	r9, #0
 8004be0:	d003      	beq.n	8004bea <forward_lstm+0x102>
 8004be2:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8004be6:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8004bea:	b108      	cbz	r0, 8004bf0 <forward_lstm+0x108>
 8004bec:	6981      	ldr	r1, [r0, #24]
 8004bee:	6888      	ldr	r0, [r1, #8]
 8004bf0:	2a03      	cmp	r2, #3
 8004bf2:	f001 83b0 	beq.w	8006356 <forward_lstm+0x186e>
 8004bf6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004bfa:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 8004bfe:	f1ba 0f00 	cmp.w	sl, #0
 8004c02:	d001      	beq.n	8004c08 <forward_lstm+0x120>
 8004c04:	f8da a000 	ldr.w	sl, [sl]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	f8c7 90fc 	str.w	r9, [r7, #252]	; 0xfc
 8004c0e:	4423      	add	r3, r4
 8004c10:	4621      	mov	r1, r4
 8004c12:	f1ae 0404 	sub.w	r4, lr, #4
 8004c16:	f8d7 c090 	ldr.w	ip, [r7, #144]	; 0x90
 8004c1a:	60fc      	str	r4, [r7, #12]
 8004c1c:	3e04      	subs	r6, #4
 8004c1e:	f1ce 0e04 	rsb	lr, lr, #4
 8004c22:	1f15      	subs	r5, r2, #4
 8004c24:	4699      	mov	r9, r3
 8004c26:	e016      	b.n	8004c56 <forward_lstm+0x16e>
 8004c28:	4423      	add	r3, r4
 8004c2a:	f853 200e 	ldr.w	r2, [r3, lr]
 8004c2e:	b1c2      	cbz	r2, 8004c62 <forward_lstm+0x17a>
 8004c30:	68d3      	ldr	r3, [r2, #12]
 8004c32:	f846 2f04 	str.w	r2, [r6, #4]!
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	6992      	ldr	r2, [r2, #24]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	6893      	ldr	r3, [r2, #8]
 8004c3e:	f845 3f04 	str.w	r3, [r5, #4]!
 8004c42:	bf8c      	ite	hi
 8004c44:	2301      	movhi	r3, #1
 8004c46:	2300      	movls	r3, #0
 8004c48:	f801 3b01 	strb.w	r3, [r1], #1
 8004c4c:	bf8c      	ite	hi
 8004c4e:	4643      	movhi	r3, r8
 8004c50:	2300      	movls	r3, #0
 8004c52:	f844 3f04 	str.w	r3, [r4, #4]!
 8004c56:	4549      	cmp	r1, r9
 8004c58:	d003      	beq.n	8004c62 <forward_lstm+0x17a>
 8004c5a:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e2      	bne.n	8004c28 <forward_lstm+0x140>
 8004c62:	f8da 3018 	ldr.w	r3, [sl, #24]
 8004c66:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004c6a:	689d      	ldr	r5, [r3, #8]
 8004c6c:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8004c70:	f8db 3018 	ldr.w	r3, [fp, #24]
 8004c74:	6989      	ldr	r1, [r1, #24]
 8004c76:	69a4      	ldr	r4, [r4, #24]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	667b      	str	r3, [r7, #100]	; 0x64
 8004c7c:	688b      	ldr	r3, [r1, #8]
 8004c7e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c84:	68a3      	ldr	r3, [r4, #8]
 8004c86:	663b      	str	r3, [r7, #96]	; 0x60
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	6992      	ldr	r2, [r2, #24]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	6892      	ldr	r2, [r2, #8]
 8004c90:	66ba      	str	r2, [r7, #104]	; 0x68
 8004c92:	ee19 1a10 	vmov	r1, s18
 8004c96:	eb05 0441 	add.w	r4, r5, r1, lsl #1
 8004c9a:	186a      	adds	r2, r5, r1
 8004c9c:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8004ca0:	4421      	add	r1, r4
 8004ca2:	f8d7 90fc 	ldr.w	r9, [r7, #252]	; 0xfc
 8004ca6:	673d      	str	r5, [r7, #112]	; 0x70
 8004ca8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8004cac:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8004cb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cb4:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	f041 8264 	bne.w	8006186 <forward_lstm+0x169e>
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	f001 826e 	beq.w	80061a2 <forward_lstm+0x16ba>
 8004cc6:	ee19 2a10 	vmov	r2, s18
 8004cca:	f001 fcc7 	bl	800665c <st_int8_copy>
 8004cce:	ee19 2a10 	vmov	r2, s18
 8004cd2:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8004cd6:	4648      	mov	r0, r9
 8004cd8:	f1b9 0f00 	cmp.w	r9, #0
 8004cdc:	f001 826f 	beq.w	80061be <forward_lstm+0x16d6>
 8004ce0:	f001 fcbc 	bl	800665c <st_int8_copy>
 8004ce4:	ee19 2a10 	vmov	r2, s18
 8004ce8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004cec:	2000      	movs	r0, #0
 8004cee:	f001 fc59 	bl	80065a4 <st_int8_fill>
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	4bab      	ldr	r3, [pc, #684]	; (8004fa4 <forward_lstm+0x4bc>)
 8004cf6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004cf8:	edd2 8a10 	vldr	s17, [r2, #64]	; 0x40
 8004cfc:	2900      	cmp	r1, #0
 8004cfe:	bf08      	it	eq
 8004d00:	4619      	moveq	r1, r3
 8004d02:	6479      	str	r1, [r7, #68]	; 0x44
 8004d04:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004d06:	2900      	cmp	r1, #0
 8004d08:	bf08      	it	eq
 8004d0a:	4619      	moveq	r1, r3
 8004d0c:	67f9      	str	r1, [r7, #124]	; 0x7c
 8004d0e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004d10:	2900      	cmp	r1, #0
 8004d12:	bf08      	it	eq
 8004d14:	4619      	moveq	r1, r3
 8004d16:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8004d1a:	6439      	str	r1, [r7, #64]	; 0x40
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f001 8301 	beq.w	8006324 <forward_lstm+0x183c>
 8004d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d24:	3b01      	subs	r3, #1
 8004d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d30:	4613      	mov	r3, r2
 8004d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d36:	b1b3      	cbz	r3, 8004d66 <forward_lstm+0x27e>
 8004d38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d3c:	899d      	ldrh	r5, [r3, #12]
 8004d3e:	b195      	cbz	r5, 8004d66 <forward_lstm+0x27e>
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8004d4a:	1e5e      	subs	r6, r3, #1
 8004d4c:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8004d50:	6811      	ldr	r1, [r2, #0]
 8004d52:	fb03 f406 	mul.w	r4, r3, r6
 8004d56:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004d5a:	f842 1b04 	str.w	r1, [r2], #4
 8004d5e:	425b      	negs	r3, r3
 8004d60:	4295      	cmp	r5, r2
 8004d62:	6003      	str	r3, [r0, #0]
 8004d64:	d1f2      	bne.n	8004d4c <forward_lstm+0x264>
 8004d66:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8004d68:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8004d6a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004d6e:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 8004fac <forward_lstm+0x4c4>
 8004d72:	b2a9      	uxth	r1, r5
 8004d74:	fa1f f288 	uxth.w	r2, r8
 8004d78:	f1a1 0310 	sub.w	r3, r1, #16
 8004d7c:	0096      	lsls	r6, r2, #2
 8004d7e:	091b      	lsrs	r3, r3, #4
 8004d80:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8004d84:	3301      	adds	r3, #1
 8004d86:	fb06 f101 	mul.w	r1, r6, r1
 8004d8a:	eb04 0c41 	add.w	ip, r4, r1, lsl #1
 8004d8e:	019b      	lsls	r3, r3, #6
 8004d90:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8004d92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d9a:	f1a2 0310 	sub.w	r3, r2, #16
 8004d9e:	fb02 f202 	mul.w	r2, r2, r2
 8004da2:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 8004da6:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
 8004daa:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8004dac:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	eb04 0c46 	add.w	ip, r4, r6, lsl #1
 8004db6:	1c5c      	adds	r4, r3, #1
 8004db8:	019b      	lsls	r3, r3, #6
 8004dba:	623b      	str	r3, [r7, #32]
 8004dbc:	01a3      	lsls	r3, r4, #6
 8004dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dc4:	f8c7 60b0 	str.w	r6, [r7, #176]	; 0xb0
 8004dc8:	440b      	add	r3, r1
 8004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dce:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8004dd2:	f8c7 c04c 	str.w	ip, [r7, #76]	; 0x4c
 8004dd6:	440b      	add	r3, r1
 8004dd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ddc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
 8004de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
 8004dec:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004df0:	4633      	mov	r3, r6
 8004df2:	1996      	adds	r6, r2, r6
 8004df4:	62fe      	str	r6, [r7, #44]	; 0x2c
 8004df6:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 8004df8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8004dfc:	441e      	add	r6, r3
 8004dfe:	62be      	str	r6, [r7, #40]	; 0x28
 8004e00:	18e6      	adds	r6, r4, r3
 8004e02:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8004e04:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 8004e08:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 8004e0c:	ea04 0600 	and.w	r6, r4, r0
 8004e10:	f8c7 60f4 	str.w	r6, [r7, #244]	; 0xf4
 8004e14:	ea08 0600 	and.w	r6, r8, r0
 8004e18:	f8c7 60f8 	str.w	r6, [r7, #248]	; 0xf8
 8004e1c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004e20:	0089      	lsls	r1, r1, #2
 8004e22:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8004e26:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004e28:	00ad      	lsls	r5, r5, #2
 8004e2a:	fb05 f101 	mul.w	r1, r5, r1
 8004e2e:	61b9      	str	r1, [r7, #24]
 8004e30:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8004e34:	fb05 f501 	mul.w	r5, r5, r1
 8004e38:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
 8004e3c:	4661      	mov	r1, ip
 8004e3e:	eb02 0543 	add.w	r5, r2, r3, lsl #1
 8004e42:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004e46:	61fd      	str	r5, [r7, #28]
 8004e48:	4419      	add	r1, r3
 8004e4a:	6279      	str	r1, [r7, #36]	; 0x24
 8004e4c:	18d1      	adds	r1, r2, r3
 8004e4e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8004e52:	f008 060f 	and.w	r6, r8, #15
 8004e56:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e62:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8004e66:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8004e6a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8004e6e:	4413      	add	r3, r2
 8004e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e74:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e78:	4b4b      	ldr	r3, [pc, #300]	; (8004fa8 <forward_lstm+0x4c0>)
 8004e7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e7e:	e9c7 3244 	strd	r3, r2, [r7, #272]	; 0x110
 8004e82:	e9c7 3248 	strd	r3, r2, [r7, #288]	; 0x120
 8004e86:	e9c7 324c 	strd	r3, r2, [r7, #304]	; 0x130
 8004e8a:	e9c7 3250 	strd	r3, r2, [r7, #320]	; 0x140
 8004e8e:	e9c7 3254 	strd	r3, r2, [r7, #336]	; 0x150
 8004e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e94:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8004ea0:	4403      	add	r3, r0
 8004ea2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ea6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004eae:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8004eb2:	e9c7 4446 	strd	r4, r4, [r7, #280]	; 0x118
 8004eb6:	e9c7 334a 	strd	r3, r3, [r7, #296]	; 0x128
 8004eba:	e9c7 004e 	strd	r0, r0, [r7, #312]	; 0x138
 8004ebe:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004ec2:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8004ec4:	e9c7 0052 	strd	r0, r0, [r7, #328]	; 0x148
 8004ec8:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8004ecc:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8004ed0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8004ed4:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8004ed8:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8004edc:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8004ee0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ee4:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
 8004ee8:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8004eec:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
 8004ef0:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8004ef4:	e9c7 5556 	strd	r5, r5, [r7, #344]	; 0x158
 8004ef8:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
 8004efc:	2a00      	cmp	r2, #0
 8004efe:	f001 81a2 	beq.w	8006246 <forward_lstm+0x175e>
 8004f02:	6a38      	ldr	r0, [r7, #32]
 8004f04:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8004f08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f0c:	46a9      	mov	r9, r5
 8004f0e:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8004f10:	f8c7 50c0 	str.w	r5, [r7, #192]	; 0xc0
 8004f14:	3080      	adds	r0, #128	; 0x80
 8004f16:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8004f18:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
 8004f1c:	4410      	add	r0, r2
 8004f1e:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8004f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f22:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8004f26:	f8c7 50c8 	str.w	r5, [r7, #200]	; 0xc8
 8004f2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f2e:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8004f32:	f8c7 9078 	str.w	r9, [r7, #120]	; 0x78
 8004f36:	1955      	adds	r5, r2, r5
 8004f38:	469e      	mov	lr, r3
 8004f3a:	e9d7 b314 	ldrd	fp, r3, [r7, #80]	; 0x50
 8004f3e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8004f42:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
 8004f46:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
 8004f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f4e:	442a      	add	r2, r5
 8004f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f52:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8004f56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f70:	f002 020f 	and.w	r2, r2, #15
 8004f74:	46a0      	mov	r8, r4
 8004f76:	468c      	mov	ip, r1
 8004f78:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8004f7c:	469a      	mov	sl, r3
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f82:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004fac <forward_lstm+0x4c4>
 8004f86:	ecac 8a01 	vstmia	ip!, {s16}
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f001 8154 	beq.w	8006238 <forward_lstm+0x1750>
 8004f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f94:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004f98:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004f9c:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 8004fa0:	e006      	b.n	8004fb0 <forward_lstm+0x4c8>
 8004fa2:	bf00      	nop
 8004fa4:	08004ad5 	.word	0x08004ad5
 8004fa8:	01821040 	.word	0x01821040
 8004fac:	00000000 	.word	0x00000000
 8004fb0:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8004fb4:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8004fb8:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8004fbc:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8004fc0:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8004fc4:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8004fc8:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8004fcc:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8004fd0:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8004fd4:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8004fd8:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8004fdc:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8004fe0:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8004fe4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004fe8:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8004fec:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004ff0:	3910      	subs	r1, #16
 8004ff2:	290f      	cmp	r1, #15
 8004ff4:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8004ff8:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8004ffc:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005000:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005004:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005008:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 800500c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8005010:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005014:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8005018:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 800501c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005020:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8005024:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8005028:	eee6 7a26 	vfma.f32	s15, s12, s13
 800502c:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8005030:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8005034:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005038:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800503c:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8005040:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005044:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8005048:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800504c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005050:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8005054:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8005058:	eee6 7a26 	vfma.f32	s15, s12, s13
 800505c:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8005060:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8005064:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005068:	eee2 7a22 	vfma.f32	s15, s4, s5
 800506c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005070:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005074:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005078:	eee6 7a26 	vfma.f32	s15, s12, s13
 800507c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005080:	d896      	bhi.n	8004fb0 <forward_lstm+0x4c8>
 8005082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005086:	e9d7 5426 	ldrd	r5, r4, [r7, #152]	; 0x98
 800508a:	4453      	add	r3, sl
 800508c:	2d00      	cmp	r5, #0
 800508e:	d076      	beq.n	800517e <forward_lstm+0x696>
 8005090:	edd4 6a00 	vldr	s13, [r4]
 8005094:	edd3 7a00 	vldr	s15, [r3]
 8005098:	2d01      	cmp	r5, #1
 800509a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800509e:	d06e      	beq.n	800517e <forward_lstm+0x696>
 80050a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80050a4:	edd4 7a01 	vldr	s15, [r4, #4]
 80050a8:	2d02      	cmp	r5, #2
 80050aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050ae:	d066      	beq.n	800517e <forward_lstm+0x696>
 80050b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80050b4:	edd4 7a02 	vldr	s15, [r4, #8]
 80050b8:	2d03      	cmp	r5, #3
 80050ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050be:	d05e      	beq.n	800517e <forward_lstm+0x696>
 80050c0:	edd3 6a03 	vldr	s13, [r3, #12]
 80050c4:	edd4 7a03 	vldr	s15, [r4, #12]
 80050c8:	2d04      	cmp	r5, #4
 80050ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050ce:	d056      	beq.n	800517e <forward_lstm+0x696>
 80050d0:	edd3 6a04 	vldr	s13, [r3, #16]
 80050d4:	edd4 7a04 	vldr	s15, [r4, #16]
 80050d8:	2d05      	cmp	r5, #5
 80050da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050de:	d04e      	beq.n	800517e <forward_lstm+0x696>
 80050e0:	edd3 6a05 	vldr	s13, [r3, #20]
 80050e4:	edd4 7a05 	vldr	s15, [r4, #20]
 80050e8:	2d06      	cmp	r5, #6
 80050ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050ee:	d046      	beq.n	800517e <forward_lstm+0x696>
 80050f0:	edd3 6a06 	vldr	s13, [r3, #24]
 80050f4:	edd4 7a06 	vldr	s15, [r4, #24]
 80050f8:	2d07      	cmp	r5, #7
 80050fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050fe:	d03e      	beq.n	800517e <forward_lstm+0x696>
 8005100:	edd3 6a07 	vldr	s13, [r3, #28]
 8005104:	edd4 7a07 	vldr	s15, [r4, #28]
 8005108:	2d08      	cmp	r5, #8
 800510a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800510e:	d036      	beq.n	800517e <forward_lstm+0x696>
 8005110:	edd3 6a08 	vldr	s13, [r3, #32]
 8005114:	edd4 7a08 	vldr	s15, [r4, #32]
 8005118:	2d09      	cmp	r5, #9
 800511a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800511e:	d02e      	beq.n	800517e <forward_lstm+0x696>
 8005120:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8005124:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8005128:	2d0a      	cmp	r5, #10
 800512a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800512e:	d026      	beq.n	800517e <forward_lstm+0x696>
 8005130:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8005134:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8005138:	2d0b      	cmp	r5, #11
 800513a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800513e:	d01e      	beq.n	800517e <forward_lstm+0x696>
 8005140:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005144:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8005148:	2d0c      	cmp	r5, #12
 800514a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800514e:	d016      	beq.n	800517e <forward_lstm+0x696>
 8005150:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8005154:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8005158:	f1b5 020d 	subs.w	r2, r5, #13
 800515c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005160:	d00d      	beq.n	800517e <forward_lstm+0x696>
 8005162:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8005166:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800516a:	2a01      	cmp	r2, #1
 800516c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005170:	d005      	beq.n	800517e <forward_lstm+0x696>
 8005172:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005176:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800517a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800517e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005182:	ed5f 6a76 	vldr	s13, [pc, #-472]	; 8004fac <forward_lstm+0x4c4>
 8005186:	ed0c 7a01 	vstr	s14, [ip, #-4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	f001 804c 	beq.w	8006228 <forward_lstm+0x1740>
 8005190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005194:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8005198:	3340      	adds	r3, #64	; 0x40
 800519a:	3240      	adds	r2, #64	; 0x40
 800519c:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80051a0:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 80051a4:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 80051a8:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80051ac:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 80051b0:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 80051b4:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 80051b8:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80051bc:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 80051c0:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 80051c4:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 80051c8:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 80051cc:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 80051d0:	ee67 7a85 	vmul.f32	s15, s15, s10
 80051d4:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 80051d8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80051dc:	3340      	adds	r3, #64	; 0x40
 80051de:	3240      	adds	r2, #64	; 0x40
 80051e0:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 80051e4:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 80051e8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80051ec:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 80051f0:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 80051f4:	eee4 7a06 	vfma.f32	s15, s8, s12
 80051f8:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 80051fc:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8005200:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005204:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8005208:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 800520c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005210:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8005214:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8005218:	eee2 7a83 	vfma.f32	s15, s5, s6
 800521c:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8005220:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8005224:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005228:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 800522c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8005230:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005234:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8005238:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800523c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005240:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8005244:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8005248:	eee0 7a81 	vfma.f32	s15, s1, s2
 800524c:	4298      	cmp	r0, r3
 800524e:	eee1 7a82 	vfma.f32	s15, s3, s4
 8005252:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005256:	eee3 7a84 	vfma.f32	s15, s7, s8
 800525a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800525e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005262:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005266:	d199      	bne.n	800519c <forward_lstm+0x6b4>
 8005268:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800526c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005270:	189a      	adds	r2, r3, r2
 8005272:	2e00      	cmp	r6, #0
 8005274:	d078      	beq.n	8005368 <forward_lstm+0x880>
 8005276:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800527a:	4633      	mov	r3, r6
 800527c:	ed91 6a00 	vldr	s12, [r1]
 8005280:	edd2 7a00 	vldr	s15, [r2]
 8005284:	2b01      	cmp	r3, #1
 8005286:	eee6 6a27 	vfma.f32	s13, s12, s15
 800528a:	d06d      	beq.n	8005368 <forward_lstm+0x880>
 800528c:	ed91 6a01 	vldr	s12, [r1, #4]
 8005290:	edd2 7a01 	vldr	s15, [r2, #4]
 8005294:	2b02      	cmp	r3, #2
 8005296:	eee6 6a27 	vfma.f32	s13, s12, s15
 800529a:	d065      	beq.n	8005368 <forward_lstm+0x880>
 800529c:	ed91 6a02 	vldr	s12, [r1, #8]
 80052a0:	edd2 7a02 	vldr	s15, [r2, #8]
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80052aa:	d05d      	beq.n	8005368 <forward_lstm+0x880>
 80052ac:	ed91 6a03 	vldr	s12, [r1, #12]
 80052b0:	edd2 7a03 	vldr	s15, [r2, #12]
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80052ba:	d055      	beq.n	8005368 <forward_lstm+0x880>
 80052bc:	ed91 6a04 	vldr	s12, [r1, #16]
 80052c0:	edd2 7a04 	vldr	s15, [r2, #16]
 80052c4:	2b05      	cmp	r3, #5
 80052c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80052ca:	d04d      	beq.n	8005368 <forward_lstm+0x880>
 80052cc:	ed91 6a05 	vldr	s12, [r1, #20]
 80052d0:	edd2 7a05 	vldr	s15, [r2, #20]
 80052d4:	2b06      	cmp	r3, #6
 80052d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80052da:	d045      	beq.n	8005368 <forward_lstm+0x880>
 80052dc:	ed91 6a06 	vldr	s12, [r1, #24]
 80052e0:	edd2 7a06 	vldr	s15, [r2, #24]
 80052e4:	2b07      	cmp	r3, #7
 80052e6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80052ea:	d03d      	beq.n	8005368 <forward_lstm+0x880>
 80052ec:	ed91 6a07 	vldr	s12, [r1, #28]
 80052f0:	edd2 7a07 	vldr	s15, [r2, #28]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80052fa:	d035      	beq.n	8005368 <forward_lstm+0x880>
 80052fc:	ed91 6a08 	vldr	s12, [r1, #32]
 8005300:	edd2 7a08 	vldr	s15, [r2, #32]
 8005304:	2b09      	cmp	r3, #9
 8005306:	eee6 6a27 	vfma.f32	s13, s12, s15
 800530a:	d02d      	beq.n	8005368 <forward_lstm+0x880>
 800530c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8005310:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8005314:	2b0a      	cmp	r3, #10
 8005316:	eee6 6a27 	vfma.f32	s13, s12, s15
 800531a:	d025      	beq.n	8005368 <forward_lstm+0x880>
 800531c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8005320:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8005324:	2b0b      	cmp	r3, #11
 8005326:	eee6 6a27 	vfma.f32	s13, s12, s15
 800532a:	d01d      	beq.n	8005368 <forward_lstm+0x880>
 800532c:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8005330:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8005334:	2b0c      	cmp	r3, #12
 8005336:	eee6 6a27 	vfma.f32	s13, s12, s15
 800533a:	d015      	beq.n	8005368 <forward_lstm+0x880>
 800533c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8005340:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8005344:	3b0d      	subs	r3, #13
 8005346:	eee6 6a27 	vfma.f32	s13, s12, s15
 800534a:	d00d      	beq.n	8005368 <forward_lstm+0x880>
 800534c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8005350:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8005354:	2b01      	cmp	r3, #1
 8005356:	eee6 6a27 	vfma.f32	s13, s12, s15
 800535a:	d005      	beq.n	8005368 <forward_lstm+0x880>
 800535c:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8005360:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005364:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800536c:	f8c7 90ac 	str.w	r9, [r7, #172]	; 0xac
 8005370:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005374:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8005378:	ecb3 6a01 	vldmia	r3!, {s12}
 800537c:	edd9 6a00 	vldr	s13, [r9]
 8005380:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005384:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005388:	ecf3 7a01 	vldmia	r3!, {s15}
 800538c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	ee37 7a87 	vadd.f32	s14, s15, s14
 800539c:	ed0c 7a01 	vstr	s14, [ip, #-4]
 80053a0:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8005690 <forward_lstm+0xba8>
 80053a4:	ed88 8a00 	vstr	s16, [r8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8739 	beq.w	8006220 <forward_lstm+0x1738>
 80053ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80053b6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80053ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053be:	3340      	adds	r3, #64	; 0x40
 80053c0:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80053c4:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80053c8:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80053cc:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 80053d0:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 80053d4:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 80053d8:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80053dc:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 80053e0:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 80053e4:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 80053e8:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 80053ec:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 80053f0:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 80053f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80053f8:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 80053fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005400:	3910      	subs	r1, #16
 8005402:	290f      	cmp	r1, #15
 8005404:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8005408:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 800540c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005410:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005414:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005418:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 800541c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8005420:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005424:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8005428:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 800542c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005430:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8005434:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8005438:	eee6 7a26 	vfma.f32	s15, s12, s13
 800543c:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8005440:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8005444:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005448:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800544c:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8005450:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005454:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8005458:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800545c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005460:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8005464:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8005468:	eee6 7a26 	vfma.f32	s15, s12, s13
 800546c:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8005470:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8005474:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005478:	eee2 7a22 	vfma.f32	s15, s4, s5
 800547c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005480:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005484:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005488:	eee6 7a26 	vfma.f32	s15, s12, s13
 800548c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005490:	d896      	bhi.n	80053c0 <forward_lstm+0x8d8>
 8005492:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005496:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800549a:	4413      	add	r3, r2
 800549c:	2d00      	cmp	r5, #0
 800549e:	d076      	beq.n	800558e <forward_lstm+0xaa6>
 80054a0:	edd4 6a00 	vldr	s13, [r4]
 80054a4:	edd3 7a00 	vldr	s15, [r3]
 80054a8:	2d01      	cmp	r5, #1
 80054aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054ae:	d06e      	beq.n	800558e <forward_lstm+0xaa6>
 80054b0:	edd4 6a01 	vldr	s13, [r4, #4]
 80054b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80054b8:	2d02      	cmp	r5, #2
 80054ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054be:	d066      	beq.n	800558e <forward_lstm+0xaa6>
 80054c0:	edd4 6a02 	vldr	s13, [r4, #8]
 80054c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80054c8:	2d03      	cmp	r5, #3
 80054ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054ce:	d05e      	beq.n	800558e <forward_lstm+0xaa6>
 80054d0:	edd4 6a03 	vldr	s13, [r4, #12]
 80054d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80054d8:	2d04      	cmp	r5, #4
 80054da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054de:	d056      	beq.n	800558e <forward_lstm+0xaa6>
 80054e0:	edd4 6a04 	vldr	s13, [r4, #16]
 80054e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80054e8:	2d05      	cmp	r5, #5
 80054ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054ee:	d04e      	beq.n	800558e <forward_lstm+0xaa6>
 80054f0:	edd4 6a05 	vldr	s13, [r4, #20]
 80054f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80054f8:	2d06      	cmp	r5, #6
 80054fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054fe:	d046      	beq.n	800558e <forward_lstm+0xaa6>
 8005500:	edd4 6a06 	vldr	s13, [r4, #24]
 8005504:	edd3 7a06 	vldr	s15, [r3, #24]
 8005508:	2d07      	cmp	r5, #7
 800550a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800550e:	d03e      	beq.n	800558e <forward_lstm+0xaa6>
 8005510:	edd4 6a07 	vldr	s13, [r4, #28]
 8005514:	edd3 7a07 	vldr	s15, [r3, #28]
 8005518:	2d08      	cmp	r5, #8
 800551a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800551e:	d036      	beq.n	800558e <forward_lstm+0xaa6>
 8005520:	edd4 6a08 	vldr	s13, [r4, #32]
 8005524:	edd3 7a08 	vldr	s15, [r3, #32]
 8005528:	2d09      	cmp	r5, #9
 800552a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800552e:	d02e      	beq.n	800558e <forward_lstm+0xaa6>
 8005530:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8005534:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005538:	2d0a      	cmp	r5, #10
 800553a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800553e:	d026      	beq.n	800558e <forward_lstm+0xaa6>
 8005540:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8005544:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005548:	2d0b      	cmp	r5, #11
 800554a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800554e:	d01e      	beq.n	800558e <forward_lstm+0xaa6>
 8005550:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8005554:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005558:	2d0c      	cmp	r5, #12
 800555a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800555e:	d016      	beq.n	800558e <forward_lstm+0xaa6>
 8005560:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8005564:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005568:	f1b5 020d 	subs.w	r2, r5, #13
 800556c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005570:	d00d      	beq.n	800558e <forward_lstm+0xaa6>
 8005572:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8005576:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800557a:	2a01      	cmp	r2, #1
 800557c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005580:	d005      	beq.n	800558e <forward_lstm+0xaa6>
 8005582:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005586:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800558a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800558e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005592:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8005690 <forward_lstm+0xba8>
 8005596:	ed88 7a00 	vstr	s14, [r8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 8638 	beq.w	8006210 <forward_lstm+0x1728>
 80055a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055a4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80055a8:	3340      	adds	r3, #64	; 0x40
 80055aa:	3240      	adds	r2, #64	; 0x40
 80055ac:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80055b0:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 80055b4:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 80055b8:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80055bc:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 80055c0:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 80055c4:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 80055c8:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80055cc:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 80055d0:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 80055d4:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 80055d8:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 80055dc:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 80055e0:	ee67 7a85 	vmul.f32	s15, s15, s10
 80055e4:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 80055e8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80055ec:	3340      	adds	r3, #64	; 0x40
 80055ee:	3240      	adds	r2, #64	; 0x40
 80055f0:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 80055f4:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 80055f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80055fc:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8005600:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8005604:	eee4 7a06 	vfma.f32	s15, s8, s12
 8005608:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800560c:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8005610:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005614:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8005618:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 800561c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005620:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8005624:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8005628:	eee2 7a83 	vfma.f32	s15, s5, s6
 800562c:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8005630:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8005634:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005638:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 800563c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8005640:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005644:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8005648:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800564c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005650:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8005654:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8005658:	eee0 7a81 	vfma.f32	s15, s1, s2
 800565c:	4283      	cmp	r3, r0
 800565e:	eee1 7a82 	vfma.f32	s15, s3, s4
 8005662:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005666:	eee3 7a84 	vfma.f32	s15, s7, s8
 800566a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800566e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005672:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005676:	d199      	bne.n	80055ac <forward_lstm+0xac4>
 8005678:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800567c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005680:	189a      	adds	r2, r3, r2
 8005682:	2e00      	cmp	r6, #0
 8005684:	d07c      	beq.n	8005780 <forward_lstm+0xc98>
 8005686:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800568a:	4633      	mov	r3, r6
 800568c:	e002      	b.n	8005694 <forward_lstm+0xbac>
 800568e:	bf00      	nop
 8005690:	00000000 	.word	0x00000000
 8005694:	ed91 6a00 	vldr	s12, [r1]
 8005698:	edd2 7a00 	vldr	s15, [r2]
 800569c:	2b01      	cmp	r3, #1
 800569e:	eee6 6a27 	vfma.f32	s13, s12, s15
 80056a2:	d06d      	beq.n	8005780 <forward_lstm+0xc98>
 80056a4:	ed91 6a01 	vldr	s12, [r1, #4]
 80056a8:	edd2 7a01 	vldr	s15, [r2, #4]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	eee6 6a27 	vfma.f32	s13, s12, s15
 80056b2:	d065      	beq.n	8005780 <forward_lstm+0xc98>
 80056b4:	ed91 6a02 	vldr	s12, [r1, #8]
 80056b8:	edd2 7a02 	vldr	s15, [r2, #8]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	eee6 6a27 	vfma.f32	s13, s12, s15
 80056c2:	d05d      	beq.n	8005780 <forward_lstm+0xc98>
 80056c4:	ed91 6a03 	vldr	s12, [r1, #12]
 80056c8:	edd2 7a03 	vldr	s15, [r2, #12]
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	eee6 6a27 	vfma.f32	s13, s12, s15
 80056d2:	d055      	beq.n	8005780 <forward_lstm+0xc98>
 80056d4:	ed91 6a04 	vldr	s12, [r1, #16]
 80056d8:	edd2 7a04 	vldr	s15, [r2, #16]
 80056dc:	2b05      	cmp	r3, #5
 80056de:	eee6 6a27 	vfma.f32	s13, s12, s15
 80056e2:	d04d      	beq.n	8005780 <forward_lstm+0xc98>
 80056e4:	ed91 6a05 	vldr	s12, [r1, #20]
 80056e8:	edd2 7a05 	vldr	s15, [r2, #20]
 80056ec:	2b06      	cmp	r3, #6
 80056ee:	eee6 6a27 	vfma.f32	s13, s12, s15
 80056f2:	d045      	beq.n	8005780 <forward_lstm+0xc98>
 80056f4:	ed91 6a06 	vldr	s12, [r1, #24]
 80056f8:	edd2 7a06 	vldr	s15, [r2, #24]
 80056fc:	2b07      	cmp	r3, #7
 80056fe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005702:	d03d      	beq.n	8005780 <forward_lstm+0xc98>
 8005704:	ed91 6a07 	vldr	s12, [r1, #28]
 8005708:	edd2 7a07 	vldr	s15, [r2, #28]
 800570c:	2b08      	cmp	r3, #8
 800570e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005712:	d035      	beq.n	8005780 <forward_lstm+0xc98>
 8005714:	ed91 6a08 	vldr	s12, [r1, #32]
 8005718:	edd2 7a08 	vldr	s15, [r2, #32]
 800571c:	2b09      	cmp	r3, #9
 800571e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005722:	d02d      	beq.n	8005780 <forward_lstm+0xc98>
 8005724:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8005728:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800572c:	2b0a      	cmp	r3, #10
 800572e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005732:	d025      	beq.n	8005780 <forward_lstm+0xc98>
 8005734:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8005738:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800573c:	2b0b      	cmp	r3, #11
 800573e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005742:	d01d      	beq.n	8005780 <forward_lstm+0xc98>
 8005744:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8005748:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800574c:	2b0c      	cmp	r3, #12
 800574e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005752:	d015      	beq.n	8005780 <forward_lstm+0xc98>
 8005754:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8005758:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800575c:	3b0d      	subs	r3, #13
 800575e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005762:	d00d      	beq.n	8005780 <forward_lstm+0xc98>
 8005764:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8005768:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800576c:	2b01      	cmp	r3, #1
 800576e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005772:	d005      	beq.n	8005780 <forward_lstm+0xc98>
 8005774:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8005778:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800577c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005784:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005788:	f109 0904 	add.w	r9, r9, #4
 800578c:	ed88 7a00 	vstr	s14, [r8]
 8005790:	edd3 7a00 	vldr	s15, [r3]
 8005794:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005798:	ecb3 6a01 	vldmia	r3!, {s12}
 800579c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80057a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057a4:	ecf3 6a01 	vldmia	r3!, {s13}
 80057a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80057ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80057b8:	eca8 7a01 	vstmia	r8!, {s14}
 80057bc:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 8005690 <forward_lstm+0xba8>
 80057c0:	ed8e 8a00 	vstr	s16, [lr]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 851f 	beq.w	8006208 <forward_lstm+0x1720>
 80057ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ce:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80057d2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057da:	3340      	adds	r3, #64	; 0x40
 80057dc:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80057e0:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80057e4:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80057e8:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 80057ec:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 80057f0:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 80057f4:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80057f8:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 80057fc:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8005800:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8005804:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8005808:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 800580c:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8005810:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005814:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8005818:	eee6 7a26 	vfma.f32	s15, s12, s13
 800581c:	3910      	subs	r1, #16
 800581e:	290f      	cmp	r1, #15
 8005820:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8005824:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8005828:	eee5 7a86 	vfma.f32	s15, s11, s12
 800582c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005830:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005834:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8005838:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800583c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005840:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8005844:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8005848:	eee5 7a25 	vfma.f32	s15, s10, s11
 800584c:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8005850:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8005854:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005858:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 800585c:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8005860:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005864:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8005868:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800586c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005870:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8005874:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8005878:	eee5 7a25 	vfma.f32	s15, s10, s11
 800587c:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8005880:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8005884:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005888:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800588c:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8005890:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005894:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005898:	eee3 7a23 	vfma.f32	s15, s6, s7
 800589c:	eee4 7a24 	vfma.f32	s15, s8, s9
 80058a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80058a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80058a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058ac:	d896      	bhi.n	80057dc <forward_lstm+0xcf4>
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80058b6:	4413      	add	r3, r2
 80058b8:	2d00      	cmp	r5, #0
 80058ba:	d076      	beq.n	80059aa <forward_lstm+0xec2>
 80058bc:	edd4 6a00 	vldr	s13, [r4]
 80058c0:	edd3 7a00 	vldr	s15, [r3]
 80058c4:	2d01      	cmp	r5, #1
 80058c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80058ca:	d06e      	beq.n	80059aa <forward_lstm+0xec2>
 80058cc:	edd4 6a01 	vldr	s13, [r4, #4]
 80058d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80058d4:	2d02      	cmp	r5, #2
 80058d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80058da:	d066      	beq.n	80059aa <forward_lstm+0xec2>
 80058dc:	edd4 6a02 	vldr	s13, [r4, #8]
 80058e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80058e4:	2d03      	cmp	r5, #3
 80058e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80058ea:	d05e      	beq.n	80059aa <forward_lstm+0xec2>
 80058ec:	edd4 6a03 	vldr	s13, [r4, #12]
 80058f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80058f4:	2d04      	cmp	r5, #4
 80058f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80058fa:	d056      	beq.n	80059aa <forward_lstm+0xec2>
 80058fc:	edd4 6a04 	vldr	s13, [r4, #16]
 8005900:	edd3 7a04 	vldr	s15, [r3, #16]
 8005904:	2d05      	cmp	r5, #5
 8005906:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800590a:	d04e      	beq.n	80059aa <forward_lstm+0xec2>
 800590c:	edd4 6a05 	vldr	s13, [r4, #20]
 8005910:	edd3 7a05 	vldr	s15, [r3, #20]
 8005914:	2d06      	cmp	r5, #6
 8005916:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800591a:	d046      	beq.n	80059aa <forward_lstm+0xec2>
 800591c:	edd4 6a06 	vldr	s13, [r4, #24]
 8005920:	edd3 7a06 	vldr	s15, [r3, #24]
 8005924:	2d07      	cmp	r5, #7
 8005926:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800592a:	d03e      	beq.n	80059aa <forward_lstm+0xec2>
 800592c:	edd4 6a07 	vldr	s13, [r4, #28]
 8005930:	edd3 7a07 	vldr	s15, [r3, #28]
 8005934:	2d08      	cmp	r5, #8
 8005936:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800593a:	d036      	beq.n	80059aa <forward_lstm+0xec2>
 800593c:	edd4 6a08 	vldr	s13, [r4, #32]
 8005940:	edd3 7a08 	vldr	s15, [r3, #32]
 8005944:	2d09      	cmp	r5, #9
 8005946:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800594a:	d02e      	beq.n	80059aa <forward_lstm+0xec2>
 800594c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8005950:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005954:	2d0a      	cmp	r5, #10
 8005956:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800595a:	d026      	beq.n	80059aa <forward_lstm+0xec2>
 800595c:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8005960:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005964:	2d0b      	cmp	r5, #11
 8005966:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800596a:	d01e      	beq.n	80059aa <forward_lstm+0xec2>
 800596c:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8005970:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005974:	2d0c      	cmp	r5, #12
 8005976:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800597a:	d016      	beq.n	80059aa <forward_lstm+0xec2>
 800597c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8005980:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005984:	f1b5 020d 	subs.w	r2, r5, #13
 8005988:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800598c:	d00d      	beq.n	80059aa <forward_lstm+0xec2>
 800598e:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8005992:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005996:	2a01      	cmp	r2, #1
 8005998:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800599c:	d005      	beq.n	80059aa <forward_lstm+0xec2>
 800599e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80059a2:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80059a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80059aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059ae:	ed5f 6ac8 	vldr	s13, [pc, #-800]	; 8005690 <forward_lstm+0xba8>
 80059b2:	ed8e 7a00 	vstr	s14, [lr]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8420 	beq.w	80061fc <forward_lstm+0x1714>
 80059bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c0:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 80059c4:	3340      	adds	r3, #64	; 0x40
 80059c6:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80059ca:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 80059ce:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 80059d2:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80059d6:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 80059da:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 80059de:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 80059e2:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80059e6:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 80059ea:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 80059ee:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 80059f2:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 80059f6:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 80059fa:	ee67 7a85 	vmul.f32	s15, s15, s10
 80059fe:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8005a02:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005a06:	3340      	adds	r3, #64	; 0x40
 8005a08:	3240      	adds	r2, #64	; 0x40
 8005a0a:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8005a0e:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8005a12:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005a16:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8005a1a:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8005a1e:	eee4 7a06 	vfma.f32	s15, s8, s12
 8005a22:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8005a26:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8005a2a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005a2e:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8005a32:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8005a36:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005a3a:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8005a3e:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8005a42:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005a46:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8005a4a:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8005a4e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005a52:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8005a56:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8005a5a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005a5e:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8005a62:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8005a66:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005a6a:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8005a6e:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8005a72:	eee0 7a81 	vfma.f32	s15, s1, s2
 8005a76:	4283      	cmp	r3, r0
 8005a78:	eee1 7a82 	vfma.f32	s15, s3, s4
 8005a7c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005a80:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005a84:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005a88:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005a8c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005a90:	d199      	bne.n	80059c6 <forward_lstm+0xede>
 8005a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a96:	eb0b 0203 	add.w	r2, fp, r3
 8005a9a:	2e00      	cmp	r6, #0
 8005a9c:	d078      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005a9e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005aa2:	4633      	mov	r3, r6
 8005aa4:	ed91 6a00 	vldr	s12, [r1]
 8005aa8:	edd2 7a00 	vldr	s15, [r2]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005ab2:	d06d      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005ab4:	ed91 6a01 	vldr	s12, [r1, #4]
 8005ab8:	edd2 7a01 	vldr	s15, [r2, #4]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005ac2:	d065      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005ac4:	ed91 6a02 	vldr	s12, [r1, #8]
 8005ac8:	edd2 7a02 	vldr	s15, [r2, #8]
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005ad2:	d05d      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005ad4:	ed91 6a03 	vldr	s12, [r1, #12]
 8005ad8:	edd2 7a03 	vldr	s15, [r2, #12]
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005ae2:	d055      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005ae4:	ed91 6a04 	vldr	s12, [r1, #16]
 8005ae8:	edd2 7a04 	vldr	s15, [r2, #16]
 8005aec:	2b05      	cmp	r3, #5
 8005aee:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005af2:	d04d      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005af4:	ed91 6a05 	vldr	s12, [r1, #20]
 8005af8:	edd2 7a05 	vldr	s15, [r2, #20]
 8005afc:	2b06      	cmp	r3, #6
 8005afe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b02:	d045      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005b04:	ed91 6a06 	vldr	s12, [r1, #24]
 8005b08:	edd2 7a06 	vldr	s15, [r2, #24]
 8005b0c:	2b07      	cmp	r3, #7
 8005b0e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b12:	d03d      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005b14:	ed91 6a07 	vldr	s12, [r1, #28]
 8005b18:	edd2 7a07 	vldr	s15, [r2, #28]
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b22:	d035      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005b24:	ed91 6a08 	vldr	s12, [r1, #32]
 8005b28:	edd2 7a08 	vldr	s15, [r2, #32]
 8005b2c:	2b09      	cmp	r3, #9
 8005b2e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b32:	d02d      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005b34:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8005b38:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8005b3c:	2b0a      	cmp	r3, #10
 8005b3e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b42:	d025      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005b44:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8005b48:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8005b4c:	2b0b      	cmp	r3, #11
 8005b4e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b52:	d01d      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005b54:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8005b58:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8005b5c:	2b0c      	cmp	r3, #12
 8005b5e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b62:	d015      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005b64:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8005b68:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8005b6c:	3b0d      	subs	r3, #13
 8005b6e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b72:	d00d      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005b74:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8005b78:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b82:	d005      	beq.n	8005b90 <forward_lstm+0x10a8>
 8005b84:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8005b88:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005b8c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b94:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005b98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b9c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005ba0:	449a      	add	sl, r3
 8005ba2:	ed8e 7a00 	vstr	s14, [lr]
 8005ba6:	ecf2 7a01 	vldmia	r2!, {s15}
 8005baa:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8005bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bb2:	4411      	add	r1, r2
 8005bb4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8005bb8:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005bbc:	4419      	add	r1, r3
 8005bbe:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8005bc2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8005bc6:	4411      	add	r1, r2
 8005bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bcc:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8005bd0:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8005bd4:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8005bd8:	4419      	add	r1, r3
 8005bda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005bde:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8005be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be6:	bf88      	it	hi
 8005be8:	eeb0 7a68 	vmovhi.f32	s14, s17
 8005bec:	4563      	cmp	r3, ip
 8005bee:	ecae 7a01 	vstmia	lr!, {s14}
 8005bf2:	4493      	add	fp, r2
 8005bf4:	f47f a9c3 	bne.w	8004f7e <forward_lstm+0x496>
 8005bf8:	f8d7 80a8 	ldr.w	r8, [r7, #168]	; 0xa8
 8005bfc:	f8d7 a078 	ldr.w	sl, [r7, #120]	; 0x78
 8005c00:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8005c04:	4642      	mov	r2, r8
 8005c06:	4608      	mov	r0, r1
 8005c08:	ee19 3a90 	vmov	r3, s19
 8005c0c:	46a3      	mov	fp, r4
 8005c0e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8005c10:	47a0      	blx	r4
 8005c12:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8005c16:	4642      	mov	r2, r8
 8005c18:	4608      	mov	r0, r1
 8005c1a:	ee19 3a90 	vmov	r3, s19
 8005c1e:	47a0      	blx	r4
 8005c20:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8005c24:	4642      	mov	r2, r8
 8005c26:	4608      	mov	r0, r1
 8005c28:	ee1a 3a90 	vmov	r3, s21
 8005c2c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8005c2e:	47a0      	blx	r4
 8005c30:	1e6a      	subs	r2, r5, #1
 8005c32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c36:	1eaa      	subs	r2, r5, #2
 8005c38:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8005c3c:	1eea      	subs	r2, r5, #3
 8005c3e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005c42:	1f2a      	subs	r2, r5, #4
 8005c44:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8005c48:	1f6a      	subs	r2, r5, #5
 8005c4a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c4e:	1faa      	subs	r2, r5, #6
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8005c56:	e9d7 8120 	ldrd	r8, r1, [r7, #128]	; 0x80
 8005c5a:	1fea      	subs	r2, r5, #7
 8005c5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c60:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 8005c64:	f8d7 e0a4 	ldr.w	lr, [r7, #164]	; 0xa4
 8005c68:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 8005c6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c6e:	f8c7 60f0 	str.w	r6, [r7, #240]	; 0xf0
 8005c72:	f1a5 0208 	sub.w	r2, r5, #8
 8005c76:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8005c7a:	465c      	mov	r4, fp
 8005c7c:	461e      	mov	r6, r3
 8005c7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c82:	ecf8 7a01 	vldmia	r8!, {s15}
 8005c86:	ecb3 6a01 	vldmia	r3!, {s12}
 8005c8a:	ed9a 7a00 	vldr	s14, [sl]
 8005c8e:	ecfe 6a01 	vldmia	lr!, {s13}
 8005c92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c96:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005ca2:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8005fc0 <forward_lstm+0x14d8>
 8005ca6:	ecea 7a01 	vstmia	sl!, {s15}
 8005caa:	eca1 8a01 	vstmia	r1!, {s16}
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 82a2 	beq.w	80061f8 <forward_lstm+0x1710>
 8005cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cb8:	f8d7 b0dc 	ldr.w	fp, [r7, #220]	; 0xdc
 8005cbc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005cc0:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8005cc4:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8005cc8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005ccc:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8005cd0:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8005cd4:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8005cd8:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8005cdc:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8005ce0:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8005ce4:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8005ce8:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8005cec:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8005cf0:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8005cf4:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8005cf8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005cfc:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8005d00:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d04:	f1ab 0b10 	sub.w	fp, fp, #16
 8005d08:	f1bb 0f0f 	cmp.w	fp, #15
 8005d0c:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8005d10:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8005d14:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005d18:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005d1c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005d20:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8005d24:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8005d28:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005d2c:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8005d30:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8005d34:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005d38:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8005d3c:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8005d40:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d44:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8005d48:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8005d4c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005d50:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8005d54:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8005d58:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005d5c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8005d60:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8005d64:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005d68:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8005d6c:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8005d70:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d74:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8005d78:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8005d7c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005d80:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005d84:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005d88:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005d8c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005d90:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d98:	d894      	bhi.n	8005cc4 <forward_lstm+0x11dc>
 8005d9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d9e:	18c3      	adds	r3, r0, r3
 8005da0:	2d00      	cmp	r5, #0
 8005da2:	f000 8085 	beq.w	8005eb0 <forward_lstm+0x13c8>
 8005da6:	edd4 6a00 	vldr	s13, [r4]
 8005daa:	edd3 7a00 	vldr	s15, [r3]
 8005dae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005db2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005db6:	2a00      	cmp	r2, #0
 8005db8:	d07a      	beq.n	8005eb0 <forward_lstm+0x13c8>
 8005dba:	edd4 6a01 	vldr	s13, [r4, #4]
 8005dbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dc2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005dc6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005dca:	2a00      	cmp	r2, #0
 8005dcc:	d070      	beq.n	8005eb0 <forward_lstm+0x13c8>
 8005dce:	edd4 6a02 	vldr	s13, [r4, #8]
 8005dd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8005dd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005dda:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005dde:	2a00      	cmp	r2, #0
 8005de0:	d066      	beq.n	8005eb0 <forward_lstm+0x13c8>
 8005de2:	edd4 6a03 	vldr	s13, [r4, #12]
 8005de6:	edd3 7a03 	vldr	s15, [r3, #12]
 8005dea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005dee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005df2:	2a00      	cmp	r2, #0
 8005df4:	d05c      	beq.n	8005eb0 <forward_lstm+0x13c8>
 8005df6:	edd4 6a04 	vldr	s13, [r4, #16]
 8005dfa:	edd3 7a04 	vldr	s15, [r3, #16]
 8005dfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e06:	2a00      	cmp	r2, #0
 8005e08:	d052      	beq.n	8005eb0 <forward_lstm+0x13c8>
 8005e0a:	edd4 6a05 	vldr	s13, [r4, #20]
 8005e0e:	edd3 7a05 	vldr	s15, [r3, #20]
 8005e12:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e1a:	2a00      	cmp	r2, #0
 8005e1c:	d048      	beq.n	8005eb0 <forward_lstm+0x13c8>
 8005e1e:	edd4 6a06 	vldr	s13, [r4, #24]
 8005e22:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005e2a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e2e:	b3fa      	cbz	r2, 8005eb0 <forward_lstm+0x13c8>
 8005e30:	edd4 6a07 	vldr	s13, [r4, #28]
 8005e34:	edd3 7a07 	vldr	s15, [r3, #28]
 8005e38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e40:	b3b2      	cbz	r2, 8005eb0 <forward_lstm+0x13c8>
 8005e42:	edd4 6a08 	vldr	s13, [r4, #32]
 8005e46:	edd3 7a08 	vldr	s15, [r3, #32]
 8005e4a:	2d09      	cmp	r5, #9
 8005e4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e50:	d02e      	beq.n	8005eb0 <forward_lstm+0x13c8>
 8005e52:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8005e56:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005e5a:	2d0a      	cmp	r5, #10
 8005e5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e60:	d026      	beq.n	8005eb0 <forward_lstm+0x13c8>
 8005e62:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8005e66:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005e6a:	2d0b      	cmp	r5, #11
 8005e6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e70:	d01e      	beq.n	8005eb0 <forward_lstm+0x13c8>
 8005e72:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8005e76:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005e7a:	2d0c      	cmp	r5, #12
 8005e7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e80:	d016      	beq.n	8005eb0 <forward_lstm+0x13c8>
 8005e82:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8005e86:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005e8a:	f1b5 020d 	subs.w	r2, r5, #13
 8005e8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e92:	d00d      	beq.n	8005eb0 <forward_lstm+0x13c8>
 8005e94:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8005e98:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005e9c:	2a01      	cmp	r2, #1
 8005e9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005ea2:	d005      	beq.n	8005eb0 <forward_lstm+0x13c8>
 8005ea4:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005ea8:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8005eac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005eb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005eb4:	eddf 6a42 	vldr	s13, [pc, #264]	; 8005fc0 <forward_lstm+0x14d8>
 8005eb8:	ed01 7a01 	vstr	s14, [r1, #-4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8195 	beq.w	80061ec <forward_lstm+0x1704>
 8005ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec6:	f8d7 b0a8 	ldr.w	fp, [r7, #168]	; 0xa8
 8005eca:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005ece:	f10c 0340 	add.w	r3, ip, #64	; 0x40
 8005ed2:	ed13 5a0f 	vldr	s10, [r3, #-60]	; 0xffffffc4
 8005ed6:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005eda:	ed52 5a10 	vldr	s11, [r2, #-64]	; 0xffffffc0
 8005ede:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8005ee2:	ed12 4a0d 	vldr	s8, [r2, #-52]	; 0xffffffcc
 8005ee6:	ed52 4a0c 	vldr	s9, [r2, #-48]	; 0xffffffd0
 8005eea:	ed52 2a0a 	vldr	s5, [r2, #-40]	; 0xffffffd8
 8005eee:	ed13 3a0a 	vldr	s6, [r3, #-40]	; 0xffffffd8
 8005ef2:	ed52 3a09 	vldr	s7, [r2, #-36]	; 0xffffffdc
 8005ef6:	ed52 0a06 	vldr	s1, [r2, #-24]	; 0xffffffe8
 8005efa:	ed13 1a06 	vldr	s2, [r3, #-24]	; 0xffffffe8
 8005efe:	ed52 1a05 	vldr	s3, [r2, #-20]	; 0xffffffec
 8005f02:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8005f06:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005f0a:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 8005f0e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005f12:	f1ab 0b10 	sub.w	fp, fp, #16
 8005f16:	f1bb 0f0f 	cmp.w	fp, #15
 8005f1a:	ed53 5a0e 	vldr	s11, [r3, #-56]	; 0xffffffc8
 8005f1e:	ed13 6a0d 	vldr	s12, [r3, #-52]	; 0xffffffcc
 8005f22:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005f26:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005f2a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005f2e:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8005f32:	ed52 5a1b 	vldr	s11, [r2, #-108]	; 0xffffff94
 8005f36:	eee4 7a06 	vfma.f32	s15, s8, s12
 8005f3a:	ed13 6a1b 	vldr	s12, [r3, #-108]	; 0xffffff94
 8005f3e:	ed13 4a19 	vldr	s8, [r3, #-100]	; 0xffffff9c
 8005f42:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005f46:	ed52 4a18 	vldr	s9, [r2, #-96]	; 0xffffffa0
 8005f4a:	ed13 5a18 	vldr	s10, [r3, #-96]	; 0xffffffa0
 8005f4e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005f52:	ed52 5a17 	vldr	s11, [r2, #-92]	; 0xffffffa4
 8005f56:	ed13 6a17 	vldr	s12, [r3, #-92]	; 0xffffffa4
 8005f5a:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005f5e:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 8005f62:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 8005f66:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005f6a:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8005f6e:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8005f72:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005f76:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 8005f7a:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 8005f7e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005f82:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 8005f86:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 8005f8a:	eee0 7a81 	vfma.f32	s15, s1, s2
 8005f8e:	eee1 7a82 	vfma.f32	s15, s3, s4
 8005f92:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005f96:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005f9a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005f9e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005fa2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005fa6:	d894      	bhi.n	8005ed2 <forward_lstm+0x13ea>
 8005fa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fac:	eb0c 0203 	add.w	r2, ip, r3
 8005fb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d07b      	beq.n	80060b0 <forward_lstm+0x15c8>
 8005fb8:	f8d7 b0d0 	ldr.w	fp, [r7, #208]	; 0xd0
 8005fbc:	e002      	b.n	8005fc4 <forward_lstm+0x14dc>
 8005fbe:	bf00      	nop
 8005fc0:	00000000 	.word	0x00000000
 8005fc4:	ed9b 6a00 	vldr	s12, [fp]
 8005fc8:	edd2 7a00 	vldr	s15, [r2]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005fd2:	d06d      	beq.n	80060b0 <forward_lstm+0x15c8>
 8005fd4:	ed9b 6a01 	vldr	s12, [fp, #4]
 8005fd8:	edd2 7a01 	vldr	s15, [r2, #4]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005fe2:	d065      	beq.n	80060b0 <forward_lstm+0x15c8>
 8005fe4:	ed9b 6a02 	vldr	s12, [fp, #8]
 8005fe8:	edd2 7a02 	vldr	s15, [r2, #8]
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005ff2:	d05d      	beq.n	80060b0 <forward_lstm+0x15c8>
 8005ff4:	ed9b 6a03 	vldr	s12, [fp, #12]
 8005ff8:	edd2 7a03 	vldr	s15, [r2, #12]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006002:	d055      	beq.n	80060b0 <forward_lstm+0x15c8>
 8006004:	ed9b 6a04 	vldr	s12, [fp, #16]
 8006008:	edd2 7a04 	vldr	s15, [r2, #16]
 800600c:	2b05      	cmp	r3, #5
 800600e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006012:	d04d      	beq.n	80060b0 <forward_lstm+0x15c8>
 8006014:	ed9b 6a05 	vldr	s12, [fp, #20]
 8006018:	edd2 7a05 	vldr	s15, [r2, #20]
 800601c:	2b06      	cmp	r3, #6
 800601e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006022:	d045      	beq.n	80060b0 <forward_lstm+0x15c8>
 8006024:	ed9b 6a06 	vldr	s12, [fp, #24]
 8006028:	edd2 7a06 	vldr	s15, [r2, #24]
 800602c:	2b07      	cmp	r3, #7
 800602e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006032:	d03d      	beq.n	80060b0 <forward_lstm+0x15c8>
 8006034:	ed9b 6a07 	vldr	s12, [fp, #28]
 8006038:	edd2 7a07 	vldr	s15, [r2, #28]
 800603c:	2b08      	cmp	r3, #8
 800603e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006042:	d035      	beq.n	80060b0 <forward_lstm+0x15c8>
 8006044:	ed9b 6a08 	vldr	s12, [fp, #32]
 8006048:	edd2 7a08 	vldr	s15, [r2, #32]
 800604c:	2b09      	cmp	r3, #9
 800604e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006052:	d02d      	beq.n	80060b0 <forward_lstm+0x15c8>
 8006054:	ed9b 6a09 	vldr	s12, [fp, #36]	; 0x24
 8006058:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800605c:	2b0a      	cmp	r3, #10
 800605e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006062:	d025      	beq.n	80060b0 <forward_lstm+0x15c8>
 8006064:	ed9b 6a0a 	vldr	s12, [fp, #40]	; 0x28
 8006068:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800606c:	2b0b      	cmp	r3, #11
 800606e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006072:	d01d      	beq.n	80060b0 <forward_lstm+0x15c8>
 8006074:	ed9b 6a0b 	vldr	s12, [fp, #44]	; 0x2c
 8006078:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800607c:	2b0c      	cmp	r3, #12
 800607e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006082:	d015      	beq.n	80060b0 <forward_lstm+0x15c8>
 8006084:	ed9b 6a0c 	vldr	s12, [fp, #48]	; 0x30
 8006088:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800608c:	3b0d      	subs	r3, #13
 800608e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006092:	d00d      	beq.n	80060b0 <forward_lstm+0x15c8>
 8006094:	ed9b 6a0d 	vldr	s12, [fp, #52]	; 0x34
 8006098:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800609c:	2b01      	cmp	r3, #1
 800609e:	eee6 6a27 	vfma.f32	s13, s12, s15
 80060a2:	d005      	beq.n	80060b0 <forward_lstm+0x15c8>
 80060a4:	ed9b 6a0e 	vldr	s12, [fp, #56]	; 0x38
 80060a8:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80060ac:	eee6 6a27 	vfma.f32	s13, s12, s15
 80060b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060b4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80060b8:	4418      	add	r0, r3
 80060ba:	ed01 7a01 	vstr	s14, [r1, #-4]
 80060be:	ecb6 6a01 	vldmia	r6!, {s12}
 80060c2:	ecf9 7a01 	vldmia	r9!, {s15}
 80060c6:	ed5a 6a01 	vldr	s13, [sl, #-4]
 80060ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060ce:	eee6 7a26 	vfma.f32	s15, s12, s13
 80060d2:	449c      	add	ip, r3
 80060d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060dc:	459e      	cmp	lr, r3
 80060de:	ed01 7a01 	vstr	s14, [r1, #-4]
 80060e2:	f47f adcc 	bne.w	8005c7e <forward_lstm+0x1196>
 80060e6:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 80060ea:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80060ec:	f8d7 60f0 	ldr.w	r6, [r7, #240]	; 0xf0
 80060f0:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 80060f4:	4608      	mov	r0, r1
 80060f6:	ee19 3a90 	vmov	r3, s19
 80060fa:	462a      	mov	r2, r5
 80060fc:	47a0      	blx	r4
 80060fe:	ee1a 3a10 	vmov	r3, s20
 8006102:	462a      	mov	r2, r5
 8006104:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8006108:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800610a:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 800610e:	47a0      	blx	r4
 8006110:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006118:	6979      	ldr	r1, [r7, #20]
 800611a:	ecf3 7a01 	vldmia	r3!, {s15}
 800611e:	ed92 7a00 	vldr	s14, [r2]
 8006122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006126:	428b      	cmp	r3, r1
 8006128:	ece2 7a01 	vstmia	r2!, {s15}
 800612c:	d1f5      	bne.n	800611a <forward_lstm+0x1632>
 800612e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006132:	899b      	ldrh	r3, [r3, #12]
 8006134:	b163      	cbz	r3, 8006150 <forward_lstm+0x1668>
 8006136:	e9d7 9503 	ldrd	r9, r5, [r7, #12]
 800613a:	2400      	movs	r4, #0
 800613c:	46a8      	mov	r8, r5
 800613e:	f859 5f04 	ldr.w	r5, [r9, #4]!
 8006142:	3401      	adds	r4, #1
 8006144:	2d00      	cmp	r5, #0
 8006146:	d13e      	bne.n	80061c6 <forward_lstm+0x16de>
 8006148:	42a3      	cmp	r3, r4
 800614a:	f108 0804 	add.w	r8, r8, #4
 800614e:	dcf6      	bgt.n	800613e <forward_lstm+0x1656>
 8006150:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006152:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006156:	428a      	cmp	r2, r1
 8006158:	f340 809d 	ble.w	8006296 <forward_lstm+0x17ae>
 800615c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006160:	69b9      	ldr	r1, [r7, #24]
 8006162:	440a      	add	r2, r1
 8006164:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006168:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800616c:	2a00      	cmp	r2, #0
 800616e:	f2c0 8092 	blt.w	8006296 <forward_lstm+0x17ae>
 8006172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006176:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800617a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800617e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006182:	f7fe be6b 	b.w	8004e5c <forward_lstm+0x374>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4629      	mov	r1, r5
 800618a:	69d8      	ldr	r0, [r3, #28]
 800618c:	f000 fa66 	bl	800665c <st_int8_copy>
 8006190:	ee19 2a10 	vmov	r2, s18
 8006194:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006198:	2000      	movs	r0, #0
 800619a:	f000 fa03 	bl	80065a4 <st_int8_fill>
 800619e:	f7fe bda8 	b.w	8004cf2 <forward_lstm+0x20a>
 80061a2:	ee19 2a10 	vmov	r2, s18
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 f9fc 	bl	80065a4 <st_int8_fill>
 80061ac:	ee19 2a10 	vmov	r2, s18
 80061b0:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80061b4:	4648      	mov	r0, r9
 80061b6:	f1b9 0f00 	cmp.w	r9, #0
 80061ba:	f47e ad91 	bne.w	8004ce0 <forward_lstm+0x1f8>
 80061be:	f000 f9f1 	bl	80065a4 <st_int8_fill>
 80061c2:	f7fe bd8f 	b.w	8004ce4 <forward_lstm+0x1fc>
 80061c6:	f8d8 a000 	ldr.w	sl, [r8]
 80061ca:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80061ce:	ee19 2a10 	vmov	r2, s18
 80061d2:	4651      	mov	r1, sl
 80061d4:	f000 fa42 	bl	800665c <st_int8_copy>
 80061d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061dc:	899b      	ldrh	r3, [r3, #12]
 80061de:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 80061e2:	42a3      	cmp	r3, r4
 80061e4:	f848 5b04 	str.w	r5, [r8], #4
 80061e8:	dca9      	bgt.n	800613e <forward_lstm+0x1656>
 80061ea:	e7b1      	b.n	8006150 <forward_lstm+0x1668>
 80061ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061f0:	f8d7 b0fc 	ldr.w	fp, [r7, #252]	; 0xfc
 80061f4:	4662      	mov	r2, ip
 80061f6:	e6e5      	b.n	8005fc4 <forward_lstm+0x14dc>
 80061f8:	4603      	mov	r3, r0
 80061fa:	e5d1      	b.n	8005da0 <forward_lstm+0x12b8>
 80061fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006200:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8006204:	465a      	mov	r2, fp
 8006206:	e44d      	b.n	8005aa4 <forward_lstm+0xfbc>
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620c:	f7ff bb54 	b.w	80058b8 <forward_lstm+0xdd0>
 8006210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006214:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8006218:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800621c:	f7ff ba3a 	b.w	8005694 <forward_lstm+0xbac>
 8006220:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006224:	f7ff b93a 	b.w	800549c <forward_lstm+0x9b4>
 8006228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800622c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8006230:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8006234:	f7ff b822 	b.w	800527c <forward_lstm+0x794>
 8006238:	f8d7 50dc 	ldr.w	r5, [r7, #220]	; 0xdc
 800623c:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8006240:	4653      	mov	r3, sl
 8006242:	f7fe bf23 	b.w	800508c <forward_lstm+0x5a4>
 8006246:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 800624a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800624c:	ee19 3a90 	vmov	r3, s19
 8006250:	4608      	mov	r0, r1
 8006252:	4690      	mov	r8, r2
 8006254:	47a0      	blx	r4
 8006256:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 800625a:	ee19 3a90 	vmov	r3, s19
 800625e:	4642      	mov	r2, r8
 8006260:	4608      	mov	r0, r1
 8006262:	47a0      	blx	r4
 8006264:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8006268:	ee1a 3a90 	vmov	r3, s21
 800626c:	4642      	mov	r2, r8
 800626e:	4608      	mov	r0, r1
 8006270:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8006272:	47a8      	blx	r5
 8006274:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8006278:	ee19 3a90 	vmov	r3, s19
 800627c:	4642      	mov	r2, r8
 800627e:	4608      	mov	r0, r1
 8006280:	47a0      	blx	r4
 8006282:	ee1a 3a10 	vmov	r3, s20
 8006286:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8006288:	4642      	mov	r2, r8
 800628a:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 800628e:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8006292:	47a0      	blx	r4
 8006294:	e74b      	b.n	800612e <forward_lstm+0x1646>
 8006296:	b353      	cbz	r3, 80062ee <forward_lstm+0x1806>
 8006298:	e9d7 5403 	ldrd	r5, r4, [r7, #12]
 800629c:	f8d7 8090 	ldr.w	r8, [r7, #144]	; 0x90
 80062a0:	f8d7 9094 	ldr.w	r9, [r7, #148]	; 0x94
 80062a4:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80062a8:	ee19 ba10 	vmov	fp, s18
 80062ac:	2600      	movs	r6, #0
 80062ae:	e00b      	b.n	80062c8 <forward_lstm+0x17e0>
 80062b0:	6821      	ldr	r1, [r4, #0]
 80062b2:	465a      	mov	r2, fp
 80062b4:	4648      	mov	r0, r9
 80062b6:	f000 f9d1 	bl	800665c <st_int8_copy>
 80062ba:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80062be:	3601      	adds	r6, #1
 80062c0:	42b3      	cmp	r3, r6
 80062c2:	f104 0404 	add.w	r4, r4, #4
 80062c6:	dd12      	ble.n	80062ee <forward_lstm+0x1806>
 80062c8:	f855 2f04 	ldr.w	r2, [r5, #4]!
 80062cc:	2a00      	cmp	r2, #0
 80062ce:	d1f6      	bne.n	80062be <forward_lstm+0x17d6>
 80062d0:	3b01      	subs	r3, #1
 80062d2:	42b3      	cmp	r3, r6
 80062d4:	d1ec      	bne.n	80062b0 <forward_lstm+0x17c8>
 80062d6:	f89a 303d 	ldrb.w	r3, [sl, #61]	; 0x3d
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0e8      	beq.n	80062b0 <forward_lstm+0x17c8>
 80062de:	6821      	ldr	r1, [r4, #0]
 80062e0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80062e2:	465a      	mov	r2, fp
 80062e4:	f000 f9ba 	bl	800665c <st_int8_copy>
 80062e8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80062ec:	e7e7      	b.n	80062be <forward_lstm+0x17d6>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	b18b      	cbz	r3, 8006316 <forward_lstm+0x182e>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	69dc      	ldr	r4, [r3, #28]
 80062f6:	b174      	cbz	r4, 8006316 <forward_lstm+0x182e>
 80062f8:	ee19 5a10 	vmov	r5, s18
 80062fc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80062fe:	ee19 2a10 	vmov	r2, s18
 8006302:	4621      	mov	r1, r4
 8006304:	f000 f9aa 	bl	800665c <st_int8_copy>
 8006308:	ee19 2a10 	vmov	r2, s18
 800630c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006310:	1961      	adds	r1, r4, r5
 8006312:	f000 f9a3 	bl	800665c <st_int8_copy>
 8006316:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 800631a:	46bd      	mov	sp, r7
 800631c:	ecbd 8b06 	vpop	{d8-d10}
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006328:	2301      	movs	r3, #1
 800632a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800632c:	4613      	mov	r3, r2
 800632e:	f7fe bd00 	b.w	8004d32 <forward_lstm+0x24a>
 8006332:	ee0a 0a10 	vmov	s20, r0
 8006336:	ee09 0a90 	vmov	s19, r0
 800633a:	ee0a 0a90 	vmov	s21, r0
 800633e:	4681      	mov	r9, r0
 8006340:	f7fe bc56 	b.w	8004bf0 <forward_lstm+0x108>
 8006344:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8006348:	4683      	mov	fp, r0
 800634a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800634e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8006352:	f7fe bbf4 	b.w	8004b3e <forward_lstm+0x56>
 8006356:	2300      	movs	r3, #0
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	deff      	udf	#255	; 0xff

0800635c <forward_lite_dense_if32of32wf32>:
 800635c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006360:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8006364:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8006368:	4287      	cmp	r7, r0
 800636a:	f240 8106 	bls.w	800657a <forward_lite_dense_if32of32wf32+0x21e>
 800636e:	f1a6 0810 	sub.w	r8, r6, #16
 8006372:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8006376:	f108 0801 	add.w	r8, r8, #1
 800637a:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800637e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8006382:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8006386:	4605      	mov	r5, r0
 8006388:	f006 0a0f 	and.w	sl, r6, #15
 800638c:	2e0f      	cmp	r6, #15
 800638e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80065a0 <forward_lite_dense_if32of32wf32+0x244>
 8006392:	f240 8101 	bls.w	8006598 <forward_lite_dense_if32of32wf32+0x23c>
 8006396:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800639a:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800639e:	46b6      	mov	lr, r6
 80063a0:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 80063a4:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 80063a8:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 80063ac:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 80063b0:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 80063b4:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 80063b8:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 80063bc:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 80063c0:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 80063c4:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 80063c8:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80063cc:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80063d0:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80063d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80063d8:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80063dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80063e0:	f1ae 0e10 	sub.w	lr, lr, #16
 80063e4:	f1be 0f0f 	cmp.w	lr, #15
 80063e8:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 80063ec:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 80063f0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80063f4:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80063f8:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80063fc:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8006400:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8006404:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8006408:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800640c:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8006410:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006414:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8006418:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800641c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006420:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8006424:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8006428:	eee3 7a23 	vfma.f32	s15, s6, s7
 800642c:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8006430:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8006434:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006438:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800643c:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8006440:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006444:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8006448:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800644c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006450:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8006454:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8006458:	eee1 7a21 	vfma.f32	s15, s2, s3
 800645c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006460:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006464:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006468:	eee5 7a25 	vfma.f32	s15, s10, s11
 800646c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006474:	d894      	bhi.n	80063a0 <forward_lite_dense_if32of32wf32+0x44>
 8006476:	eb02 0e0b 	add.w	lr, r2, fp
 800647a:	4654      	mov	r4, sl
 800647c:	46c4      	mov	ip, r8
 800647e:	2c00      	cmp	r4, #0
 8006480:	d075      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 8006482:	eddc 6a00 	vldr	s13, [ip]
 8006486:	edde 7a00 	vldr	s15, [lr]
 800648a:	2c01      	cmp	r4, #1
 800648c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006490:	d06d      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 8006492:	eddc 6a01 	vldr	s13, [ip, #4]
 8006496:	edde 7a01 	vldr	s15, [lr, #4]
 800649a:	2c02      	cmp	r4, #2
 800649c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80064a0:	d065      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 80064a2:	eddc 6a02 	vldr	s13, [ip, #8]
 80064a6:	edde 7a02 	vldr	s15, [lr, #8]
 80064aa:	2c03      	cmp	r4, #3
 80064ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80064b0:	d05d      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 80064b2:	eddc 6a03 	vldr	s13, [ip, #12]
 80064b6:	edde 7a03 	vldr	s15, [lr, #12]
 80064ba:	2c04      	cmp	r4, #4
 80064bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80064c0:	d055      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 80064c2:	eddc 6a04 	vldr	s13, [ip, #16]
 80064c6:	edde 7a04 	vldr	s15, [lr, #16]
 80064ca:	2c05      	cmp	r4, #5
 80064cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80064d0:	d04d      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 80064d2:	eddc 6a05 	vldr	s13, [ip, #20]
 80064d6:	edde 7a05 	vldr	s15, [lr, #20]
 80064da:	2c06      	cmp	r4, #6
 80064dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80064e0:	d045      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 80064e2:	eddc 6a06 	vldr	s13, [ip, #24]
 80064e6:	edde 7a06 	vldr	s15, [lr, #24]
 80064ea:	2c07      	cmp	r4, #7
 80064ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80064f0:	d03d      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 80064f2:	eddc 6a07 	vldr	s13, [ip, #28]
 80064f6:	edde 7a07 	vldr	s15, [lr, #28]
 80064fa:	2c08      	cmp	r4, #8
 80064fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006500:	d035      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 8006502:	eddc 6a08 	vldr	s13, [ip, #32]
 8006506:	edde 7a08 	vldr	s15, [lr, #32]
 800650a:	2c09      	cmp	r4, #9
 800650c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006510:	d02d      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 8006512:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8006516:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800651a:	2c0a      	cmp	r4, #10
 800651c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006520:	d025      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 8006522:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8006526:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800652a:	2c0b      	cmp	r4, #11
 800652c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006530:	d01d      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 8006532:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8006536:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800653a:	2c0c      	cmp	r4, #12
 800653c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006540:	d015      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 8006542:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8006546:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800654a:	3c0d      	subs	r4, #13
 800654c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006550:	d00d      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 8006552:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8006556:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800655a:	2c01      	cmp	r4, #1
 800655c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006560:	d005      	beq.n	800656e <forward_lite_dense_if32of32wf32+0x212>
 8006562:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8006566:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800656a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800656e:	444a      	add	r2, r9
 8006570:	eca5 7a01 	vstmia	r5!, {s14}
 8006574:	42af      	cmp	r7, r5
 8006576:	f63f af09 	bhi.w	800638c <forward_lite_dense_if32of32wf32+0x30>
 800657a:	b15b      	cbz	r3, 8006594 <forward_lite_dense_if32of32wf32+0x238>
 800657c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800657e:	b14a      	cbz	r2, 8006594 <forward_lite_dense_if32of32wf32+0x238>
 8006580:	edd0 7a00 	vldr	s15, [r0]
 8006584:	ecb3 7a01 	vldmia	r3!, {s14}
 8006588:	ee77 7a87 	vadd.f32	s15, s15, s14
 800658c:	ece0 7a01 	vstmia	r0!, {s15}
 8006590:	4287      	cmp	r7, r0
 8006592:	d1f5      	bne.n	8006580 <forward_lite_dense_if32of32wf32+0x224>
 8006594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006598:	4634      	mov	r4, r6
 800659a:	4696      	mov	lr, r2
 800659c:	468c      	mov	ip, r1
 800659e:	e76e      	b.n	800647e <forward_lite_dense_if32of32wf32+0x122>
 80065a0:	00000000 	.word	0x00000000

080065a4 <st_int8_fill>:
 80065a4:	b510      	push	{r4, lr}
 80065a6:	b2c3      	uxtb	r3, r0
 80065a8:	0204      	lsls	r4, r0, #8
 80065aa:	b2a4      	uxth	r4, r4
 80065ac:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80065b0:	4323      	orrs	r3, r4
 80065b2:	0404      	lsls	r4, r0, #16
 80065b4:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 80065b8:	431c      	orrs	r4, r3
 80065ba:	078b      	lsls	r3, r1, #30
 80065bc:	468c      	mov	ip, r1
 80065be:	d007      	beq.n	80065d0 <st_int8_fill+0x2c>
 80065c0:	b3a2      	cbz	r2, 800662c <st_int8_fill+0x88>
 80065c2:	f80c 0b01 	strb.w	r0, [ip], #1
 80065c6:	f01c 0f03 	tst.w	ip, #3
 80065ca:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80065ce:	d1f7      	bne.n	80065c0 <st_int8_fill+0x1c>
 80065d0:	0911      	lsrs	r1, r2, #4
 80065d2:	d03e      	beq.n	8006652 <st_int8_fill+0xae>
 80065d4:	1e4b      	subs	r3, r1, #1
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d929      	bls.n	800662e <st_int8_fill+0x8a>
 80065da:	f01c 0f07 	tst.w	ip, #7
 80065de:	d126      	bne.n	800662e <st_int8_fill+0x8a>
 80065e0:	f10c 0310 	add.w	r3, ip, #16
 80065e4:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80065e8:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80065ec:	e943 4404 	strd	r4, r4, [r3, #-16]
 80065f0:	e943 4402 	strd	r4, r4, [r3, #-8]
 80065f4:	3310      	adds	r3, #16
 80065f6:	428b      	cmp	r3, r1
 80065f8:	d1f8      	bne.n	80065ec <st_int8_fill+0x48>
 80065fa:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80065fe:	44f4      	add	ip, lr
 8006600:	f002 0203 	and.w	r2, r2, #3
 8006604:	b15b      	cbz	r3, 800661e <st_int8_fill+0x7a>
 8006606:	1e59      	subs	r1, r3, #1
 8006608:	f8cc 4000 	str.w	r4, [ip]
 800660c:	d005      	beq.n	800661a <st_int8_fill+0x76>
 800660e:	2901      	cmp	r1, #1
 8006610:	f8cc 4004 	str.w	r4, [ip, #4]
 8006614:	bf18      	it	ne
 8006616:	f8cc 4008 	strne.w	r4, [ip, #8]
 800661a:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800661e:	b12a      	cbz	r2, 800662c <st_int8_fill+0x88>
 8006620:	4601      	mov	r1, r0
 8006622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006626:	4660      	mov	r0, ip
 8006628:	f000 bb25 	b.w	8006c76 <memset>
 800662c:	bd10      	pop	{r4, pc}
 800662e:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8006632:	4663      	mov	r3, ip
 8006634:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8006638:	601c      	str	r4, [r3, #0]
 800663a:	605c      	str	r4, [r3, #4]
 800663c:	609c      	str	r4, [r3, #8]
 800663e:	60dc      	str	r4, [r3, #12]
 8006640:	3310      	adds	r3, #16
 8006642:	4299      	cmp	r1, r3
 8006644:	d1f8      	bne.n	8006638 <st_int8_fill+0x94>
 8006646:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800664a:	44f4      	add	ip, lr
 800664c:	f002 0203 	and.w	r2, r2, #3
 8006650:	e7d8      	b.n	8006604 <st_int8_fill+0x60>
 8006652:	0893      	lsrs	r3, r2, #2
 8006654:	f002 0203 	and.w	r2, r2, #3
 8006658:	e7d4      	b.n	8006604 <st_int8_fill+0x60>
 800665a:	bf00      	nop

0800665c <st_int8_copy>:
 800665c:	4288      	cmp	r0, r1
 800665e:	d057      	beq.n	8006710 <st_int8_copy+0xb4>
 8006660:	2a00      	cmp	r2, #0
 8006662:	d055      	beq.n	8006710 <st_int8_copy+0xb4>
 8006664:	4288      	cmp	r0, r1
 8006666:	d354      	bcc.n	8006712 <st_int8_copy+0xb6>
 8006668:	078b      	lsls	r3, r1, #30
 800666a:	d102      	bne.n	8006672 <st_int8_copy+0x16>
 800666c:	e009      	b.n	8006682 <st_int8_copy+0x26>
 800666e:	2a00      	cmp	r2, #0
 8006670:	d05c      	beq.n	800672c <st_int8_copy+0xd0>
 8006672:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8006676:	f801 3b01 	strb.w	r3, [r1], #1
 800667a:	078b      	lsls	r3, r1, #30
 800667c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006680:	d1f5      	bne.n	800666e <st_int8_copy+0x12>
 8006682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006686:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800668a:	d069      	beq.n	8006760 <st_int8_copy+0x104>
 800668c:	ea41 0300 	orr.w	r3, r1, r0
 8006690:	075b      	lsls	r3, r3, #29
 8006692:	d14c      	bne.n	800672e <st_int8_copy+0xd2>
 8006694:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8006698:	2b01      	cmp	r3, #1
 800669a:	d948      	bls.n	800672e <st_int8_copy+0xd2>
 800669c:	f100 0310 	add.w	r3, r0, #16
 80066a0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80066a4:	f101 0c10 	add.w	ip, r1, #16
 80066a8:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80066ac:	ed13 6b04 	vldr	d6, [r3, #-16]
 80066b0:	ed13 7b02 	vldr	d7, [r3, #-8]
 80066b4:	3310      	adds	r3, #16
 80066b6:	4573      	cmp	r3, lr
 80066b8:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80066bc:	ed0c 7b02 	vstr	d7, [ip, #-8]
 80066c0:	f10c 0c10 	add.w	ip, ip, #16
 80066c4:	d1f2      	bne.n	80066ac <st_int8_copy+0x50>
 80066c6:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80066ca:	4421      	add	r1, r4
 80066cc:	4420      	add	r0, r4
 80066ce:	f002 0203 	and.w	r2, r2, #3
 80066d2:	b16b      	cbz	r3, 80066f0 <st_int8_copy+0x94>
 80066d4:	6804      	ldr	r4, [r0, #0]
 80066d6:	600c      	str	r4, [r1, #0]
 80066d8:	1e5c      	subs	r4, r3, #1
 80066da:	d005      	beq.n	80066e8 <st_int8_copy+0x8c>
 80066dc:	6845      	ldr	r5, [r0, #4]
 80066de:	604d      	str	r5, [r1, #4]
 80066e0:	2c01      	cmp	r4, #1
 80066e2:	bf1c      	itt	ne
 80066e4:	6884      	ldrne	r4, [r0, #8]
 80066e6:	608c      	strne	r4, [r1, #8]
 80066e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80066ec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80066f0:	b162      	cbz	r2, 800670c <st_int8_copy+0xb0>
 80066f2:	f990 3000 	ldrsb.w	r3, [r0]
 80066f6:	700b      	strb	r3, [r1, #0]
 80066f8:	3a01      	subs	r2, #1
 80066fa:	d007      	beq.n	800670c <st_int8_copy+0xb0>
 80066fc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8006700:	704b      	strb	r3, [r1, #1]
 8006702:	2a01      	cmp	r2, #1
 8006704:	bf1c      	itt	ne
 8006706:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800670a:	708b      	strbne	r3, [r1, #2]
 800670c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006710:	4770      	bx	lr
 8006712:	1883      	adds	r3, r0, r2
 8006714:	428b      	cmp	r3, r1
 8006716:	d9a7      	bls.n	8006668 <st_int8_copy+0xc>
 8006718:	4283      	cmp	r3, r0
 800671a:	440a      	add	r2, r1
 800671c:	d9f8      	bls.n	8006710 <st_int8_copy+0xb4>
 800671e:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8006722:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006726:	4283      	cmp	r3, r0
 8006728:	d1f9      	bne.n	800671e <st_int8_copy+0xc2>
 800672a:	4770      	bx	lr
 800672c:	4770      	bx	lr
 800672e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006732:	460b      	mov	r3, r1
 8006734:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8006738:	4684      	mov	ip, r0
 800673a:	f8dc 7000 	ldr.w	r7, [ip]
 800673e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006742:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8006746:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800674a:	f8c3 800c 	str.w	r8, [r3, #12]
 800674e:	601f      	str	r7, [r3, #0]
 8006750:	605e      	str	r6, [r3, #4]
 8006752:	609d      	str	r5, [r3, #8]
 8006754:	3310      	adds	r3, #16
 8006756:	459e      	cmp	lr, r3
 8006758:	f10c 0c10 	add.w	ip, ip, #16
 800675c:	d1ed      	bne.n	800673a <st_int8_copy+0xde>
 800675e:	e7b2      	b.n	80066c6 <st_int8_copy+0x6a>
 8006760:	0893      	lsrs	r3, r2, #2
 8006762:	f002 0203 	and.w	r2, r2, #3
 8006766:	e7b4      	b.n	80066d2 <st_int8_copy+0x76>

08006768 <ai_array_to_buffer_fmt>:
 8006768:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800676c:	2b02      	cmp	r3, #2
 800676e:	d050      	beq.n	8006812 <ai_array_to_buffer_fmt+0xaa>
 8006770:	4b2a      	ldr	r3, [pc, #168]	; (800681c <ai_array_to_buffer_fmt+0xb4>)
 8006772:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8006776:	429a      	cmp	r2, r3
 8006778:	d00b      	beq.n	8006792 <ai_array_to_buffer_fmt+0x2a>
 800677a:	dc1c      	bgt.n	80067b6 <ai_array_to_buffer_fmt+0x4e>
 800677c:	4b28      	ldr	r3, [pc, #160]	; (8006820 <ai_array_to_buffer_fmt+0xb8>)
 800677e:	429a      	cmp	r2, r3
 8006780:	d007      	beq.n	8006792 <ai_array_to_buffer_fmt+0x2a>
 8006782:	dd0b      	ble.n	800679c <ai_array_to_buffer_fmt+0x34>
 8006784:	4b27      	ldr	r3, [pc, #156]	; (8006824 <ai_array_to_buffer_fmt+0xbc>)
 8006786:	429a      	cmp	r2, r3
 8006788:	d003      	beq.n	8006792 <ai_array_to_buffer_fmt+0x2a>
 800678a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800678e:	429a      	cmp	r2, r3
 8006790:	d131      	bne.n	80067f6 <ai_array_to_buffer_fmt+0x8e>
 8006792:	4613      	mov	r3, r2
 8006794:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006798:	4318      	orrs	r0, r3
 800679a:	4770      	bx	lr
 800679c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d0f6      	beq.n	8006792 <ai_array_to_buffer_fmt+0x2a>
 80067a4:	dd2c      	ble.n	8006800 <ai_array_to_buffer_fmt+0x98>
 80067a6:	4b20      	ldr	r3, [pc, #128]	; (8006828 <ai_array_to_buffer_fmt+0xc0>)
 80067a8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80067ac:	429a      	cmp	r2, r3
 80067ae:	bf18      	it	ne
 80067b0:	2340      	movne	r3, #64	; 0x40
 80067b2:	4318      	orrs	r0, r3
 80067b4:	4770      	bx	lr
 80067b6:	4b1d      	ldr	r3, [pc, #116]	; (800682c <ai_array_to_buffer_fmt+0xc4>)
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d0ea      	beq.n	8006792 <ai_array_to_buffer_fmt+0x2a>
 80067bc:	dd0e      	ble.n	80067dc <ai_array_to_buffer_fmt+0x74>
 80067be:	4b1c      	ldr	r3, [pc, #112]	; (8006830 <ai_array_to_buffer_fmt+0xc8>)
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d0e6      	beq.n	8006792 <ai_array_to_buffer_fmt+0x2a>
 80067c4:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d0e2      	beq.n	8006792 <ai_array_to_buffer_fmt+0x2a>
 80067cc:	4b19      	ldr	r3, [pc, #100]	; (8006834 <ai_array_to_buffer_fmt+0xcc>)
 80067ce:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80067d2:	429a      	cmp	r2, r3
 80067d4:	bf18      	it	ne
 80067d6:	2340      	movne	r3, #64	; 0x40
 80067d8:	4318      	orrs	r0, r3
 80067da:	4770      	bx	lr
 80067dc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d0d6      	beq.n	8006792 <ai_array_to_buffer_fmt+0x2a>
 80067e4:	3307      	adds	r3, #7
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d0d3      	beq.n	8006792 <ai_array_to_buffer_fmt+0x2a>
 80067ea:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80067ee:	429a      	cmp	r2, r3
 80067f0:	bf18      	it	ne
 80067f2:	2340      	movne	r3, #64	; 0x40
 80067f4:	e7ce      	b.n	8006794 <ai_array_to_buffer_fmt+0x2c>
 80067f6:	4b10      	ldr	r3, [pc, #64]	; (8006838 <ai_array_to_buffer_fmt+0xd0>)
 80067f8:	429a      	cmp	r2, r3
 80067fa:	bf18      	it	ne
 80067fc:	2340      	movne	r3, #64	; 0x40
 80067fe:	e7c9      	b.n	8006794 <ai_array_to_buffer_fmt+0x2c>
 8006800:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006804:	429a      	cmp	r2, r3
 8006806:	d0c4      	beq.n	8006792 <ai_array_to_buffer_fmt+0x2a>
 8006808:	3380      	adds	r3, #128	; 0x80
 800680a:	429a      	cmp	r2, r3
 800680c:	bf18      	it	ne
 800680e:	2340      	movne	r3, #64	; 0x40
 8006810:	e7c0      	b.n	8006794 <ai_array_to_buffer_fmt+0x2c>
 8006812:	4b0a      	ldr	r3, [pc, #40]	; (800683c <ai_array_to_buffer_fmt+0xd4>)
 8006814:	4003      	ands	r3, r0
 8006816:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800681a:	e7bb      	b.n	8006794 <ai_array_to_buffer_fmt+0x2c>
 800681c:	00840040 	.word	0x00840040
 8006820:	00040840 	.word	0x00040840
 8006824:	00041040 	.word	0x00041040
 8006828:	00040447 	.word	0x00040447
 800682c:	00840840 	.word	0x00840840
 8006830:	00841040 	.word	0x00841040
 8006834:	0084084f 	.word	0x0084084f
 8006838:	0004084f 	.word	0x0004084f
 800683c:	00803fff 	.word	0x00803fff

08006840 <ai_array_get_byte_size>:
 8006840:	b319      	cbz	r1, 800688a <ai_array_get_byte_size+0x4a>
 8006842:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006846:	fb03 f101 	mul.w	r1, r3, r1
 800684a:	3107      	adds	r1, #7
 800684c:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8006850:	f021 0307 	bic.w	r3, r1, #7
 8006854:	2a04      	cmp	r2, #4
 8006856:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800685a:	fa23 f101 	lsr.w	r1, r3, r1
 800685e:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8006862:	d00b      	beq.n	800687c <ai_array_get_byte_size+0x3c>
 8006864:	2a08      	cmp	r2, #8
 8006866:	d002      	beq.n	800686e <ai_array_get_byte_size+0x2e>
 8006868:	3107      	adds	r1, #7
 800686a:	08c8      	lsrs	r0, r1, #3
 800686c:	4770      	bx	lr
 800686e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006872:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8006876:	3107      	adds	r1, #7
 8006878:	08c8      	lsrs	r0, r1, #3
 800687a:	4770      	bx	lr
 800687c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006880:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8006884:	3107      	adds	r1, #7
 8006886:	08c8      	lsrs	r0, r1, #3
 8006888:	4770      	bx	lr
 800688a:	4608      	mov	r0, r1
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop

08006890 <ai_array_get_data_byte_size>:
 8006890:	b169      	cbz	r1, 80068ae <ai_array_get_data_byte_size+0x1e>
 8006892:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8006896:	fb02 f101 	mul.w	r1, r2, r1
 800689a:	1dcb      	adds	r3, r1, #7
 800689c:	f023 0307 	bic.w	r3, r3, #7
 80068a0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80068a4:	fa23 f000 	lsr.w	r0, r3, r0
 80068a8:	3007      	adds	r0, #7
 80068aa:	08c0      	lsrs	r0, r0, #3
 80068ac:	4770      	bx	lr
 80068ae:	4608      	mov	r0, r1
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop

080068b4 <ai_version_get>:
 80068b4:	0212      	lsls	r2, r2, #8
 80068b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80068ba:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80068be:	4770      	bx	lr

080068c0 <get_tensor_byte_size>:
 80068c0:	b410      	push	{r4}
 80068c2:	6983      	ldr	r3, [r0, #24]
 80068c4:	68c4      	ldr	r4, [r0, #12]
 80068c6:	6941      	ldr	r1, [r0, #20]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68e0      	ldr	r0, [r4, #12]
 80068cc:	4a07      	ldr	r2, [pc, #28]	; (80068ec <get_tensor_byte_size+0x2c>)
 80068ce:	68c9      	ldr	r1, [r1, #12]
 80068d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068d4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80068d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80068dc:	fb01 f000 	mul.w	r0, r1, r0
 80068e0:	4293      	cmp	r3, r2
 80068e2:	bf04      	itt	eq
 80068e4:	3007      	addeq	r0, #7
 80068e6:	08c0      	lsreq	r0, r0, #3
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	000400c0 	.word	0x000400c0

080068f0 <sbrk_aligned>:
 80068f0:	b570      	push	{r4, r5, r6, lr}
 80068f2:	4e0e      	ldr	r6, [pc, #56]	; (800692c <sbrk_aligned+0x3c>)
 80068f4:	460c      	mov	r4, r1
 80068f6:	6831      	ldr	r1, [r6, #0]
 80068f8:	4605      	mov	r5, r0
 80068fa:	b911      	cbnz	r1, 8006902 <sbrk_aligned+0x12>
 80068fc:	f000 f9f8 	bl	8006cf0 <_sbrk_r>
 8006900:	6030      	str	r0, [r6, #0]
 8006902:	4621      	mov	r1, r4
 8006904:	4628      	mov	r0, r5
 8006906:	f000 f9f3 	bl	8006cf0 <_sbrk_r>
 800690a:	1c43      	adds	r3, r0, #1
 800690c:	d00a      	beq.n	8006924 <sbrk_aligned+0x34>
 800690e:	1cc4      	adds	r4, r0, #3
 8006910:	f024 0403 	bic.w	r4, r4, #3
 8006914:	42a0      	cmp	r0, r4
 8006916:	d007      	beq.n	8006928 <sbrk_aligned+0x38>
 8006918:	1a21      	subs	r1, r4, r0
 800691a:	4628      	mov	r0, r5
 800691c:	f000 f9e8 	bl	8006cf0 <_sbrk_r>
 8006920:	3001      	adds	r0, #1
 8006922:	d101      	bne.n	8006928 <sbrk_aligned+0x38>
 8006924:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006928:	4620      	mov	r0, r4
 800692a:	bd70      	pop	{r4, r5, r6, pc}
 800692c:	20001120 	.word	0x20001120

08006930 <_malloc_r>:
 8006930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006934:	1ccd      	adds	r5, r1, #3
 8006936:	f025 0503 	bic.w	r5, r5, #3
 800693a:	3508      	adds	r5, #8
 800693c:	2d0c      	cmp	r5, #12
 800693e:	bf38      	it	cc
 8006940:	250c      	movcc	r5, #12
 8006942:	2d00      	cmp	r5, #0
 8006944:	4607      	mov	r7, r0
 8006946:	db01      	blt.n	800694c <_malloc_r+0x1c>
 8006948:	42a9      	cmp	r1, r5
 800694a:	d905      	bls.n	8006958 <_malloc_r+0x28>
 800694c:	230c      	movs	r3, #12
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	2600      	movs	r6, #0
 8006952:	4630      	mov	r0, r6
 8006954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006958:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a2c <_malloc_r+0xfc>
 800695c:	f000 f868 	bl	8006a30 <__malloc_lock>
 8006960:	f8d8 3000 	ldr.w	r3, [r8]
 8006964:	461c      	mov	r4, r3
 8006966:	bb5c      	cbnz	r4, 80069c0 <_malloc_r+0x90>
 8006968:	4629      	mov	r1, r5
 800696a:	4638      	mov	r0, r7
 800696c:	f7ff ffc0 	bl	80068f0 <sbrk_aligned>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	4604      	mov	r4, r0
 8006974:	d155      	bne.n	8006a22 <_malloc_r+0xf2>
 8006976:	f8d8 4000 	ldr.w	r4, [r8]
 800697a:	4626      	mov	r6, r4
 800697c:	2e00      	cmp	r6, #0
 800697e:	d145      	bne.n	8006a0c <_malloc_r+0xdc>
 8006980:	2c00      	cmp	r4, #0
 8006982:	d048      	beq.n	8006a16 <_malloc_r+0xe6>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	4631      	mov	r1, r6
 8006988:	4638      	mov	r0, r7
 800698a:	eb04 0903 	add.w	r9, r4, r3
 800698e:	f000 f9af 	bl	8006cf0 <_sbrk_r>
 8006992:	4581      	cmp	r9, r0
 8006994:	d13f      	bne.n	8006a16 <_malloc_r+0xe6>
 8006996:	6821      	ldr	r1, [r4, #0]
 8006998:	1a6d      	subs	r5, r5, r1
 800699a:	4629      	mov	r1, r5
 800699c:	4638      	mov	r0, r7
 800699e:	f7ff ffa7 	bl	80068f0 <sbrk_aligned>
 80069a2:	3001      	adds	r0, #1
 80069a4:	d037      	beq.n	8006a16 <_malloc_r+0xe6>
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	442b      	add	r3, r5
 80069aa:	6023      	str	r3, [r4, #0]
 80069ac:	f8d8 3000 	ldr.w	r3, [r8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d038      	beq.n	8006a26 <_malloc_r+0xf6>
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	42a2      	cmp	r2, r4
 80069b8:	d12b      	bne.n	8006a12 <_malloc_r+0xe2>
 80069ba:	2200      	movs	r2, #0
 80069bc:	605a      	str	r2, [r3, #4]
 80069be:	e00f      	b.n	80069e0 <_malloc_r+0xb0>
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	1b52      	subs	r2, r2, r5
 80069c4:	d41f      	bmi.n	8006a06 <_malloc_r+0xd6>
 80069c6:	2a0b      	cmp	r2, #11
 80069c8:	d917      	bls.n	80069fa <_malloc_r+0xca>
 80069ca:	1961      	adds	r1, r4, r5
 80069cc:	42a3      	cmp	r3, r4
 80069ce:	6025      	str	r5, [r4, #0]
 80069d0:	bf18      	it	ne
 80069d2:	6059      	strne	r1, [r3, #4]
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	bf08      	it	eq
 80069d8:	f8c8 1000 	streq.w	r1, [r8]
 80069dc:	5162      	str	r2, [r4, r5]
 80069de:	604b      	str	r3, [r1, #4]
 80069e0:	4638      	mov	r0, r7
 80069e2:	f104 060b 	add.w	r6, r4, #11
 80069e6:	f000 f829 	bl	8006a3c <__malloc_unlock>
 80069ea:	f026 0607 	bic.w	r6, r6, #7
 80069ee:	1d23      	adds	r3, r4, #4
 80069f0:	1af2      	subs	r2, r6, r3
 80069f2:	d0ae      	beq.n	8006952 <_malloc_r+0x22>
 80069f4:	1b9b      	subs	r3, r3, r6
 80069f6:	50a3      	str	r3, [r4, r2]
 80069f8:	e7ab      	b.n	8006952 <_malloc_r+0x22>
 80069fa:	42a3      	cmp	r3, r4
 80069fc:	6862      	ldr	r2, [r4, #4]
 80069fe:	d1dd      	bne.n	80069bc <_malloc_r+0x8c>
 8006a00:	f8c8 2000 	str.w	r2, [r8]
 8006a04:	e7ec      	b.n	80069e0 <_malloc_r+0xb0>
 8006a06:	4623      	mov	r3, r4
 8006a08:	6864      	ldr	r4, [r4, #4]
 8006a0a:	e7ac      	b.n	8006966 <_malloc_r+0x36>
 8006a0c:	4634      	mov	r4, r6
 8006a0e:	6876      	ldr	r6, [r6, #4]
 8006a10:	e7b4      	b.n	800697c <_malloc_r+0x4c>
 8006a12:	4613      	mov	r3, r2
 8006a14:	e7cc      	b.n	80069b0 <_malloc_r+0x80>
 8006a16:	230c      	movs	r3, #12
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	f000 f80e 	bl	8006a3c <__malloc_unlock>
 8006a20:	e797      	b.n	8006952 <_malloc_r+0x22>
 8006a22:	6025      	str	r5, [r4, #0]
 8006a24:	e7dc      	b.n	80069e0 <_malloc_r+0xb0>
 8006a26:	605b      	str	r3, [r3, #4]
 8006a28:	deff      	udf	#255	; 0xff
 8006a2a:	bf00      	nop
 8006a2c:	2000111c 	.word	0x2000111c

08006a30 <__malloc_lock>:
 8006a30:	4801      	ldr	r0, [pc, #4]	; (8006a38 <__malloc_lock+0x8>)
 8006a32:	f000 b9aa 	b.w	8006d8a <__retarget_lock_acquire_recursive>
 8006a36:	bf00      	nop
 8006a38:	20001264 	.word	0x20001264

08006a3c <__malloc_unlock>:
 8006a3c:	4801      	ldr	r0, [pc, #4]	; (8006a44 <__malloc_unlock+0x8>)
 8006a3e:	f000 b9a5 	b.w	8006d8c <__retarget_lock_release_recursive>
 8006a42:	bf00      	nop
 8006a44:	20001264 	.word	0x20001264

08006a48 <std>:
 8006a48:	2300      	movs	r3, #0
 8006a4a:	b510      	push	{r4, lr}
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a56:	6083      	str	r3, [r0, #8]
 8006a58:	8181      	strh	r1, [r0, #12]
 8006a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8006a5c:	81c2      	strh	r2, [r0, #14]
 8006a5e:	6183      	str	r3, [r0, #24]
 8006a60:	4619      	mov	r1, r3
 8006a62:	2208      	movs	r2, #8
 8006a64:	305c      	adds	r0, #92	; 0x5c
 8006a66:	f000 f906 	bl	8006c76 <memset>
 8006a6a:	4b0d      	ldr	r3, [pc, #52]	; (8006aa0 <std+0x58>)
 8006a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <std+0x5c>)
 8006a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a72:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <std+0x60>)
 8006a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a76:	4b0d      	ldr	r3, [pc, #52]	; (8006aac <std+0x64>)
 8006a78:	6323      	str	r3, [r4, #48]	; 0x30
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	; (8006ab0 <std+0x68>)
 8006a7c:	6224      	str	r4, [r4, #32]
 8006a7e:	429c      	cmp	r4, r3
 8006a80:	d006      	beq.n	8006a90 <std+0x48>
 8006a82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006a86:	4294      	cmp	r4, r2
 8006a88:	d002      	beq.n	8006a90 <std+0x48>
 8006a8a:	33d0      	adds	r3, #208	; 0xd0
 8006a8c:	429c      	cmp	r4, r3
 8006a8e:	d105      	bne.n	8006a9c <std+0x54>
 8006a90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a98:	f000 b976 	b.w	8006d88 <__retarget_lock_init_recursive>
 8006a9c:	bd10      	pop	{r4, pc}
 8006a9e:	bf00      	nop
 8006aa0:	08006bf1 	.word	0x08006bf1
 8006aa4:	08006c13 	.word	0x08006c13
 8006aa8:	08006c4b 	.word	0x08006c4b
 8006aac:	08006c6f 	.word	0x08006c6f
 8006ab0:	20001124 	.word	0x20001124

08006ab4 <stdio_exit_handler>:
 8006ab4:	4a02      	ldr	r2, [pc, #8]	; (8006ac0 <stdio_exit_handler+0xc>)
 8006ab6:	4903      	ldr	r1, [pc, #12]	; (8006ac4 <stdio_exit_handler+0x10>)
 8006ab8:	4803      	ldr	r0, [pc, #12]	; (8006ac8 <stdio_exit_handler+0x14>)
 8006aba:	f000 b869 	b.w	8006b90 <_fwalk_sglue>
 8006abe:	bf00      	nop
 8006ac0:	200006d4 	.word	0x200006d4
 8006ac4:	080074dd 	.word	0x080074dd
 8006ac8:	200006e0 	.word	0x200006e0

08006acc <cleanup_stdio>:
 8006acc:	6841      	ldr	r1, [r0, #4]
 8006ace:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <cleanup_stdio+0x34>)
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	d001      	beq.n	8006adc <cleanup_stdio+0x10>
 8006ad8:	f000 fd00 	bl	80074dc <_fflush_r>
 8006adc:	68a1      	ldr	r1, [r4, #8]
 8006ade:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <cleanup_stdio+0x38>)
 8006ae0:	4299      	cmp	r1, r3
 8006ae2:	d002      	beq.n	8006aea <cleanup_stdio+0x1e>
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 fcf9 	bl	80074dc <_fflush_r>
 8006aea:	68e1      	ldr	r1, [r4, #12]
 8006aec:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <cleanup_stdio+0x3c>)
 8006aee:	4299      	cmp	r1, r3
 8006af0:	d004      	beq.n	8006afc <cleanup_stdio+0x30>
 8006af2:	4620      	mov	r0, r4
 8006af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006af8:	f000 bcf0 	b.w	80074dc <_fflush_r>
 8006afc:	bd10      	pop	{r4, pc}
 8006afe:	bf00      	nop
 8006b00:	20001124 	.word	0x20001124
 8006b04:	2000118c 	.word	0x2000118c
 8006b08:	200011f4 	.word	0x200011f4

08006b0c <global_stdio_init.part.0>:
 8006b0c:	b510      	push	{r4, lr}
 8006b0e:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <global_stdio_init.part.0+0x30>)
 8006b10:	4c0b      	ldr	r4, [pc, #44]	; (8006b40 <global_stdio_init.part.0+0x34>)
 8006b12:	4a0c      	ldr	r2, [pc, #48]	; (8006b44 <global_stdio_init.part.0+0x38>)
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	4620      	mov	r0, r4
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2104      	movs	r1, #4
 8006b1c:	f7ff ff94 	bl	8006a48 <std>
 8006b20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006b24:	2201      	movs	r2, #1
 8006b26:	2109      	movs	r1, #9
 8006b28:	f7ff ff8e 	bl	8006a48 <std>
 8006b2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006b30:	2202      	movs	r2, #2
 8006b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b36:	2112      	movs	r1, #18
 8006b38:	f7ff bf86 	b.w	8006a48 <std>
 8006b3c:	2000125c 	.word	0x2000125c
 8006b40:	20001124 	.word	0x20001124
 8006b44:	08006ab5 	.word	0x08006ab5

08006b48 <__sfp_lock_acquire>:
 8006b48:	4801      	ldr	r0, [pc, #4]	; (8006b50 <__sfp_lock_acquire+0x8>)
 8006b4a:	f000 b91e 	b.w	8006d8a <__retarget_lock_acquire_recursive>
 8006b4e:	bf00      	nop
 8006b50:	20001265 	.word	0x20001265

08006b54 <__sfp_lock_release>:
 8006b54:	4801      	ldr	r0, [pc, #4]	; (8006b5c <__sfp_lock_release+0x8>)
 8006b56:	f000 b919 	b.w	8006d8c <__retarget_lock_release_recursive>
 8006b5a:	bf00      	nop
 8006b5c:	20001265 	.word	0x20001265

08006b60 <__sinit>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	4604      	mov	r4, r0
 8006b64:	f7ff fff0 	bl	8006b48 <__sfp_lock_acquire>
 8006b68:	6a23      	ldr	r3, [r4, #32]
 8006b6a:	b11b      	cbz	r3, 8006b74 <__sinit+0x14>
 8006b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b70:	f7ff bff0 	b.w	8006b54 <__sfp_lock_release>
 8006b74:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <__sinit+0x28>)
 8006b76:	6223      	str	r3, [r4, #32]
 8006b78:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <__sinit+0x2c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1f5      	bne.n	8006b6c <__sinit+0xc>
 8006b80:	f7ff ffc4 	bl	8006b0c <global_stdio_init.part.0>
 8006b84:	e7f2      	b.n	8006b6c <__sinit+0xc>
 8006b86:	bf00      	nop
 8006b88:	08006acd 	.word	0x08006acd
 8006b8c:	2000125c 	.word	0x2000125c

08006b90 <_fwalk_sglue>:
 8006b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b94:	4607      	mov	r7, r0
 8006b96:	4688      	mov	r8, r1
 8006b98:	4614      	mov	r4, r2
 8006b9a:	2600      	movs	r6, #0
 8006b9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ba0:	f1b9 0901 	subs.w	r9, r9, #1
 8006ba4:	d505      	bpl.n	8006bb2 <_fwalk_sglue+0x22>
 8006ba6:	6824      	ldr	r4, [r4, #0]
 8006ba8:	2c00      	cmp	r4, #0
 8006baa:	d1f7      	bne.n	8006b9c <_fwalk_sglue+0xc>
 8006bac:	4630      	mov	r0, r6
 8006bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bb2:	89ab      	ldrh	r3, [r5, #12]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d907      	bls.n	8006bc8 <_fwalk_sglue+0x38>
 8006bb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	d003      	beq.n	8006bc8 <_fwalk_sglue+0x38>
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	47c0      	blx	r8
 8006bc6:	4306      	orrs	r6, r0
 8006bc8:	3568      	adds	r5, #104	; 0x68
 8006bca:	e7e9      	b.n	8006ba0 <_fwalk_sglue+0x10>

08006bcc <iprintf>:
 8006bcc:	b40f      	push	{r0, r1, r2, r3}
 8006bce:	b507      	push	{r0, r1, r2, lr}
 8006bd0:	4906      	ldr	r1, [pc, #24]	; (8006bec <iprintf+0x20>)
 8006bd2:	ab04      	add	r3, sp, #16
 8006bd4:	6808      	ldr	r0, [r1, #0]
 8006bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bda:	6881      	ldr	r1, [r0, #8]
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	f000 f94d 	bl	8006e7c <_vfiprintf_r>
 8006be2:	b003      	add	sp, #12
 8006be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006be8:	b004      	add	sp, #16
 8006bea:	4770      	bx	lr
 8006bec:	2000072c 	.word	0x2000072c

08006bf0 <__sread>:
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf8:	f000 f868 	bl	8006ccc <_read_r>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	bfab      	itete	ge
 8006c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c02:	89a3      	ldrhlt	r3, [r4, #12]
 8006c04:	181b      	addge	r3, r3, r0
 8006c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c0a:	bfac      	ite	ge
 8006c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c0e:	81a3      	strhlt	r3, [r4, #12]
 8006c10:	bd10      	pop	{r4, pc}

08006c12 <__swrite>:
 8006c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c16:	461f      	mov	r7, r3
 8006c18:	898b      	ldrh	r3, [r1, #12]
 8006c1a:	05db      	lsls	r3, r3, #23
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	4616      	mov	r6, r2
 8006c22:	d505      	bpl.n	8006c30 <__swrite+0x1e>
 8006c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c28:	2302      	movs	r3, #2
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f000 f83c 	bl	8006ca8 <_lseek_r>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	463b      	mov	r3, r7
 8006c40:	4628      	mov	r0, r5
 8006c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c46:	f000 b863 	b.w	8006d10 <_write_r>

08006c4a <__sseek>:
 8006c4a:	b510      	push	{r4, lr}
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c52:	f000 f829 	bl	8006ca8 <_lseek_r>
 8006c56:	1c43      	adds	r3, r0, #1
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	bf15      	itete	ne
 8006c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c66:	81a3      	strheq	r3, [r4, #12]
 8006c68:	bf18      	it	ne
 8006c6a:	81a3      	strhne	r3, [r4, #12]
 8006c6c:	bd10      	pop	{r4, pc}

08006c6e <__sclose>:
 8006c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c72:	f000 b809 	b.w	8006c88 <_close_r>

08006c76 <memset>:
 8006c76:	4402      	add	r2, r0
 8006c78:	4603      	mov	r3, r0
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d100      	bne.n	8006c80 <memset+0xa>
 8006c7e:	4770      	bx	lr
 8006c80:	f803 1b01 	strb.w	r1, [r3], #1
 8006c84:	e7f9      	b.n	8006c7a <memset+0x4>
	...

08006c88 <_close_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d06      	ldr	r5, [pc, #24]	; (8006ca4 <_close_r+0x1c>)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4604      	mov	r4, r0
 8006c90:	4608      	mov	r0, r1
 8006c92:	602b      	str	r3, [r5, #0]
 8006c94:	f001 f826 	bl	8007ce4 <_close>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d102      	bne.n	8006ca2 <_close_r+0x1a>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	b103      	cbz	r3, 8006ca2 <_close_r+0x1a>
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	20001260 	.word	0x20001260

08006ca8 <_lseek_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4d07      	ldr	r5, [pc, #28]	; (8006cc8 <_lseek_r+0x20>)
 8006cac:	4604      	mov	r4, r0
 8006cae:	4608      	mov	r0, r1
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	602a      	str	r2, [r5, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f001 f82c 	bl	8007d14 <_lseek>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_lseek_r+0x1e>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_lseek_r+0x1e>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	20001260 	.word	0x20001260

08006ccc <_read_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4d07      	ldr	r5, [pc, #28]	; (8006cec <_read_r+0x20>)
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	4608      	mov	r0, r1
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	602a      	str	r2, [r5, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f001 f822 	bl	8007d24 <_read>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_read_r+0x1e>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_read_r+0x1e>
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	20001260 	.word	0x20001260

08006cf0 <_sbrk_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d06      	ldr	r5, [pc, #24]	; (8006d0c <_sbrk_r+0x1c>)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	f7f9 fd1c 	bl	8000738 <_sbrk>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_sbrk_r+0x1a>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_sbrk_r+0x1a>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	20001260 	.word	0x20001260

08006d10 <_write_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4d07      	ldr	r5, [pc, #28]	; (8006d30 <_write_r+0x20>)
 8006d14:	4604      	mov	r4, r0
 8006d16:	4608      	mov	r0, r1
 8006d18:	4611      	mov	r1, r2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	602a      	str	r2, [r5, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f001 f808 	bl	8007d34 <_write>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	d102      	bne.n	8006d2e <_write_r+0x1e>
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	b103      	cbz	r3, 8006d2e <_write_r+0x1e>
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	bd38      	pop	{r3, r4, r5, pc}
 8006d30:	20001260 	.word	0x20001260

08006d34 <__errno>:
 8006d34:	4b01      	ldr	r3, [pc, #4]	; (8006d3c <__errno+0x8>)
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	2000072c 	.word	0x2000072c

08006d40 <__libc_init_array>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	4d0d      	ldr	r5, [pc, #52]	; (8006d78 <__libc_init_array+0x38>)
 8006d44:	4c0d      	ldr	r4, [pc, #52]	; (8006d7c <__libc_init_array+0x3c>)
 8006d46:	1b64      	subs	r4, r4, r5
 8006d48:	10a4      	asrs	r4, r4, #2
 8006d4a:	2600      	movs	r6, #0
 8006d4c:	42a6      	cmp	r6, r4
 8006d4e:	d109      	bne.n	8006d64 <__libc_init_array+0x24>
 8006d50:	4d0b      	ldr	r5, [pc, #44]	; (8006d80 <__libc_init_array+0x40>)
 8006d52:	4c0c      	ldr	r4, [pc, #48]	; (8006d84 <__libc_init_array+0x44>)
 8006d54:	f000 fff6 	bl	8007d44 <_init>
 8006d58:	1b64      	subs	r4, r4, r5
 8006d5a:	10a4      	asrs	r4, r4, #2
 8006d5c:	2600      	movs	r6, #0
 8006d5e:	42a6      	cmp	r6, r4
 8006d60:	d105      	bne.n	8006d6e <__libc_init_array+0x2e>
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
 8006d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d68:	4798      	blx	r3
 8006d6a:	3601      	adds	r6, #1
 8006d6c:	e7ee      	b.n	8006d4c <__libc_init_array+0xc>
 8006d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d72:	4798      	blx	r3
 8006d74:	3601      	adds	r6, #1
 8006d76:	e7f2      	b.n	8006d5e <__libc_init_array+0x1e>
 8006d78:	0800c4fc 	.word	0x0800c4fc
 8006d7c:	0800c4fc 	.word	0x0800c4fc
 8006d80:	0800c4fc 	.word	0x0800c4fc
 8006d84:	0800c500 	.word	0x0800c500

08006d88 <__retarget_lock_init_recursive>:
 8006d88:	4770      	bx	lr

08006d8a <__retarget_lock_acquire_recursive>:
 8006d8a:	4770      	bx	lr

08006d8c <__retarget_lock_release_recursive>:
 8006d8c:	4770      	bx	lr
	...

08006d90 <_free_r>:
 8006d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d92:	2900      	cmp	r1, #0
 8006d94:	d044      	beq.n	8006e20 <_free_r+0x90>
 8006d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d9a:	9001      	str	r0, [sp, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006da2:	bfb8      	it	lt
 8006da4:	18e4      	addlt	r4, r4, r3
 8006da6:	f7ff fe43 	bl	8006a30 <__malloc_lock>
 8006daa:	4a1e      	ldr	r2, [pc, #120]	; (8006e24 <_free_r+0x94>)
 8006dac:	9801      	ldr	r0, [sp, #4]
 8006dae:	6813      	ldr	r3, [r2, #0]
 8006db0:	b933      	cbnz	r3, 8006dc0 <_free_r+0x30>
 8006db2:	6063      	str	r3, [r4, #4]
 8006db4:	6014      	str	r4, [r2, #0]
 8006db6:	b003      	add	sp, #12
 8006db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dbc:	f7ff be3e 	b.w	8006a3c <__malloc_unlock>
 8006dc0:	42a3      	cmp	r3, r4
 8006dc2:	d908      	bls.n	8006dd6 <_free_r+0x46>
 8006dc4:	6825      	ldr	r5, [r4, #0]
 8006dc6:	1961      	adds	r1, r4, r5
 8006dc8:	428b      	cmp	r3, r1
 8006dca:	bf01      	itttt	eq
 8006dcc:	6819      	ldreq	r1, [r3, #0]
 8006dce:	685b      	ldreq	r3, [r3, #4]
 8006dd0:	1949      	addeq	r1, r1, r5
 8006dd2:	6021      	streq	r1, [r4, #0]
 8006dd4:	e7ed      	b.n	8006db2 <_free_r+0x22>
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	b10b      	cbz	r3, 8006de0 <_free_r+0x50>
 8006ddc:	42a3      	cmp	r3, r4
 8006dde:	d9fa      	bls.n	8006dd6 <_free_r+0x46>
 8006de0:	6811      	ldr	r1, [r2, #0]
 8006de2:	1855      	adds	r5, r2, r1
 8006de4:	42a5      	cmp	r5, r4
 8006de6:	d10b      	bne.n	8006e00 <_free_r+0x70>
 8006de8:	6824      	ldr	r4, [r4, #0]
 8006dea:	4421      	add	r1, r4
 8006dec:	1854      	adds	r4, r2, r1
 8006dee:	42a3      	cmp	r3, r4
 8006df0:	6011      	str	r1, [r2, #0]
 8006df2:	d1e0      	bne.n	8006db6 <_free_r+0x26>
 8006df4:	681c      	ldr	r4, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	6053      	str	r3, [r2, #4]
 8006dfa:	440c      	add	r4, r1
 8006dfc:	6014      	str	r4, [r2, #0]
 8006dfe:	e7da      	b.n	8006db6 <_free_r+0x26>
 8006e00:	d902      	bls.n	8006e08 <_free_r+0x78>
 8006e02:	230c      	movs	r3, #12
 8006e04:	6003      	str	r3, [r0, #0]
 8006e06:	e7d6      	b.n	8006db6 <_free_r+0x26>
 8006e08:	6825      	ldr	r5, [r4, #0]
 8006e0a:	1961      	adds	r1, r4, r5
 8006e0c:	428b      	cmp	r3, r1
 8006e0e:	bf04      	itt	eq
 8006e10:	6819      	ldreq	r1, [r3, #0]
 8006e12:	685b      	ldreq	r3, [r3, #4]
 8006e14:	6063      	str	r3, [r4, #4]
 8006e16:	bf04      	itt	eq
 8006e18:	1949      	addeq	r1, r1, r5
 8006e1a:	6021      	streq	r1, [r4, #0]
 8006e1c:	6054      	str	r4, [r2, #4]
 8006e1e:	e7ca      	b.n	8006db6 <_free_r+0x26>
 8006e20:	b003      	add	sp, #12
 8006e22:	bd30      	pop	{r4, r5, pc}
 8006e24:	2000111c 	.word	0x2000111c

08006e28 <__sfputc_r>:
 8006e28:	6893      	ldr	r3, [r2, #8]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	b410      	push	{r4}
 8006e30:	6093      	str	r3, [r2, #8]
 8006e32:	da08      	bge.n	8006e46 <__sfputc_r+0x1e>
 8006e34:	6994      	ldr	r4, [r2, #24]
 8006e36:	42a3      	cmp	r3, r4
 8006e38:	db01      	blt.n	8006e3e <__sfputc_r+0x16>
 8006e3a:	290a      	cmp	r1, #10
 8006e3c:	d103      	bne.n	8006e46 <__sfputc_r+0x1e>
 8006e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e42:	f000 bb73 	b.w	800752c <__swbuf_r>
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	1c58      	adds	r0, r3, #1
 8006e4a:	6010      	str	r0, [r2, #0]
 8006e4c:	7019      	strb	r1, [r3, #0]
 8006e4e:	4608      	mov	r0, r1
 8006e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <__sfputs_r>:
 8006e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e58:	4606      	mov	r6, r0
 8006e5a:	460f      	mov	r7, r1
 8006e5c:	4614      	mov	r4, r2
 8006e5e:	18d5      	adds	r5, r2, r3
 8006e60:	42ac      	cmp	r4, r5
 8006e62:	d101      	bne.n	8006e68 <__sfputs_r+0x12>
 8006e64:	2000      	movs	r0, #0
 8006e66:	e007      	b.n	8006e78 <__sfputs_r+0x22>
 8006e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6c:	463a      	mov	r2, r7
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f7ff ffda 	bl	8006e28 <__sfputc_r>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	d1f3      	bne.n	8006e60 <__sfputs_r+0xa>
 8006e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e7c <_vfiprintf_r>:
 8006e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e80:	460d      	mov	r5, r1
 8006e82:	b09d      	sub	sp, #116	; 0x74
 8006e84:	4614      	mov	r4, r2
 8006e86:	4698      	mov	r8, r3
 8006e88:	4606      	mov	r6, r0
 8006e8a:	b118      	cbz	r0, 8006e94 <_vfiprintf_r+0x18>
 8006e8c:	6a03      	ldr	r3, [r0, #32]
 8006e8e:	b90b      	cbnz	r3, 8006e94 <_vfiprintf_r+0x18>
 8006e90:	f7ff fe66 	bl	8006b60 <__sinit>
 8006e94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e96:	07d9      	lsls	r1, r3, #31
 8006e98:	d405      	bmi.n	8006ea6 <_vfiprintf_r+0x2a>
 8006e9a:	89ab      	ldrh	r3, [r5, #12]
 8006e9c:	059a      	lsls	r2, r3, #22
 8006e9e:	d402      	bmi.n	8006ea6 <_vfiprintf_r+0x2a>
 8006ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ea2:	f7ff ff72 	bl	8006d8a <__retarget_lock_acquire_recursive>
 8006ea6:	89ab      	ldrh	r3, [r5, #12]
 8006ea8:	071b      	lsls	r3, r3, #28
 8006eaa:	d501      	bpl.n	8006eb0 <_vfiprintf_r+0x34>
 8006eac:	692b      	ldr	r3, [r5, #16]
 8006eae:	b99b      	cbnz	r3, 8006ed8 <_vfiprintf_r+0x5c>
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f000 fb78 	bl	80075a8 <__swsetup_r>
 8006eb8:	b170      	cbz	r0, 8006ed8 <_vfiprintf_r+0x5c>
 8006eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ebc:	07dc      	lsls	r4, r3, #31
 8006ebe:	d504      	bpl.n	8006eca <_vfiprintf_r+0x4e>
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ec4:	b01d      	add	sp, #116	; 0x74
 8006ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eca:	89ab      	ldrh	r3, [r5, #12]
 8006ecc:	0598      	lsls	r0, r3, #22
 8006ece:	d4f7      	bmi.n	8006ec0 <_vfiprintf_r+0x44>
 8006ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ed2:	f7ff ff5b 	bl	8006d8c <__retarget_lock_release_recursive>
 8006ed6:	e7f3      	b.n	8006ec0 <_vfiprintf_r+0x44>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	9309      	str	r3, [sp, #36]	; 0x24
 8006edc:	2320      	movs	r3, #32
 8006ede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ee6:	2330      	movs	r3, #48	; 0x30
 8006ee8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800709c <_vfiprintf_r+0x220>
 8006eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ef0:	f04f 0901 	mov.w	r9, #1
 8006ef4:	4623      	mov	r3, r4
 8006ef6:	469a      	mov	sl, r3
 8006ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006efc:	b10a      	cbz	r2, 8006f02 <_vfiprintf_r+0x86>
 8006efe:	2a25      	cmp	r2, #37	; 0x25
 8006f00:	d1f9      	bne.n	8006ef6 <_vfiprintf_r+0x7a>
 8006f02:	ebba 0b04 	subs.w	fp, sl, r4
 8006f06:	d00b      	beq.n	8006f20 <_vfiprintf_r+0xa4>
 8006f08:	465b      	mov	r3, fp
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f7ff ffa1 	bl	8006e56 <__sfputs_r>
 8006f14:	3001      	adds	r0, #1
 8006f16:	f000 80a9 	beq.w	800706c <_vfiprintf_r+0x1f0>
 8006f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f1c:	445a      	add	r2, fp
 8006f1e:	9209      	str	r2, [sp, #36]	; 0x24
 8006f20:	f89a 3000 	ldrb.w	r3, [sl]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80a1 	beq.w	800706c <_vfiprintf_r+0x1f0>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f34:	f10a 0a01 	add.w	sl, sl, #1
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	9307      	str	r3, [sp, #28]
 8006f3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f40:	931a      	str	r3, [sp, #104]	; 0x68
 8006f42:	4654      	mov	r4, sl
 8006f44:	2205      	movs	r2, #5
 8006f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f4a:	4854      	ldr	r0, [pc, #336]	; (800709c <_vfiprintf_r+0x220>)
 8006f4c:	f7f9 f940 	bl	80001d0 <memchr>
 8006f50:	9a04      	ldr	r2, [sp, #16]
 8006f52:	b9d8      	cbnz	r0, 8006f8c <_vfiprintf_r+0x110>
 8006f54:	06d1      	lsls	r1, r2, #27
 8006f56:	bf44      	itt	mi
 8006f58:	2320      	movmi	r3, #32
 8006f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f5e:	0713      	lsls	r3, r2, #28
 8006f60:	bf44      	itt	mi
 8006f62:	232b      	movmi	r3, #43	; 0x2b
 8006f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f68:	f89a 3000 	ldrb.w	r3, [sl]
 8006f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f6e:	d015      	beq.n	8006f9c <_vfiprintf_r+0x120>
 8006f70:	9a07      	ldr	r2, [sp, #28]
 8006f72:	4654      	mov	r4, sl
 8006f74:	2000      	movs	r0, #0
 8006f76:	f04f 0c0a 	mov.w	ip, #10
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f80:	3b30      	subs	r3, #48	; 0x30
 8006f82:	2b09      	cmp	r3, #9
 8006f84:	d94d      	bls.n	8007022 <_vfiprintf_r+0x1a6>
 8006f86:	b1b0      	cbz	r0, 8006fb6 <_vfiprintf_r+0x13a>
 8006f88:	9207      	str	r2, [sp, #28]
 8006f8a:	e014      	b.n	8006fb6 <_vfiprintf_r+0x13a>
 8006f8c:	eba0 0308 	sub.w	r3, r0, r8
 8006f90:	fa09 f303 	lsl.w	r3, r9, r3
 8006f94:	4313      	orrs	r3, r2
 8006f96:	9304      	str	r3, [sp, #16]
 8006f98:	46a2      	mov	sl, r4
 8006f9a:	e7d2      	b.n	8006f42 <_vfiprintf_r+0xc6>
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	1d19      	adds	r1, r3, #4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	9103      	str	r1, [sp, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bfbb      	ittet	lt
 8006fa8:	425b      	neglt	r3, r3
 8006faa:	f042 0202 	orrlt.w	r2, r2, #2
 8006fae:	9307      	strge	r3, [sp, #28]
 8006fb0:	9307      	strlt	r3, [sp, #28]
 8006fb2:	bfb8      	it	lt
 8006fb4:	9204      	strlt	r2, [sp, #16]
 8006fb6:	7823      	ldrb	r3, [r4, #0]
 8006fb8:	2b2e      	cmp	r3, #46	; 0x2e
 8006fba:	d10c      	bne.n	8006fd6 <_vfiprintf_r+0x15a>
 8006fbc:	7863      	ldrb	r3, [r4, #1]
 8006fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8006fc0:	d134      	bne.n	800702c <_vfiprintf_r+0x1b0>
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	1d1a      	adds	r2, r3, #4
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	9203      	str	r2, [sp, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bfb8      	it	lt
 8006fce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006fd2:	3402      	adds	r4, #2
 8006fd4:	9305      	str	r3, [sp, #20]
 8006fd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80070ac <_vfiprintf_r+0x230>
 8006fda:	7821      	ldrb	r1, [r4, #0]
 8006fdc:	2203      	movs	r2, #3
 8006fde:	4650      	mov	r0, sl
 8006fe0:	f7f9 f8f6 	bl	80001d0 <memchr>
 8006fe4:	b138      	cbz	r0, 8006ff6 <_vfiprintf_r+0x17a>
 8006fe6:	9b04      	ldr	r3, [sp, #16]
 8006fe8:	eba0 000a 	sub.w	r0, r0, sl
 8006fec:	2240      	movs	r2, #64	; 0x40
 8006fee:	4082      	lsls	r2, r0
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	3401      	adds	r4, #1
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ffa:	4829      	ldr	r0, [pc, #164]	; (80070a0 <_vfiprintf_r+0x224>)
 8006ffc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007000:	2206      	movs	r2, #6
 8007002:	f7f9 f8e5 	bl	80001d0 <memchr>
 8007006:	2800      	cmp	r0, #0
 8007008:	d03f      	beq.n	800708a <_vfiprintf_r+0x20e>
 800700a:	4b26      	ldr	r3, [pc, #152]	; (80070a4 <_vfiprintf_r+0x228>)
 800700c:	bb1b      	cbnz	r3, 8007056 <_vfiprintf_r+0x1da>
 800700e:	9b03      	ldr	r3, [sp, #12]
 8007010:	3307      	adds	r3, #7
 8007012:	f023 0307 	bic.w	r3, r3, #7
 8007016:	3308      	adds	r3, #8
 8007018:	9303      	str	r3, [sp, #12]
 800701a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701c:	443b      	add	r3, r7
 800701e:	9309      	str	r3, [sp, #36]	; 0x24
 8007020:	e768      	b.n	8006ef4 <_vfiprintf_r+0x78>
 8007022:	fb0c 3202 	mla	r2, ip, r2, r3
 8007026:	460c      	mov	r4, r1
 8007028:	2001      	movs	r0, #1
 800702a:	e7a6      	b.n	8006f7a <_vfiprintf_r+0xfe>
 800702c:	2300      	movs	r3, #0
 800702e:	3401      	adds	r4, #1
 8007030:	9305      	str	r3, [sp, #20]
 8007032:	4619      	mov	r1, r3
 8007034:	f04f 0c0a 	mov.w	ip, #10
 8007038:	4620      	mov	r0, r4
 800703a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800703e:	3a30      	subs	r2, #48	; 0x30
 8007040:	2a09      	cmp	r2, #9
 8007042:	d903      	bls.n	800704c <_vfiprintf_r+0x1d0>
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0c6      	beq.n	8006fd6 <_vfiprintf_r+0x15a>
 8007048:	9105      	str	r1, [sp, #20]
 800704a:	e7c4      	b.n	8006fd6 <_vfiprintf_r+0x15a>
 800704c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007050:	4604      	mov	r4, r0
 8007052:	2301      	movs	r3, #1
 8007054:	e7f0      	b.n	8007038 <_vfiprintf_r+0x1bc>
 8007056:	ab03      	add	r3, sp, #12
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	462a      	mov	r2, r5
 800705c:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <_vfiprintf_r+0x22c>)
 800705e:	a904      	add	r1, sp, #16
 8007060:	4630      	mov	r0, r6
 8007062:	f3af 8000 	nop.w
 8007066:	4607      	mov	r7, r0
 8007068:	1c78      	adds	r0, r7, #1
 800706a:	d1d6      	bne.n	800701a <_vfiprintf_r+0x19e>
 800706c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800706e:	07d9      	lsls	r1, r3, #31
 8007070:	d405      	bmi.n	800707e <_vfiprintf_r+0x202>
 8007072:	89ab      	ldrh	r3, [r5, #12]
 8007074:	059a      	lsls	r2, r3, #22
 8007076:	d402      	bmi.n	800707e <_vfiprintf_r+0x202>
 8007078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800707a:	f7ff fe87 	bl	8006d8c <__retarget_lock_release_recursive>
 800707e:	89ab      	ldrh	r3, [r5, #12]
 8007080:	065b      	lsls	r3, r3, #25
 8007082:	f53f af1d 	bmi.w	8006ec0 <_vfiprintf_r+0x44>
 8007086:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007088:	e71c      	b.n	8006ec4 <_vfiprintf_r+0x48>
 800708a:	ab03      	add	r3, sp, #12
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	462a      	mov	r2, r5
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <_vfiprintf_r+0x22c>)
 8007092:	a904      	add	r1, sp, #16
 8007094:	4630      	mov	r0, r6
 8007096:	f000 f879 	bl	800718c <_printf_i>
 800709a:	e7e4      	b.n	8007066 <_vfiprintf_r+0x1ea>
 800709c:	0800c4b0 	.word	0x0800c4b0
 80070a0:	0800c4ba 	.word	0x0800c4ba
 80070a4:	00000000 	.word	0x00000000
 80070a8:	08006e57 	.word	0x08006e57
 80070ac:	0800c4b6 	.word	0x0800c4b6

080070b0 <_printf_common>:
 80070b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	4616      	mov	r6, r2
 80070b6:	4699      	mov	r9, r3
 80070b8:	688a      	ldr	r2, [r1, #8]
 80070ba:	690b      	ldr	r3, [r1, #16]
 80070bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070c0:	4293      	cmp	r3, r2
 80070c2:	bfb8      	it	lt
 80070c4:	4613      	movlt	r3, r2
 80070c6:	6033      	str	r3, [r6, #0]
 80070c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070cc:	4607      	mov	r7, r0
 80070ce:	460c      	mov	r4, r1
 80070d0:	b10a      	cbz	r2, 80070d6 <_printf_common+0x26>
 80070d2:	3301      	adds	r3, #1
 80070d4:	6033      	str	r3, [r6, #0]
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	0699      	lsls	r1, r3, #26
 80070da:	bf42      	ittt	mi
 80070dc:	6833      	ldrmi	r3, [r6, #0]
 80070de:	3302      	addmi	r3, #2
 80070e0:	6033      	strmi	r3, [r6, #0]
 80070e2:	6825      	ldr	r5, [r4, #0]
 80070e4:	f015 0506 	ands.w	r5, r5, #6
 80070e8:	d106      	bne.n	80070f8 <_printf_common+0x48>
 80070ea:	f104 0a19 	add.w	sl, r4, #25
 80070ee:	68e3      	ldr	r3, [r4, #12]
 80070f0:	6832      	ldr	r2, [r6, #0]
 80070f2:	1a9b      	subs	r3, r3, r2
 80070f4:	42ab      	cmp	r3, r5
 80070f6:	dc26      	bgt.n	8007146 <_printf_common+0x96>
 80070f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070fc:	1e13      	subs	r3, r2, #0
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	bf18      	it	ne
 8007102:	2301      	movne	r3, #1
 8007104:	0692      	lsls	r2, r2, #26
 8007106:	d42b      	bmi.n	8007160 <_printf_common+0xb0>
 8007108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800710c:	4649      	mov	r1, r9
 800710e:	4638      	mov	r0, r7
 8007110:	47c0      	blx	r8
 8007112:	3001      	adds	r0, #1
 8007114:	d01e      	beq.n	8007154 <_printf_common+0xa4>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	6922      	ldr	r2, [r4, #16]
 800711a:	f003 0306 	and.w	r3, r3, #6
 800711e:	2b04      	cmp	r3, #4
 8007120:	bf02      	ittt	eq
 8007122:	68e5      	ldreq	r5, [r4, #12]
 8007124:	6833      	ldreq	r3, [r6, #0]
 8007126:	1aed      	subeq	r5, r5, r3
 8007128:	68a3      	ldr	r3, [r4, #8]
 800712a:	bf0c      	ite	eq
 800712c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007130:	2500      	movne	r5, #0
 8007132:	4293      	cmp	r3, r2
 8007134:	bfc4      	itt	gt
 8007136:	1a9b      	subgt	r3, r3, r2
 8007138:	18ed      	addgt	r5, r5, r3
 800713a:	2600      	movs	r6, #0
 800713c:	341a      	adds	r4, #26
 800713e:	42b5      	cmp	r5, r6
 8007140:	d11a      	bne.n	8007178 <_printf_common+0xc8>
 8007142:	2000      	movs	r0, #0
 8007144:	e008      	b.n	8007158 <_printf_common+0xa8>
 8007146:	2301      	movs	r3, #1
 8007148:	4652      	mov	r2, sl
 800714a:	4649      	mov	r1, r9
 800714c:	4638      	mov	r0, r7
 800714e:	47c0      	blx	r8
 8007150:	3001      	adds	r0, #1
 8007152:	d103      	bne.n	800715c <_printf_common+0xac>
 8007154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715c:	3501      	adds	r5, #1
 800715e:	e7c6      	b.n	80070ee <_printf_common+0x3e>
 8007160:	18e1      	adds	r1, r4, r3
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	2030      	movs	r0, #48	; 0x30
 8007166:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800716a:	4422      	add	r2, r4
 800716c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007174:	3302      	adds	r3, #2
 8007176:	e7c7      	b.n	8007108 <_printf_common+0x58>
 8007178:	2301      	movs	r3, #1
 800717a:	4622      	mov	r2, r4
 800717c:	4649      	mov	r1, r9
 800717e:	4638      	mov	r0, r7
 8007180:	47c0      	blx	r8
 8007182:	3001      	adds	r0, #1
 8007184:	d0e6      	beq.n	8007154 <_printf_common+0xa4>
 8007186:	3601      	adds	r6, #1
 8007188:	e7d9      	b.n	800713e <_printf_common+0x8e>
	...

0800718c <_printf_i>:
 800718c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007190:	7e0f      	ldrb	r7, [r1, #24]
 8007192:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007194:	2f78      	cmp	r7, #120	; 0x78
 8007196:	4691      	mov	r9, r2
 8007198:	4680      	mov	r8, r0
 800719a:	460c      	mov	r4, r1
 800719c:	469a      	mov	sl, r3
 800719e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071a2:	d807      	bhi.n	80071b4 <_printf_i+0x28>
 80071a4:	2f62      	cmp	r7, #98	; 0x62
 80071a6:	d80a      	bhi.n	80071be <_printf_i+0x32>
 80071a8:	2f00      	cmp	r7, #0
 80071aa:	f000 80d4 	beq.w	8007356 <_printf_i+0x1ca>
 80071ae:	2f58      	cmp	r7, #88	; 0x58
 80071b0:	f000 80c0 	beq.w	8007334 <_printf_i+0x1a8>
 80071b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071bc:	e03a      	b.n	8007234 <_printf_i+0xa8>
 80071be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071c2:	2b15      	cmp	r3, #21
 80071c4:	d8f6      	bhi.n	80071b4 <_printf_i+0x28>
 80071c6:	a101      	add	r1, pc, #4	; (adr r1, 80071cc <_printf_i+0x40>)
 80071c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071cc:	08007225 	.word	0x08007225
 80071d0:	08007239 	.word	0x08007239
 80071d4:	080071b5 	.word	0x080071b5
 80071d8:	080071b5 	.word	0x080071b5
 80071dc:	080071b5 	.word	0x080071b5
 80071e0:	080071b5 	.word	0x080071b5
 80071e4:	08007239 	.word	0x08007239
 80071e8:	080071b5 	.word	0x080071b5
 80071ec:	080071b5 	.word	0x080071b5
 80071f0:	080071b5 	.word	0x080071b5
 80071f4:	080071b5 	.word	0x080071b5
 80071f8:	0800733d 	.word	0x0800733d
 80071fc:	08007265 	.word	0x08007265
 8007200:	080072f7 	.word	0x080072f7
 8007204:	080071b5 	.word	0x080071b5
 8007208:	080071b5 	.word	0x080071b5
 800720c:	0800735f 	.word	0x0800735f
 8007210:	080071b5 	.word	0x080071b5
 8007214:	08007265 	.word	0x08007265
 8007218:	080071b5 	.word	0x080071b5
 800721c:	080071b5 	.word	0x080071b5
 8007220:	080072ff 	.word	0x080072ff
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	1d1a      	adds	r2, r3, #4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	602a      	str	r2, [r5, #0]
 800722c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007234:	2301      	movs	r3, #1
 8007236:	e09f      	b.n	8007378 <_printf_i+0x1ec>
 8007238:	6820      	ldr	r0, [r4, #0]
 800723a:	682b      	ldr	r3, [r5, #0]
 800723c:	0607      	lsls	r7, r0, #24
 800723e:	f103 0104 	add.w	r1, r3, #4
 8007242:	6029      	str	r1, [r5, #0]
 8007244:	d501      	bpl.n	800724a <_printf_i+0xbe>
 8007246:	681e      	ldr	r6, [r3, #0]
 8007248:	e003      	b.n	8007252 <_printf_i+0xc6>
 800724a:	0646      	lsls	r6, r0, #25
 800724c:	d5fb      	bpl.n	8007246 <_printf_i+0xba>
 800724e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007252:	2e00      	cmp	r6, #0
 8007254:	da03      	bge.n	800725e <_printf_i+0xd2>
 8007256:	232d      	movs	r3, #45	; 0x2d
 8007258:	4276      	negs	r6, r6
 800725a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800725e:	485a      	ldr	r0, [pc, #360]	; (80073c8 <_printf_i+0x23c>)
 8007260:	230a      	movs	r3, #10
 8007262:	e012      	b.n	800728a <_printf_i+0xfe>
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	6820      	ldr	r0, [r4, #0]
 8007268:	1d19      	adds	r1, r3, #4
 800726a:	6029      	str	r1, [r5, #0]
 800726c:	0605      	lsls	r5, r0, #24
 800726e:	d501      	bpl.n	8007274 <_printf_i+0xe8>
 8007270:	681e      	ldr	r6, [r3, #0]
 8007272:	e002      	b.n	800727a <_printf_i+0xee>
 8007274:	0641      	lsls	r1, r0, #25
 8007276:	d5fb      	bpl.n	8007270 <_printf_i+0xe4>
 8007278:	881e      	ldrh	r6, [r3, #0]
 800727a:	4853      	ldr	r0, [pc, #332]	; (80073c8 <_printf_i+0x23c>)
 800727c:	2f6f      	cmp	r7, #111	; 0x6f
 800727e:	bf0c      	ite	eq
 8007280:	2308      	moveq	r3, #8
 8007282:	230a      	movne	r3, #10
 8007284:	2100      	movs	r1, #0
 8007286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800728a:	6865      	ldr	r5, [r4, #4]
 800728c:	60a5      	str	r5, [r4, #8]
 800728e:	2d00      	cmp	r5, #0
 8007290:	bfa2      	ittt	ge
 8007292:	6821      	ldrge	r1, [r4, #0]
 8007294:	f021 0104 	bicge.w	r1, r1, #4
 8007298:	6021      	strge	r1, [r4, #0]
 800729a:	b90e      	cbnz	r6, 80072a0 <_printf_i+0x114>
 800729c:	2d00      	cmp	r5, #0
 800729e:	d04b      	beq.n	8007338 <_printf_i+0x1ac>
 80072a0:	4615      	mov	r5, r2
 80072a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80072a6:	fb03 6711 	mls	r7, r3, r1, r6
 80072aa:	5dc7      	ldrb	r7, [r0, r7]
 80072ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072b0:	4637      	mov	r7, r6
 80072b2:	42bb      	cmp	r3, r7
 80072b4:	460e      	mov	r6, r1
 80072b6:	d9f4      	bls.n	80072a2 <_printf_i+0x116>
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d10b      	bne.n	80072d4 <_printf_i+0x148>
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	07de      	lsls	r6, r3, #31
 80072c0:	d508      	bpl.n	80072d4 <_printf_i+0x148>
 80072c2:	6923      	ldr	r3, [r4, #16]
 80072c4:	6861      	ldr	r1, [r4, #4]
 80072c6:	4299      	cmp	r1, r3
 80072c8:	bfde      	ittt	le
 80072ca:	2330      	movle	r3, #48	; 0x30
 80072cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80072d4:	1b52      	subs	r2, r2, r5
 80072d6:	6122      	str	r2, [r4, #16]
 80072d8:	f8cd a000 	str.w	sl, [sp]
 80072dc:	464b      	mov	r3, r9
 80072de:	aa03      	add	r2, sp, #12
 80072e0:	4621      	mov	r1, r4
 80072e2:	4640      	mov	r0, r8
 80072e4:	f7ff fee4 	bl	80070b0 <_printf_common>
 80072e8:	3001      	adds	r0, #1
 80072ea:	d14a      	bne.n	8007382 <_printf_i+0x1f6>
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f0:	b004      	add	sp, #16
 80072f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	f043 0320 	orr.w	r3, r3, #32
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	4833      	ldr	r0, [pc, #204]	; (80073cc <_printf_i+0x240>)
 8007300:	2778      	movs	r7, #120	; 0x78
 8007302:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	6829      	ldr	r1, [r5, #0]
 800730a:	061f      	lsls	r7, r3, #24
 800730c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007310:	d402      	bmi.n	8007318 <_printf_i+0x18c>
 8007312:	065f      	lsls	r7, r3, #25
 8007314:	bf48      	it	mi
 8007316:	b2b6      	uxthmi	r6, r6
 8007318:	07df      	lsls	r7, r3, #31
 800731a:	bf48      	it	mi
 800731c:	f043 0320 	orrmi.w	r3, r3, #32
 8007320:	6029      	str	r1, [r5, #0]
 8007322:	bf48      	it	mi
 8007324:	6023      	strmi	r3, [r4, #0]
 8007326:	b91e      	cbnz	r6, 8007330 <_printf_i+0x1a4>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	f023 0320 	bic.w	r3, r3, #32
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	2310      	movs	r3, #16
 8007332:	e7a7      	b.n	8007284 <_printf_i+0xf8>
 8007334:	4824      	ldr	r0, [pc, #144]	; (80073c8 <_printf_i+0x23c>)
 8007336:	e7e4      	b.n	8007302 <_printf_i+0x176>
 8007338:	4615      	mov	r5, r2
 800733a:	e7bd      	b.n	80072b8 <_printf_i+0x12c>
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	6826      	ldr	r6, [r4, #0]
 8007340:	6961      	ldr	r1, [r4, #20]
 8007342:	1d18      	adds	r0, r3, #4
 8007344:	6028      	str	r0, [r5, #0]
 8007346:	0635      	lsls	r5, r6, #24
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	d501      	bpl.n	8007350 <_printf_i+0x1c4>
 800734c:	6019      	str	r1, [r3, #0]
 800734e:	e002      	b.n	8007356 <_printf_i+0x1ca>
 8007350:	0670      	lsls	r0, r6, #25
 8007352:	d5fb      	bpl.n	800734c <_printf_i+0x1c0>
 8007354:	8019      	strh	r1, [r3, #0]
 8007356:	2300      	movs	r3, #0
 8007358:	6123      	str	r3, [r4, #16]
 800735a:	4615      	mov	r5, r2
 800735c:	e7bc      	b.n	80072d8 <_printf_i+0x14c>
 800735e:	682b      	ldr	r3, [r5, #0]
 8007360:	1d1a      	adds	r2, r3, #4
 8007362:	602a      	str	r2, [r5, #0]
 8007364:	681d      	ldr	r5, [r3, #0]
 8007366:	6862      	ldr	r2, [r4, #4]
 8007368:	2100      	movs	r1, #0
 800736a:	4628      	mov	r0, r5
 800736c:	f7f8 ff30 	bl	80001d0 <memchr>
 8007370:	b108      	cbz	r0, 8007376 <_printf_i+0x1ea>
 8007372:	1b40      	subs	r0, r0, r5
 8007374:	6060      	str	r0, [r4, #4]
 8007376:	6863      	ldr	r3, [r4, #4]
 8007378:	6123      	str	r3, [r4, #16]
 800737a:	2300      	movs	r3, #0
 800737c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007380:	e7aa      	b.n	80072d8 <_printf_i+0x14c>
 8007382:	6923      	ldr	r3, [r4, #16]
 8007384:	462a      	mov	r2, r5
 8007386:	4649      	mov	r1, r9
 8007388:	4640      	mov	r0, r8
 800738a:	47d0      	blx	sl
 800738c:	3001      	adds	r0, #1
 800738e:	d0ad      	beq.n	80072ec <_printf_i+0x160>
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	079b      	lsls	r3, r3, #30
 8007394:	d413      	bmi.n	80073be <_printf_i+0x232>
 8007396:	68e0      	ldr	r0, [r4, #12]
 8007398:	9b03      	ldr	r3, [sp, #12]
 800739a:	4298      	cmp	r0, r3
 800739c:	bfb8      	it	lt
 800739e:	4618      	movlt	r0, r3
 80073a0:	e7a6      	b.n	80072f0 <_printf_i+0x164>
 80073a2:	2301      	movs	r3, #1
 80073a4:	4632      	mov	r2, r6
 80073a6:	4649      	mov	r1, r9
 80073a8:	4640      	mov	r0, r8
 80073aa:	47d0      	blx	sl
 80073ac:	3001      	adds	r0, #1
 80073ae:	d09d      	beq.n	80072ec <_printf_i+0x160>
 80073b0:	3501      	adds	r5, #1
 80073b2:	68e3      	ldr	r3, [r4, #12]
 80073b4:	9903      	ldr	r1, [sp, #12]
 80073b6:	1a5b      	subs	r3, r3, r1
 80073b8:	42ab      	cmp	r3, r5
 80073ba:	dcf2      	bgt.n	80073a2 <_printf_i+0x216>
 80073bc:	e7eb      	b.n	8007396 <_printf_i+0x20a>
 80073be:	2500      	movs	r5, #0
 80073c0:	f104 0619 	add.w	r6, r4, #25
 80073c4:	e7f5      	b.n	80073b2 <_printf_i+0x226>
 80073c6:	bf00      	nop
 80073c8:	0800c4c1 	.word	0x0800c4c1
 80073cc:	0800c4d2 	.word	0x0800c4d2

080073d0 <__sflush_r>:
 80073d0:	898a      	ldrh	r2, [r1, #12]
 80073d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d6:	4605      	mov	r5, r0
 80073d8:	0710      	lsls	r0, r2, #28
 80073da:	460c      	mov	r4, r1
 80073dc:	d458      	bmi.n	8007490 <__sflush_r+0xc0>
 80073de:	684b      	ldr	r3, [r1, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dc05      	bgt.n	80073f0 <__sflush_r+0x20>
 80073e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	dc02      	bgt.n	80073f0 <__sflush_r+0x20>
 80073ea:	2000      	movs	r0, #0
 80073ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073f2:	2e00      	cmp	r6, #0
 80073f4:	d0f9      	beq.n	80073ea <__sflush_r+0x1a>
 80073f6:	2300      	movs	r3, #0
 80073f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073fc:	682f      	ldr	r7, [r5, #0]
 80073fe:	6a21      	ldr	r1, [r4, #32]
 8007400:	602b      	str	r3, [r5, #0]
 8007402:	d032      	beq.n	800746a <__sflush_r+0x9a>
 8007404:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	075a      	lsls	r2, r3, #29
 800740a:	d505      	bpl.n	8007418 <__sflush_r+0x48>
 800740c:	6863      	ldr	r3, [r4, #4]
 800740e:	1ac0      	subs	r0, r0, r3
 8007410:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007412:	b10b      	cbz	r3, 8007418 <__sflush_r+0x48>
 8007414:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007416:	1ac0      	subs	r0, r0, r3
 8007418:	2300      	movs	r3, #0
 800741a:	4602      	mov	r2, r0
 800741c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800741e:	6a21      	ldr	r1, [r4, #32]
 8007420:	4628      	mov	r0, r5
 8007422:	47b0      	blx	r6
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	d106      	bne.n	8007438 <__sflush_r+0x68>
 800742a:	6829      	ldr	r1, [r5, #0]
 800742c:	291d      	cmp	r1, #29
 800742e:	d82b      	bhi.n	8007488 <__sflush_r+0xb8>
 8007430:	4a29      	ldr	r2, [pc, #164]	; (80074d8 <__sflush_r+0x108>)
 8007432:	410a      	asrs	r2, r1
 8007434:	07d6      	lsls	r6, r2, #31
 8007436:	d427      	bmi.n	8007488 <__sflush_r+0xb8>
 8007438:	2200      	movs	r2, #0
 800743a:	6062      	str	r2, [r4, #4]
 800743c:	04d9      	lsls	r1, r3, #19
 800743e:	6922      	ldr	r2, [r4, #16]
 8007440:	6022      	str	r2, [r4, #0]
 8007442:	d504      	bpl.n	800744e <__sflush_r+0x7e>
 8007444:	1c42      	adds	r2, r0, #1
 8007446:	d101      	bne.n	800744c <__sflush_r+0x7c>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b903      	cbnz	r3, 800744e <__sflush_r+0x7e>
 800744c:	6560      	str	r0, [r4, #84]	; 0x54
 800744e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007450:	602f      	str	r7, [r5, #0]
 8007452:	2900      	cmp	r1, #0
 8007454:	d0c9      	beq.n	80073ea <__sflush_r+0x1a>
 8007456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800745a:	4299      	cmp	r1, r3
 800745c:	d002      	beq.n	8007464 <__sflush_r+0x94>
 800745e:	4628      	mov	r0, r5
 8007460:	f7ff fc96 	bl	8006d90 <_free_r>
 8007464:	2000      	movs	r0, #0
 8007466:	6360      	str	r0, [r4, #52]	; 0x34
 8007468:	e7c0      	b.n	80073ec <__sflush_r+0x1c>
 800746a:	2301      	movs	r3, #1
 800746c:	4628      	mov	r0, r5
 800746e:	47b0      	blx	r6
 8007470:	1c41      	adds	r1, r0, #1
 8007472:	d1c8      	bne.n	8007406 <__sflush_r+0x36>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0c5      	beq.n	8007406 <__sflush_r+0x36>
 800747a:	2b1d      	cmp	r3, #29
 800747c:	d001      	beq.n	8007482 <__sflush_r+0xb2>
 800747e:	2b16      	cmp	r3, #22
 8007480:	d101      	bne.n	8007486 <__sflush_r+0xb6>
 8007482:	602f      	str	r7, [r5, #0]
 8007484:	e7b1      	b.n	80073ea <__sflush_r+0x1a>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	e7ad      	b.n	80073ec <__sflush_r+0x1c>
 8007490:	690f      	ldr	r7, [r1, #16]
 8007492:	2f00      	cmp	r7, #0
 8007494:	d0a9      	beq.n	80073ea <__sflush_r+0x1a>
 8007496:	0793      	lsls	r3, r2, #30
 8007498:	680e      	ldr	r6, [r1, #0]
 800749a:	bf08      	it	eq
 800749c:	694b      	ldreq	r3, [r1, #20]
 800749e:	600f      	str	r7, [r1, #0]
 80074a0:	bf18      	it	ne
 80074a2:	2300      	movne	r3, #0
 80074a4:	eba6 0807 	sub.w	r8, r6, r7
 80074a8:	608b      	str	r3, [r1, #8]
 80074aa:	f1b8 0f00 	cmp.w	r8, #0
 80074ae:	dd9c      	ble.n	80073ea <__sflush_r+0x1a>
 80074b0:	6a21      	ldr	r1, [r4, #32]
 80074b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074b4:	4643      	mov	r3, r8
 80074b6:	463a      	mov	r2, r7
 80074b8:	4628      	mov	r0, r5
 80074ba:	47b0      	blx	r6
 80074bc:	2800      	cmp	r0, #0
 80074be:	dc06      	bgt.n	80074ce <__sflush_r+0xfe>
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c6:	81a3      	strh	r3, [r4, #12]
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074cc:	e78e      	b.n	80073ec <__sflush_r+0x1c>
 80074ce:	4407      	add	r7, r0
 80074d0:	eba8 0800 	sub.w	r8, r8, r0
 80074d4:	e7e9      	b.n	80074aa <__sflush_r+0xda>
 80074d6:	bf00      	nop
 80074d8:	dfbffffe 	.word	0xdfbffffe

080074dc <_fflush_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	690b      	ldr	r3, [r1, #16]
 80074e0:	4605      	mov	r5, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	b913      	cbnz	r3, 80074ec <_fflush_r+0x10>
 80074e6:	2500      	movs	r5, #0
 80074e8:	4628      	mov	r0, r5
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	b118      	cbz	r0, 80074f6 <_fflush_r+0x1a>
 80074ee:	6a03      	ldr	r3, [r0, #32]
 80074f0:	b90b      	cbnz	r3, 80074f6 <_fflush_r+0x1a>
 80074f2:	f7ff fb35 	bl	8006b60 <__sinit>
 80074f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0f3      	beq.n	80074e6 <_fflush_r+0xa>
 80074fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007500:	07d0      	lsls	r0, r2, #31
 8007502:	d404      	bmi.n	800750e <_fflush_r+0x32>
 8007504:	0599      	lsls	r1, r3, #22
 8007506:	d402      	bmi.n	800750e <_fflush_r+0x32>
 8007508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800750a:	f7ff fc3e 	bl	8006d8a <__retarget_lock_acquire_recursive>
 800750e:	4628      	mov	r0, r5
 8007510:	4621      	mov	r1, r4
 8007512:	f7ff ff5d 	bl	80073d0 <__sflush_r>
 8007516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007518:	07da      	lsls	r2, r3, #31
 800751a:	4605      	mov	r5, r0
 800751c:	d4e4      	bmi.n	80074e8 <_fflush_r+0xc>
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	059b      	lsls	r3, r3, #22
 8007522:	d4e1      	bmi.n	80074e8 <_fflush_r+0xc>
 8007524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007526:	f7ff fc31 	bl	8006d8c <__retarget_lock_release_recursive>
 800752a:	e7dd      	b.n	80074e8 <_fflush_r+0xc>

0800752c <__swbuf_r>:
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	460e      	mov	r6, r1
 8007530:	4614      	mov	r4, r2
 8007532:	4605      	mov	r5, r0
 8007534:	b118      	cbz	r0, 800753e <__swbuf_r+0x12>
 8007536:	6a03      	ldr	r3, [r0, #32]
 8007538:	b90b      	cbnz	r3, 800753e <__swbuf_r+0x12>
 800753a:	f7ff fb11 	bl	8006b60 <__sinit>
 800753e:	69a3      	ldr	r3, [r4, #24]
 8007540:	60a3      	str	r3, [r4, #8]
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	071a      	lsls	r2, r3, #28
 8007546:	d525      	bpl.n	8007594 <__swbuf_r+0x68>
 8007548:	6923      	ldr	r3, [r4, #16]
 800754a:	b31b      	cbz	r3, 8007594 <__swbuf_r+0x68>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	6922      	ldr	r2, [r4, #16]
 8007550:	1a98      	subs	r0, r3, r2
 8007552:	6963      	ldr	r3, [r4, #20]
 8007554:	b2f6      	uxtb	r6, r6
 8007556:	4283      	cmp	r3, r0
 8007558:	4637      	mov	r7, r6
 800755a:	dc04      	bgt.n	8007566 <__swbuf_r+0x3a>
 800755c:	4621      	mov	r1, r4
 800755e:	4628      	mov	r0, r5
 8007560:	f7ff ffbc 	bl	80074dc <_fflush_r>
 8007564:	b9e0      	cbnz	r0, 80075a0 <__swbuf_r+0x74>
 8007566:	68a3      	ldr	r3, [r4, #8]
 8007568:	3b01      	subs	r3, #1
 800756a:	60a3      	str	r3, [r4, #8]
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	6022      	str	r2, [r4, #0]
 8007572:	701e      	strb	r6, [r3, #0]
 8007574:	6962      	ldr	r2, [r4, #20]
 8007576:	1c43      	adds	r3, r0, #1
 8007578:	429a      	cmp	r2, r3
 800757a:	d004      	beq.n	8007586 <__swbuf_r+0x5a>
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	07db      	lsls	r3, r3, #31
 8007580:	d506      	bpl.n	8007590 <__swbuf_r+0x64>
 8007582:	2e0a      	cmp	r6, #10
 8007584:	d104      	bne.n	8007590 <__swbuf_r+0x64>
 8007586:	4621      	mov	r1, r4
 8007588:	4628      	mov	r0, r5
 800758a:	f7ff ffa7 	bl	80074dc <_fflush_r>
 800758e:	b938      	cbnz	r0, 80075a0 <__swbuf_r+0x74>
 8007590:	4638      	mov	r0, r7
 8007592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007594:	4621      	mov	r1, r4
 8007596:	4628      	mov	r0, r5
 8007598:	f000 f806 	bl	80075a8 <__swsetup_r>
 800759c:	2800      	cmp	r0, #0
 800759e:	d0d5      	beq.n	800754c <__swbuf_r+0x20>
 80075a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80075a4:	e7f4      	b.n	8007590 <__swbuf_r+0x64>
	...

080075a8 <__swsetup_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4b2a      	ldr	r3, [pc, #168]	; (8007654 <__swsetup_r+0xac>)
 80075ac:	4605      	mov	r5, r0
 80075ae:	6818      	ldr	r0, [r3, #0]
 80075b0:	460c      	mov	r4, r1
 80075b2:	b118      	cbz	r0, 80075bc <__swsetup_r+0x14>
 80075b4:	6a03      	ldr	r3, [r0, #32]
 80075b6:	b90b      	cbnz	r3, 80075bc <__swsetup_r+0x14>
 80075b8:	f7ff fad2 	bl	8006b60 <__sinit>
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075c2:	0718      	lsls	r0, r3, #28
 80075c4:	d422      	bmi.n	800760c <__swsetup_r+0x64>
 80075c6:	06d9      	lsls	r1, r3, #27
 80075c8:	d407      	bmi.n	80075da <__swsetup_r+0x32>
 80075ca:	2309      	movs	r3, #9
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075d2:	81a3      	strh	r3, [r4, #12]
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075d8:	e034      	b.n	8007644 <__swsetup_r+0x9c>
 80075da:	0758      	lsls	r0, r3, #29
 80075dc:	d512      	bpl.n	8007604 <__swsetup_r+0x5c>
 80075de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075e0:	b141      	cbz	r1, 80075f4 <__swsetup_r+0x4c>
 80075e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075e6:	4299      	cmp	r1, r3
 80075e8:	d002      	beq.n	80075f0 <__swsetup_r+0x48>
 80075ea:	4628      	mov	r0, r5
 80075ec:	f7ff fbd0 	bl	8006d90 <_free_r>
 80075f0:	2300      	movs	r3, #0
 80075f2:	6363      	str	r3, [r4, #52]	; 0x34
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	2300      	movs	r3, #0
 80075fe:	6063      	str	r3, [r4, #4]
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	f043 0308 	orr.w	r3, r3, #8
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	b94b      	cbnz	r3, 8007624 <__swsetup_r+0x7c>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761a:	d003      	beq.n	8007624 <__swsetup_r+0x7c>
 800761c:	4621      	mov	r1, r4
 800761e:	4628      	mov	r0, r5
 8007620:	f000 f840 	bl	80076a4 <__smakebuf_r>
 8007624:	89a0      	ldrh	r0, [r4, #12]
 8007626:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800762a:	f010 0301 	ands.w	r3, r0, #1
 800762e:	d00a      	beq.n	8007646 <__swsetup_r+0x9e>
 8007630:	2300      	movs	r3, #0
 8007632:	60a3      	str	r3, [r4, #8]
 8007634:	6963      	ldr	r3, [r4, #20]
 8007636:	425b      	negs	r3, r3
 8007638:	61a3      	str	r3, [r4, #24]
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	b943      	cbnz	r3, 8007650 <__swsetup_r+0xa8>
 800763e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007642:	d1c4      	bne.n	80075ce <__swsetup_r+0x26>
 8007644:	bd38      	pop	{r3, r4, r5, pc}
 8007646:	0781      	lsls	r1, r0, #30
 8007648:	bf58      	it	pl
 800764a:	6963      	ldrpl	r3, [r4, #20]
 800764c:	60a3      	str	r3, [r4, #8]
 800764e:	e7f4      	b.n	800763a <__swsetup_r+0x92>
 8007650:	2000      	movs	r0, #0
 8007652:	e7f7      	b.n	8007644 <__swsetup_r+0x9c>
 8007654:	2000072c 	.word	0x2000072c

08007658 <__swhatbuf_r>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	460c      	mov	r4, r1
 800765c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007660:	2900      	cmp	r1, #0
 8007662:	b096      	sub	sp, #88	; 0x58
 8007664:	4615      	mov	r5, r2
 8007666:	461e      	mov	r6, r3
 8007668:	da0d      	bge.n	8007686 <__swhatbuf_r+0x2e>
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007670:	f04f 0100 	mov.w	r1, #0
 8007674:	bf0c      	ite	eq
 8007676:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800767a:	2340      	movne	r3, #64	; 0x40
 800767c:	2000      	movs	r0, #0
 800767e:	6031      	str	r1, [r6, #0]
 8007680:	602b      	str	r3, [r5, #0]
 8007682:	b016      	add	sp, #88	; 0x58
 8007684:	bd70      	pop	{r4, r5, r6, pc}
 8007686:	466a      	mov	r2, sp
 8007688:	f000 f848 	bl	800771c <_fstat_r>
 800768c:	2800      	cmp	r0, #0
 800768e:	dbec      	blt.n	800766a <__swhatbuf_r+0x12>
 8007690:	9901      	ldr	r1, [sp, #4]
 8007692:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007696:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800769a:	4259      	negs	r1, r3
 800769c:	4159      	adcs	r1, r3
 800769e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076a2:	e7eb      	b.n	800767c <__swhatbuf_r+0x24>

080076a4 <__smakebuf_r>:
 80076a4:	898b      	ldrh	r3, [r1, #12]
 80076a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076a8:	079d      	lsls	r5, r3, #30
 80076aa:	4606      	mov	r6, r0
 80076ac:	460c      	mov	r4, r1
 80076ae:	d507      	bpl.n	80076c0 <__smakebuf_r+0x1c>
 80076b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	6123      	str	r3, [r4, #16]
 80076b8:	2301      	movs	r3, #1
 80076ba:	6163      	str	r3, [r4, #20]
 80076bc:	b002      	add	sp, #8
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	ab01      	add	r3, sp, #4
 80076c2:	466a      	mov	r2, sp
 80076c4:	f7ff ffc8 	bl	8007658 <__swhatbuf_r>
 80076c8:	9900      	ldr	r1, [sp, #0]
 80076ca:	4605      	mov	r5, r0
 80076cc:	4630      	mov	r0, r6
 80076ce:	f7ff f92f 	bl	8006930 <_malloc_r>
 80076d2:	b948      	cbnz	r0, 80076e8 <__smakebuf_r+0x44>
 80076d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d8:	059a      	lsls	r2, r3, #22
 80076da:	d4ef      	bmi.n	80076bc <__smakebuf_r+0x18>
 80076dc:	f023 0303 	bic.w	r3, r3, #3
 80076e0:	f043 0302 	orr.w	r3, r3, #2
 80076e4:	81a3      	strh	r3, [r4, #12]
 80076e6:	e7e3      	b.n	80076b0 <__smakebuf_r+0xc>
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	6020      	str	r0, [r4, #0]
 80076ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	9b00      	ldr	r3, [sp, #0]
 80076f4:	6163      	str	r3, [r4, #20]
 80076f6:	9b01      	ldr	r3, [sp, #4]
 80076f8:	6120      	str	r0, [r4, #16]
 80076fa:	b15b      	cbz	r3, 8007714 <__smakebuf_r+0x70>
 80076fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007700:	4630      	mov	r0, r6
 8007702:	f000 f81d 	bl	8007740 <_isatty_r>
 8007706:	b128      	cbz	r0, 8007714 <__smakebuf_r+0x70>
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	f023 0303 	bic.w	r3, r3, #3
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	81a3      	strh	r3, [r4, #12]
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	431d      	orrs	r5, r3
 8007718:	81a5      	strh	r5, [r4, #12]
 800771a:	e7cf      	b.n	80076bc <__smakebuf_r+0x18>

0800771c <_fstat_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d07      	ldr	r5, [pc, #28]	; (800773c <_fstat_r+0x20>)
 8007720:	2300      	movs	r3, #0
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	4611      	mov	r1, r2
 8007728:	602b      	str	r3, [r5, #0]
 800772a:	f000 fae3 	bl	8007cf4 <_fstat>
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	d102      	bne.n	8007738 <_fstat_r+0x1c>
 8007732:	682b      	ldr	r3, [r5, #0]
 8007734:	b103      	cbz	r3, 8007738 <_fstat_r+0x1c>
 8007736:	6023      	str	r3, [r4, #0]
 8007738:	bd38      	pop	{r3, r4, r5, pc}
 800773a:	bf00      	nop
 800773c:	20001260 	.word	0x20001260

08007740 <_isatty_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4d06      	ldr	r5, [pc, #24]	; (800775c <_isatty_r+0x1c>)
 8007744:	2300      	movs	r3, #0
 8007746:	4604      	mov	r4, r0
 8007748:	4608      	mov	r0, r1
 800774a:	602b      	str	r3, [r5, #0]
 800774c:	f000 fada 	bl	8007d04 <_isatty>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d102      	bne.n	800775a <_isatty_r+0x1a>
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	b103      	cbz	r3, 800775a <_isatty_r+0x1a>
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	20001260 	.word	0x20001260

08007760 <expf>:
 8007760:	b508      	push	{r3, lr}
 8007762:	ed2d 8b02 	vpush	{d8}
 8007766:	eef0 8a40 	vmov.f32	s17, s0
 800776a:	f000 f9ed 	bl	8007b48 <__ieee754_expf>
 800776e:	eeb0 8a40 	vmov.f32	s16, s0
 8007772:	eeb0 0a68 	vmov.f32	s0, s17
 8007776:	f000 f899 	bl	80078ac <finitef>
 800777a:	b160      	cbz	r0, 8007796 <expf+0x36>
 800777c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80077bc <expf+0x5c>
 8007780:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007788:	dd0a      	ble.n	80077a0 <expf+0x40>
 800778a:	f7ff fad3 	bl	8006d34 <__errno>
 800778e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80077c0 <expf+0x60>
 8007792:	2322      	movs	r3, #34	; 0x22
 8007794:	6003      	str	r3, [r0, #0]
 8007796:	eeb0 0a48 	vmov.f32	s0, s16
 800779a:	ecbd 8b02 	vpop	{d8}
 800779e:	bd08      	pop	{r3, pc}
 80077a0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80077c4 <expf+0x64>
 80077a4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80077a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ac:	d5f3      	bpl.n	8007796 <expf+0x36>
 80077ae:	f7ff fac1 	bl	8006d34 <__errno>
 80077b2:	2322      	movs	r3, #34	; 0x22
 80077b4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80077c8 <expf+0x68>
 80077b8:	6003      	str	r3, [r0, #0]
 80077ba:	e7ec      	b.n	8007796 <expf+0x36>
 80077bc:	42b17217 	.word	0x42b17217
 80077c0:	7f800000 	.word	0x7f800000
 80077c4:	c2cff1b5 	.word	0xc2cff1b5
 80077c8:	00000000 	.word	0x00000000

080077cc <fabsf>:
 80077cc:	ee10 3a10 	vmov	r3, s0
 80077d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077d4:	ee00 3a10 	vmov	s0, r3
 80077d8:	4770      	bx	lr
	...

080077dc <tanhf>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	ee10 5a10 	vmov	r5, s0
 80077e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80077e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80077ea:	ed2d 8b02 	vpush	{d8}
 80077ee:	db0f      	blt.n	8007810 <tanhf+0x34>
 80077f0:	4b2a      	ldr	r3, [pc, #168]	; (800789c <tanhf+0xc0>)
 80077f2:	ed93 6a00 	vldr	s12, [r3]
 80077f6:	edd3 6a00 	vldr	s13, [r3]
 80077fa:	eec6 7a00 	vdiv.f32	s15, s12, s0
 80077fe:	2d00      	cmp	r5, #0
 8007800:	bfac      	ite	ge
 8007802:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 8007806:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 800780a:	ecbd 8b02 	vpop	{d8}
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	4a23      	ldr	r2, [pc, #140]	; (80078a0 <tanhf+0xc4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	dc39      	bgt.n	800788a <tanhf+0xae>
 8007816:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800781a:	da07      	bge.n	800782c <tanhf+0x50>
 800781c:	4b1f      	ldr	r3, [pc, #124]	; (800789c <tanhf+0xc0>)
 800781e:	edd3 7a00 	vldr	s15, [r3]
 8007822:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007826:	ee27 0a80 	vmul.f32	s0, s15, s0
 800782a:	e7ee      	b.n	800780a <tanhf+0x2e>
 800782c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007830:	4c1c      	ldr	r4, [pc, #112]	; (80078a4 <tanhf+0xc8>)
 8007832:	db19      	blt.n	8007868 <tanhf+0x8c>
 8007834:	f7ff ffca 	bl	80077cc <fabsf>
 8007838:	edd4 7a00 	vldr	s15, [r4]
 800783c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007840:	f000 f842 	bl	80078c8 <expm1f>
 8007844:	4b15      	ldr	r3, [pc, #84]	; (800789c <tanhf+0xc0>)
 8007846:	edd3 7a00 	vldr	s15, [r3]
 800784a:	edd4 6a00 	vldr	s13, [r4]
 800784e:	ed94 7a00 	vldr	s14, [r4]
 8007852:	ee37 0a00 	vadd.f32	s0, s14, s0
 8007856:	ee86 7a80 	vdiv.f32	s14, s13, s0
 800785a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800785e:	2d00      	cmp	r5, #0
 8007860:	bfb8      	it	lt
 8007862:	eeb1 0a40 	vneglt.f32	s0, s0
 8007866:	e7d0      	b.n	800780a <tanhf+0x2e>
 8007868:	ed94 8a00 	vldr	s16, [r4]
 800786c:	f7ff ffae 	bl	80077cc <fabsf>
 8007870:	ee28 0a40 	vnmul.f32	s0, s16, s0
 8007874:	f000 f828 	bl	80078c8 <expm1f>
 8007878:	edd4 7a00 	vldr	s15, [r4]
 800787c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007880:	eeb1 7a40 	vneg.f32	s14, s0
 8007884:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007888:	e7e9      	b.n	800785e <tanhf+0x82>
 800788a:	4b04      	ldr	r3, [pc, #16]	; (800789c <tanhf+0xc0>)
 800788c:	ed93 0a00 	vldr	s0, [r3]
 8007890:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <tanhf+0xcc>)
 8007892:	edd3 7a00 	vldr	s15, [r3]
 8007896:	ee30 0a67 	vsub.f32	s0, s0, s15
 800789a:	e7e0      	b.n	800785e <tanhf+0x82>
 800789c:	20000730 	.word	0x20000730
 80078a0:	41afffff 	.word	0x41afffff
 80078a4:	20000738 	.word	0x20000738
 80078a8:	20000734 	.word	0x20000734

080078ac <finitef>:
 80078ac:	b082      	sub	sp, #8
 80078ae:	ed8d 0a01 	vstr	s0, [sp, #4]
 80078b2:	9801      	ldr	r0, [sp, #4]
 80078b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80078b8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80078bc:	bfac      	ite	ge
 80078be:	2000      	movge	r0, #0
 80078c0:	2001      	movlt	r0, #1
 80078c2:	b002      	add	sp, #8
 80078c4:	4770      	bx	lr
	...

080078c8 <expm1f>:
 80078c8:	ee10 2a10 	vmov	r2, s0
 80078cc:	497e      	ldr	r1, [pc, #504]	; (8007ac8 <expm1f+0x200>)
 80078ce:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80078d2:	428b      	cmp	r3, r1
 80078d4:	d921      	bls.n	800791a <expm1f+0x52>
 80078d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80078da:	d902      	bls.n	80078e2 <expm1f+0x1a>
 80078dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80078e0:	4770      	bx	lr
 80078e2:	d106      	bne.n	80078f2 <expm1f+0x2a>
 80078e4:	2a00      	cmp	r2, #0
 80078e6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80078ea:	bfb8      	it	lt
 80078ec:	eeb0 0a67 	vmovlt.f32	s0, s15
 80078f0:	4770      	bx	lr
 80078f2:	2a00      	cmp	r2, #0
 80078f4:	db05      	blt.n	8007902 <expm1f+0x3a>
 80078f6:	4975      	ldr	r1, [pc, #468]	; (8007acc <expm1f+0x204>)
 80078f8:	428b      	cmp	r3, r1
 80078fa:	d95c      	bls.n	80079b6 <expm1f+0xee>
 80078fc:	2000      	movs	r0, #0
 80078fe:	f000 b91d 	b.w	8007b3c <__math_oflowf>
 8007902:	eddf 7a73 	vldr	s15, [pc, #460]	; 8007ad0 <expm1f+0x208>
 8007906:	ee70 7a27 	vadd.f32	s15, s0, s15
 800790a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800790e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007912:	d550      	bpl.n	80079b6 <expm1f+0xee>
 8007914:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007918:	4770      	bx	lr
 800791a:	496e      	ldr	r1, [pc, #440]	; (8007ad4 <expm1f+0x20c>)
 800791c:	428b      	cmp	r3, r1
 800791e:	d967      	bls.n	80079f0 <expm1f+0x128>
 8007920:	496d      	ldr	r1, [pc, #436]	; (8007ad8 <expm1f+0x210>)
 8007922:	428b      	cmp	r3, r1
 8007924:	d847      	bhi.n	80079b6 <expm1f+0xee>
 8007926:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007adc <expm1f+0x214>
 800792a:	2a00      	cmp	r2, #0
 800792c:	bfa7      	ittee	ge
 800792e:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8007932:	eddf 6a6b 	vldrge	s13, [pc, #428]	; 8007ae0 <expm1f+0x218>
 8007936:	eddf 6a6b 	vldrlt	s13, [pc, #428]	; 8007ae4 <expm1f+0x21c>
 800793a:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800793e:	bfac      	ite	ge
 8007940:	2301      	movge	r3, #1
 8007942:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007946:	ee37 0a66 	vsub.f32	s0, s14, s13
 800794a:	ee77 7a40 	vsub.f32	s15, s14, s0
 800794e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007952:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8007956:	ee20 4a25 	vmul.f32	s8, s0, s11
 800795a:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8007ae8 <expm1f+0x220>
 800795e:	eddf 6a63 	vldr	s13, [pc, #396]	; 8007aec <expm1f+0x224>
 8007962:	ed9f 5a63 	vldr	s10, [pc, #396]	; 8007af0 <expm1f+0x228>
 8007966:	ee20 7a04 	vmul.f32	s14, s0, s8
 800796a:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800796e:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007972:	ed9f 6a60 	vldr	s12, [pc, #384]	; 8007af4 <expm1f+0x22c>
 8007976:	eea6 6a87 	vfma.f32	s12, s13, s14
 800797a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007af8 <expm1f+0x230>
 800797e:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007982:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007986:	eea6 5a87 	vfma.f32	s10, s13, s14
 800798a:	eef0 6a46 	vmov.f32	s13, s12
 800798e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007992:	eee4 4a66 	vfms.f32	s9, s8, s13
 8007996:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800799a:	eea0 4a64 	vfms.f32	s8, s0, s9
 800799e:	ee36 5ae4 	vsub.f32	s10, s13, s9
 80079a2:	eec5 6a04 	vdiv.f32	s13, s10, s8
 80079a6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80079aa:	bb7b      	cbnz	r3, 8007a0c <expm1f+0x144>
 80079ac:	ee90 7a26 	vfnms.f32	s14, s0, s13
 80079b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80079b4:	4770      	bx	lr
 80079b6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80079c0:	bfb8      	it	lt
 80079c2:	eef0 7a47 	vmovlt.f32	s15, s14
 80079c6:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8007afc <expm1f+0x234>
 80079ca:	ee40 7a07 	vmla.f32	s15, s0, s14
 80079ce:	eeb0 7a40 	vmov.f32	s14, s0
 80079d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80079da:	ee17 3a90 	vmov	r3, s15
 80079de:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8007adc <expm1f+0x214>
 80079e2:	eea6 7ae7 	vfms.f32	s14, s13, s15
 80079e6:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8007ae0 <expm1f+0x218>
 80079ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80079ee:	e7aa      	b.n	8007946 <expm1f+0x7e>
 80079f0:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80079f4:	d208      	bcs.n	8007a08 <expm1f+0x140>
 80079f6:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007b00 <expm1f+0x238>
 80079fa:	ee70 7a27 	vadd.f32	s15, s0, s15
 80079fe:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8007a02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a06:	4770      	bx	lr
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e7a2      	b.n	8007952 <expm1f+0x8a>
 8007a0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8007a16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a1a:	d106      	bne.n	8007a2a <expm1f+0x162>
 8007a1c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007a20:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8007a24:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8007a28:	4770      	bx	lr
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d118      	bne.n	8007a60 <expm1f+0x198>
 8007a2e:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8007a32:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a3a:	bf5b      	ittet	pl
 8007a3c:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8007a40:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8007a44:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8007a48:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8007a4c:	bf43      	ittte	mi
 8007a4e:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 8007a52:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8007a56:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8007a5a:	eeb0 0a46 	vmovpl.f32	s0, s12
 8007a5e:	4770      	bx	lr
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	2a39      	cmp	r2, #57	; 0x39
 8007a64:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8007a68:	d90b      	bls.n	8007a82 <expm1f+0x1ba>
 8007a6a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007a6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007a72:	ee17 3a90 	vmov	r3, s15
 8007a76:	4419      	add	r1, r3
 8007a78:	ee07 1a90 	vmov	s15, r1
 8007a7c:	ee37 0ac6 	vsub.f32	s0, s15, s12
 8007a80:	4770      	bx	lr
 8007a82:	2b16      	cmp	r3, #22
 8007a84:	dc11      	bgt.n	8007aaa <expm1f+0x1e2>
 8007a86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a8a:	fa42 f303 	asr.w	r3, r2, r3
 8007a8e:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8007a92:	ee07 3a10 	vmov	s14, r3
 8007a96:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a9e:	ee17 3a90 	vmov	r3, s15
 8007aa2:	440b      	add	r3, r1
 8007aa4:	ee00 3a10 	vmov	s0, r3
 8007aa8:	4770      	bx	lr
 8007aaa:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8007aae:	05db      	lsls	r3, r3, #23
 8007ab0:	ee07 3a10 	vmov	s14, r3
 8007ab4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ab8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007abc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007ac0:	ee17 3a90 	vmov	r3, s15
 8007ac4:	e7ed      	b.n	8007aa2 <expm1f+0x1da>
 8007ac6:	bf00      	nop
 8007ac8:	4195b843 	.word	0x4195b843
 8007acc:	42b17217 	.word	0x42b17217
 8007ad0:	0da24260 	.word	0x0da24260
 8007ad4:	3eb17218 	.word	0x3eb17218
 8007ad8:	3f851591 	.word	0x3f851591
 8007adc:	3f317180 	.word	0x3f317180
 8007ae0:	3717f7d1 	.word	0x3717f7d1
 8007ae4:	b717f7d1 	.word	0xb717f7d1
 8007ae8:	b457edbb 	.word	0xb457edbb
 8007aec:	36867e54 	.word	0x36867e54
 8007af0:	bd088889 	.word	0xbd088889
 8007af4:	b8a670cd 	.word	0xb8a670cd
 8007af8:	3ad00d01 	.word	0x3ad00d01
 8007afc:	3fb8aa3b 	.word	0x3fb8aa3b
 8007b00:	7149f2ca 	.word	0x7149f2ca

08007b04 <with_errnof>:
 8007b04:	b513      	push	{r0, r1, r4, lr}
 8007b06:	4604      	mov	r4, r0
 8007b08:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007b0c:	f7ff f912 	bl	8006d34 <__errno>
 8007b10:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007b14:	6004      	str	r4, [r0, #0]
 8007b16:	b002      	add	sp, #8
 8007b18:	bd10      	pop	{r4, pc}

08007b1a <xflowf>:
 8007b1a:	b130      	cbz	r0, 8007b2a <xflowf+0x10>
 8007b1c:	eef1 7a40 	vneg.f32	s15, s0
 8007b20:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007b24:	2022      	movs	r0, #34	; 0x22
 8007b26:	f7ff bfed 	b.w	8007b04 <with_errnof>
 8007b2a:	eef0 7a40 	vmov.f32	s15, s0
 8007b2e:	e7f7      	b.n	8007b20 <xflowf+0x6>

08007b30 <__math_uflowf>:
 8007b30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b38 <__math_uflowf+0x8>
 8007b34:	f7ff bff1 	b.w	8007b1a <xflowf>
 8007b38:	10000000 	.word	0x10000000

08007b3c <__math_oflowf>:
 8007b3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b44 <__math_oflowf+0x8>
 8007b40:	f7ff bfeb 	b.w	8007b1a <xflowf>
 8007b44:	70000000 	.word	0x70000000

08007b48 <__ieee754_expf>:
 8007b48:	ee10 2a10 	vmov	r2, s0
 8007b4c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007b50:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007b54:	d902      	bls.n	8007b5c <__ieee754_expf+0x14>
 8007b56:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007b5a:	4770      	bx	lr
 8007b5c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8007b60:	d106      	bne.n	8007b70 <__ieee754_expf+0x28>
 8007b62:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8007c9c <__ieee754_expf+0x154>
 8007b66:	2900      	cmp	r1, #0
 8007b68:	bf18      	it	ne
 8007b6a:	eeb0 0a67 	vmovne.f32	s0, s15
 8007b6e:	4770      	bx	lr
 8007b70:	484b      	ldr	r0, [pc, #300]	; (8007ca0 <__ieee754_expf+0x158>)
 8007b72:	4282      	cmp	r2, r0
 8007b74:	dd02      	ble.n	8007b7c <__ieee754_expf+0x34>
 8007b76:	2000      	movs	r0, #0
 8007b78:	f7ff bfe0 	b.w	8007b3c <__math_oflowf>
 8007b7c:	2a00      	cmp	r2, #0
 8007b7e:	da05      	bge.n	8007b8c <__ieee754_expf+0x44>
 8007b80:	4a48      	ldr	r2, [pc, #288]	; (8007ca4 <__ieee754_expf+0x15c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d902      	bls.n	8007b8c <__ieee754_expf+0x44>
 8007b86:	2000      	movs	r0, #0
 8007b88:	f7ff bfd2 	b.w	8007b30 <__math_uflowf>
 8007b8c:	4a46      	ldr	r2, [pc, #280]	; (8007ca8 <__ieee754_expf+0x160>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007b94:	d952      	bls.n	8007c3c <__ieee754_expf+0xf4>
 8007b96:	4a45      	ldr	r2, [pc, #276]	; (8007cac <__ieee754_expf+0x164>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8007b9e:	d834      	bhi.n	8007c0a <__ieee754_expf+0xc2>
 8007ba0:	4b43      	ldr	r3, [pc, #268]	; (8007cb0 <__ieee754_expf+0x168>)
 8007ba2:	4413      	add	r3, r2
 8007ba4:	ed93 7a00 	vldr	s14, [r3]
 8007ba8:	4b42      	ldr	r3, [pc, #264]	; (8007cb4 <__ieee754_expf+0x16c>)
 8007baa:	4413      	add	r3, r2
 8007bac:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007bb0:	f1c1 0201 	rsb	r2, r1, #1
 8007bb4:	edd3 7a00 	vldr	s15, [r3]
 8007bb8:	1a52      	subs	r2, r2, r1
 8007bba:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007bbe:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007bc2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8007cb8 <__ieee754_expf+0x170>
 8007bc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007cbc <__ieee754_expf+0x174>
 8007bca:	eee6 6a05 	vfma.f32	s13, s12, s10
 8007bce:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8007cc0 <__ieee754_expf+0x178>
 8007bd2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007bd6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007cc4 <__ieee754_expf+0x17c>
 8007bda:	eee5 6a06 	vfma.f32	s13, s10, s12
 8007bde:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8007cc8 <__ieee754_expf+0x180>
 8007be2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007be6:	eef0 6a40 	vmov.f32	s13, s0
 8007bea:	eee5 6a46 	vfms.f32	s13, s10, s12
 8007bee:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8007bf2:	ee20 5a26 	vmul.f32	s10, s0, s13
 8007bf6:	bb92      	cbnz	r2, 8007c5e <__ieee754_expf+0x116>
 8007bf8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007bfc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007c00:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007c04:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8007c08:	4770      	bx	lr
 8007c0a:	4b30      	ldr	r3, [pc, #192]	; (8007ccc <__ieee754_expf+0x184>)
 8007c0c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007cd0 <__ieee754_expf+0x188>
 8007c10:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007cd4 <__ieee754_expf+0x18c>
 8007c14:	4413      	add	r3, r2
 8007c16:	edd3 7a00 	vldr	s15, [r3]
 8007c1a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007c1e:	eeb0 7a40 	vmov.f32	s14, s0
 8007c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c26:	ee17 2a90 	vmov	r2, s15
 8007c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c2e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007c32:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007cd8 <__ieee754_expf+0x190>
 8007c36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007c3a:	e7be      	b.n	8007bba <__ieee754_expf+0x72>
 8007c3c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8007c40:	d20b      	bcs.n	8007c5a <__ieee754_expf+0x112>
 8007c42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007cdc <__ieee754_expf+0x194>
 8007c46:	ee70 6a26 	vadd.f32	s13, s0, s13
 8007c4a:	eef4 6ae5 	vcmpe.f32	s13, s11
 8007c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c52:	dd02      	ble.n	8007c5a <__ieee754_expf+0x112>
 8007c54:	ee30 0a25 	vadd.f32	s0, s0, s11
 8007c58:	4770      	bx	lr
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	e7af      	b.n	8007bbe <__ieee754_expf+0x76>
 8007c5e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007c62:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8007c66:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8007c6a:	bfb8      	it	lt
 8007c6c:	3264      	addlt	r2, #100	; 0x64
 8007c6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c76:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007c7a:	ee17 3a90 	vmov	r3, s15
 8007c7e:	bfab      	itete	ge
 8007c80:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007c84:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007c88:	ee00 3a10 	vmovge	s0, r3
 8007c8c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8007ce0 <__ieee754_expf+0x198>
 8007c90:	bfbc      	itt	lt
 8007c92:	ee00 3a10 	vmovlt	s0, r3
 8007c96:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8007c9a:	4770      	bx	lr
 8007c9c:	00000000 	.word	0x00000000
 8007ca0:	42b17217 	.word	0x42b17217
 8007ca4:	42cff1b5 	.word	0x42cff1b5
 8007ca8:	3eb17218 	.word	0x3eb17218
 8007cac:	3f851591 	.word	0x3f851591
 8007cb0:	0800c4ec 	.word	0x0800c4ec
 8007cb4:	0800c4f4 	.word	0x0800c4f4
 8007cb8:	3331bb4c 	.word	0x3331bb4c
 8007cbc:	b5ddea0e 	.word	0xb5ddea0e
 8007cc0:	388ab355 	.word	0x388ab355
 8007cc4:	bb360b61 	.word	0xbb360b61
 8007cc8:	3e2aaaab 	.word	0x3e2aaaab
 8007ccc:	0800c4e4 	.word	0x0800c4e4
 8007cd0:	3fb8aa3b 	.word	0x3fb8aa3b
 8007cd4:	3f317180 	.word	0x3f317180
 8007cd8:	3717f7d1 	.word	0x3717f7d1
 8007cdc:	7149f2ca 	.word	0x7149f2ca
 8007ce0:	0d800000 	.word	0x0d800000

08007ce4 <_close>:
 8007ce4:	4b02      	ldr	r3, [pc, #8]	; (8007cf0 <_close+0xc>)
 8007ce6:	2258      	movs	r2, #88	; 0x58
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cee:	4770      	bx	lr
 8007cf0:	20001260 	.word	0x20001260

08007cf4 <_fstat>:
 8007cf4:	4b02      	ldr	r3, [pc, #8]	; (8007d00 <_fstat+0xc>)
 8007cf6:	2258      	movs	r2, #88	; 0x58
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cfe:	4770      	bx	lr
 8007d00:	20001260 	.word	0x20001260

08007d04 <_isatty>:
 8007d04:	4b02      	ldr	r3, [pc, #8]	; (8007d10 <_isatty+0xc>)
 8007d06:	2258      	movs	r2, #88	; 0x58
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	20001260 	.word	0x20001260

08007d14 <_lseek>:
 8007d14:	4b02      	ldr	r3, [pc, #8]	; (8007d20 <_lseek+0xc>)
 8007d16:	2258      	movs	r2, #88	; 0x58
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d1e:	4770      	bx	lr
 8007d20:	20001260 	.word	0x20001260

08007d24 <_read>:
 8007d24:	4b02      	ldr	r3, [pc, #8]	; (8007d30 <_read+0xc>)
 8007d26:	2258      	movs	r2, #88	; 0x58
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d2e:	4770      	bx	lr
 8007d30:	20001260 	.word	0x20001260

08007d34 <_write>:
 8007d34:	4b02      	ldr	r3, [pc, #8]	; (8007d40 <_write+0xc>)
 8007d36:	2258      	movs	r2, #88	; 0x58
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d3e:	4770      	bx	lr
 8007d40:	20001260 	.word	0x20001260

08007d44 <_init>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	bf00      	nop
 8007d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4a:	bc08      	pop	{r3}
 8007d4c:	469e      	mov	lr, r3
 8007d4e:	4770      	bx	lr

08007d50 <_fini>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr
