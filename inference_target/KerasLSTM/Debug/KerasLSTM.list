
KerasLSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004774  08007b40  08007b40  00017b40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2b4  0800c2b4  00020644  2**0
                  CONTENTS
  4 .ARM          00000000  0800c2b4  0800c2b4  00020644  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c2b4  0800c2b4  00020644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2b4  0800c2b4  0001c2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2b8  0800c2b8  0001c2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000644  20000000  0800c2bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020644  2**0
                  CONTENTS
 10 .bss          00000b24  20000644  20000644  00020644  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  20001168  20001168  00020644  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020644  2**0
                  CONTENTS, READONLY
 13 .comment      00000093  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bc92  00000000  00000000  00020707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f02  00000000  00000000  0002c399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000868  00000000  00000000  0002e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000641  00000000  00000000  0002eb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000220d6  00000000  00000000  0002f149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bb2a  00000000  00000000  0005121f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c7e68  00000000  00000000  0005cd49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000028e0  00000000  00000000  00124bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00127494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000644 	.word	0x20000644
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b24 	.word	0x08007b24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000648 	.word	0x20000648
 80001cc:	08007b24 	.word	0x08007b24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <get_input>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void get_input()
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
    for(int i=0; i<AI_NETWORK_IN_1_SIZE; i++)
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	e009      	b.n	8000290 <get_input+0x20>
    {
        in_data[i] = 1.0;
 800027c:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <get_input+0x38>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	4413      	add	r3, r2
 8000284:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000288:	601a      	str	r2, [r3, #0]
    for(int i=0; i<AI_NETWORK_IN_1_SIZE; i++)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3301      	adds	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8000296:	dbf1      	blt.n	800027c <get_input+0xc>
    }
}
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000b10 	.word	0x20000b10

080002ac <ai_log_error>:

void ai_log_error(const ai_error err)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
 80002b4:	793b      	ldrb	r3, [r7, #4]
 80002b6:	4619      	mov	r1, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80002be:	461a      	mov	r2, r3
 80002c0:	4803      	ldr	r0, [pc, #12]	; (80002d0 <ai_log_error+0x24>)
 80002c2:	f006 fba3 	bl	8006a0c <iprintf>
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	08007b40 	.word	0x08007b40

080002d4 <ai_init>:


int ai_init()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
    ai_error error;
    const ai_handle acts[] = {activations};
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <ai_init+0x5c>)
 80002dc:	603b      	str	r3, [r7, #0]

    error = ai_network_create_and_init(&network, acts, NULL);
 80002de:	463b      	mov	r3, r7
 80002e0:	2200      	movs	r2, #0
 80002e2:	4619      	mov	r1, r3
 80002e4:	4813      	ldr	r0, [pc, #76]	; (8000334 <ai_init+0x60>)
 80002e6:	f002 fdd1 	bl	8002e8c <ai_network_create_and_init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	607b      	str	r3, [r7, #4]
    if (error.type != AI_ERROR_NONE)
 80002ee:	793b      	ldrb	r3, [r7, #4]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d005      	beq.n	8000300 <ai_init+0x2c>
    {
        ai_log_error(error);
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f7ff ffd9 	bl	80002ac <ai_log_error>
        return -1;
 80002fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002fe:	e012      	b.n	8000326 <ai_init+0x52>
    }

    ai_input = ai_network_inputs_get(network, NULL);
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <ai_init+0x60>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f002 fe34 	bl	8002f74 <ai_network_inputs_get>
 800030c:	4603      	mov	r3, r0
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <ai_init+0x64>)
 8000310:	6013      	str	r3, [r2, #0]
    ai_output = ai_network_outputs_get(network, NULL);
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <ai_init+0x60>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f002 fe45 	bl	8002fa8 <ai_network_outputs_get>
 800031e:	4603      	mov	r3, r0
 8000320:	4a06      	ldr	r2, [pc, #24]	; (800033c <ai_init+0x68>)
 8000322:	6013      	str	r3, [r2, #0]

    return 0;
 8000324:	2300      	movs	r3, #0
}
 8000326:	4618      	mov	r0, r3
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000710 	.word	0x20000710
 8000334:	2000070c 	.word	0x2000070c
 8000338:	20000f90 	.word	0x20000f90
 800033c:	20000f94 	.word	0x20000f94

08000340 <ai_run>:

int ai_run(const void* in_data, const void* out_data)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	6039      	str	r1, [r7, #0]
    ai_i32 n_batch;
    ai_error error;

    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800034a:	4b13      	ldr	r3, [pc, #76]	; (8000398 <ai_run+0x58>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <ai_run+0x5c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	605a      	str	r2, [r3, #4]

    n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <ai_run+0x60>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <ai_run+0x58>)
 8000360:	6811      	ldr	r1, [r2, #0]
 8000362:	4a0e      	ldr	r2, [pc, #56]	; (800039c <ai_run+0x5c>)
 8000364:	6812      	ldr	r2, [r2, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f002 fe74 	bl	8003054 <ai_network_run>
 800036c:	60f8      	str	r0, [r7, #12]
    if (n_batch != 1)
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d00c      	beq.n	800038e <ai_run+0x4e>
    {
        error = ai_network_get_error(network);
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <ai_run+0x60>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f002 fd65 	bl	8002e48 <ai_network_get_error>
 800037e:	4603      	mov	r3, r0
 8000380:	60bb      	str	r3, [r7, #8]
        ai_log_error(error);
 8000382:	68b8      	ldr	r0, [r7, #8]
 8000384:	f7ff ff92 	bl	80002ac <ai_log_error>
        return -1;
 8000388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800038c:	e000      	b.n	8000390 <ai_run+0x50>
    }

    return 0;
 800038e:	2300      	movs	r3, #0
}
 8000390:	4618      	mov	r0, r3
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000f90 	.word	0x20000f90
 800039c:	20000f94 	.word	0x20000f94
 80003a0:	2000070c 	.word	0x2000070c

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a8:	f000 faa6 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ac:	f000 f814 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b0:	f000 f8a6 	bl	8000500 <MX_GPIO_Init>
  MX_CRC_Init();
 80003b4:	f000 f852 	bl	800045c <MX_CRC_Init>
  MX_USART2_UART_Init();
 80003b8:	f000 f872 	bl	80004a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ai_init();
 80003bc:	f7ff ff8a 	bl	80002d4 <ai_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  get_input();
 80003c0:	f7ff ff56 	bl	8000270 <get_input>
	  ai_run(in_data, out_data);
 80003c4:	4902      	ldr	r1, [pc, #8]	; (80003d0 <main+0x2c>)
 80003c6:	4803      	ldr	r0, [pc, #12]	; (80003d4 <main+0x30>)
 80003c8:	f7ff ffba 	bl	8000340 <ai_run>
	  get_input();
 80003cc:	e7f8      	b.n	80003c0 <main+0x1c>
 80003ce:	bf00      	nop
 80003d0:	20000f88 	.word	0x20000f88
 80003d4:	20000b10 	.word	0x20000b10

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b090      	sub	sp, #64	; 0x40
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0318 	add.w	r3, r7, #24
 80003e2:	2228      	movs	r2, #40	; 0x28
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f006 fb65 	bl	8006ab6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fe:	2301      	movs	r3, #1
 8000400:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000402:	2310      	movs	r3, #16
 8000404:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000406:	2302      	movs	r3, #2
 8000408:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800040a:	2300      	movs	r3, #0
 800040c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800040e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000412:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000414:	f107 0318 	add.w	r3, r7, #24
 8000418:	4618      	mov	r0, r3
 800041a:	f000 fe35 	bl	8001088 <HAL_RCC_OscConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000424:	f000 f8d2 	bl	80005cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000428:	230f      	movs	r3, #15
 800042a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042c:	2302      	movs	r3, #2
 800042e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000438:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f001 fe5e 	bl	8002104 <HAL_RCC_ClockConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800044e:	f000 f8bd 	bl	80005cc <Error_Handler>
  }
}
 8000452:	bf00      	nop
 8000454:	3740      	adds	r7, #64	; 0x40
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000460:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <MX_CRC_Init+0x3c>)
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <MX_CRC_Init+0x40>)
 8000464:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_CRC_Init+0x3c>)
 8000468:	2200      	movs	r2, #0
 800046a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <MX_CRC_Init+0x3c>)
 800046e:	2200      	movs	r2, #0
 8000470:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_CRC_Init+0x3c>)
 8000474:	2200      	movs	r2, #0
 8000476:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <MX_CRC_Init+0x3c>)
 800047a:	2200      	movs	r2, #0
 800047c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_CRC_Init+0x3c>)
 8000480:	2201      	movs	r2, #1
 8000482:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000484:	4804      	ldr	r0, [pc, #16]	; (8000498 <MX_CRC_Init+0x3c>)
 8000486:	f000 fb83 	bl	8000b90 <HAL_CRC_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000490:	f000 f89c 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000660 	.word	0x20000660
 800049c:	40023000 	.word	0x40023000

080004a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004a6:	4a15      	ldr	r2, [pc, #84]	; (80004fc <MX_USART2_UART_Init+0x5c>)
 80004a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004c6:	220c      	movs	r2, #12
 80004c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004e4:	f002 f844 	bl	8002570 <HAL_UART_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004ee:	f000 f86d 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000684 	.word	0x20000684
 80004fc:	40004400 	.word	0x40004400

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a2a      	ldr	r2, [pc, #168]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800051c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052e:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a24      	ldr	r2, [pc, #144]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800054c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a18      	ldr	r2, [pc, #96]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2120      	movs	r1, #32
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f000 fd6b 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000588:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <MX_GPIO_Init+0xc8>)
 800059a:	f000 fbeb 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800059e:	2320      	movs	r3, #32
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f000 fbdc 	bl	8000d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	; 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40021000 	.word	0x40021000
 80005c8:	48000800 	.word	0x48000800

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <Error_Handler+0x8>
	...

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_MspInit+0x44>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <HAL_MspInit+0x44>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_MspInit+0x44>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_MspInit+0x44>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <HAL_MspInit+0x44>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_MspInit+0x44>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800060e:	2007      	movs	r0, #7
 8000610:	f000 fa8a 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <HAL_CRC_MspInit+0x38>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d10b      	bne.n	800064a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_CRC_MspInit+0x3c>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a09      	ldr	r2, [pc, #36]	; (800065c <HAL_CRC_MspInit+0x3c>)
 8000638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <HAL_CRC_MspInit+0x3c>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023000 	.word	0x40023000
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a17      	ldr	r2, [pc, #92]	; (80006dc <HAL_UART_MspInit+0x7c>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d128      	bne.n	80006d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_UART_MspInit+0x80>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <HAL_UART_MspInit+0x80>)
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	61d3      	str	r3, [r2, #28]
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_UART_MspInit+0x80>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <HAL_UART_MspInit+0x80>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <HAL_UART_MspInit+0x80>)
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	6153      	str	r3, [r2, #20]
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_UART_MspInit+0x80>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006b2:	230c      	movs	r3, #12
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006c2:	2307      	movs	r3, #7
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f000 fb50 	bl	8000d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	; 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40004400 	.word	0x40004400
 80006e0:	40021000 	.word	0x40021000

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler+0x4>

080006f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <UsageFault_Handler+0x4>

08000702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f928 	bl	8000984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	e00a      	b.n	8000760 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800074a:	f3af 8000 	nop.w
 800074e:	4601      	mov	r1, r0
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	60ba      	str	r2, [r7, #8]
 8000756:	b2ca      	uxtb	r2, r1
 8000758:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3301      	adds	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	429a      	cmp	r2, r3
 8000766:	dbf0      	blt.n	800074a <_read+0x12>
  }

  return len;
 8000768:	687b      	ldr	r3, [r7, #4]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b086      	sub	sp, #24
 8000776:	af00      	add	r7, sp, #0
 8000778:	60f8      	str	r0, [r7, #12]
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	e009      	b.n	8000798 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	60ba      	str	r2, [r7, #8]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3301      	adds	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	dbf1      	blt.n	8000784 <_write+0x12>
  }
  return len;
 80007a0:	687b      	ldr	r3, [r7, #4]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <_close>:

int _close(int file)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d2:	605a      	str	r2, [r3, #4]
  return 0;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <_isatty>:

int _isatty(int file)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007ea:	2301      	movs	r3, #1
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800081c:	4a14      	ldr	r2, [pc, #80]	; (8000870 <_sbrk+0x5c>)
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <_sbrk+0x60>)
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <_sbrk+0x64>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <_sbrk+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	429a      	cmp	r2, r3
 8000842:	d207      	bcs.n	8000854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000844:	f006 f996 	bl	8006b74 <__errno>
 8000848:	4603      	mov	r3, r0
 800084a:	220c      	movs	r2, #12
 800084c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000852:	e009      	b.n	8000868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <_sbrk+0x64>)
 8000864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20003000 	.word	0x20003000
 8000874:	00000800 	.word	0x00000800
 8000878:	20000f98 	.word	0x20000f98
 800087c:	20001168 	.word	0x20001168

08000880 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a8:	f7ff ffea 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	; (80008e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <LoopForever+0xe>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	; (80008f0 <LoopForever+0x16>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d2:	f006 f955 	bl	8006b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008d6:	f7ff fd65 	bl	80003a4 <main>

080008da <LoopForever>:

LoopForever:
    b LoopForever
 80008da:	e7fe      	b.n	80008da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008dc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	20000644 	.word	0x20000644
  ldr r2, =_sidata
 80008e8:	0800c2bc 	.word	0x0800c2bc
  ldr r2, =_sbss
 80008ec:	20000644 	.word	0x20000644
  ldr r4, =_ebss
 80008f0:	20001168 	.word	0x20001168

080008f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC1_2_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_Init+0x28>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <HAL_Init+0x28>)
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000908:	2003      	movs	r0, #3
 800090a:	f000 f90d 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090e:	2000      	movs	r0, #0
 8000910:	f000 f808 	bl	8000924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000914:	f7ff fe60 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40022000 	.word	0x40022000

08000924 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0x54>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_InitTick+0x58>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	fbb3 f3f1 	udiv	r3, r3, r1
 800093e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f917 	bl	8000b76 <HAL_SYSTICK_Config>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e00e      	b.n	8000970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b0f      	cmp	r3, #15
 8000956:	d80a      	bhi.n	800096e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000960:	f000 f8ed 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000964:	4a06      	ldr	r2, [pc, #24]	; (8000980 <HAL_InitTick+0x5c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	e000      	b.n	8000970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000000 	.word	0x20000000
 800097c:	20000008 	.word	0x20000008
 8000980:	20000004 	.word	0x20000004

08000984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_IncTick+0x20>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_IncTick+0x24>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4413      	add	r3, r2
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_IncTick+0x24>)
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000f9c 	.word	0x20000f9c

080009ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <HAL_GetTick+0x14>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000f9c 	.word	0x20000f9c

080009c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <__NVIC_GetPriorityGrouping+0x18>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	f003 0307 	and.w	r3, r3, #7
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	; 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b08:	f7ff ff8e 	bl	8000a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff47 	bl	80009c4 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff5c 	bl	8000a0c <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff8e 	bl	8000a7c <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5d 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffb0 	bl	8000ae4 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e054      	b.n	8000c4c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7f5b      	ldrb	r3, [r3, #29]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d105      	bne.n	8000bb8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fd34 	bl	8000620 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2202      	movs	r2, #2
 8000bbc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	791b      	ldrb	r3, [r3, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10c      	bne.n	8000be0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <HAL_CRC_Init+0xc4>)
 8000bcc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f022 0218 	bic.w	r2, r2, #24
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	e00c      	b.n	8000bfa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6899      	ldr	r1, [r3, #8]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	461a      	mov	r2, r3
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f834 	bl	8000c58 <HAL_CRCEx_Polynomial_Set>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e028      	b.n	8000c4c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	795b      	ldrb	r3, [r3, #5]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d105      	bne.n	8000c0e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	e004      	b.n	8000c18 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	6912      	ldr	r2, [r2, #16]
 8000c16:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	699a      	ldr	r2, [r3, #24]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	430a      	orrs	r2, r1
 8000c42:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2201      	movs	r2, #1
 8000c48:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	04c11db7 	.word	0x04c11db7

08000c58 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000c68:	231f      	movs	r3, #31
 8000c6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	75fb      	strb	r3, [r7, #23]
 8000c7a:	e063      	b.n	8000d44 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000c7c:	bf00      	nop
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	613a      	str	r2, [r7, #16]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d009      	beq.n	8000c9c <HAL_CRCEx_Polynomial_Set+0x44>
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	f003 031f 	and.w	r3, r3, #31
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	fa22 f303 	lsr.w	r3, r2, r3
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0f0      	beq.n	8000c7e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b18      	cmp	r3, #24
 8000ca0:	d846      	bhi.n	8000d30 <HAL_CRCEx_Polynomial_Set+0xd8>
 8000ca2:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <HAL_CRCEx_Polynomial_Set+0x50>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000d37 	.word	0x08000d37
 8000cac:	08000d31 	.word	0x08000d31
 8000cb0:	08000d31 	.word	0x08000d31
 8000cb4:	08000d31 	.word	0x08000d31
 8000cb8:	08000d31 	.word	0x08000d31
 8000cbc:	08000d31 	.word	0x08000d31
 8000cc0:	08000d31 	.word	0x08000d31
 8000cc4:	08000d31 	.word	0x08000d31
 8000cc8:	08000d25 	.word	0x08000d25
 8000ccc:	08000d31 	.word	0x08000d31
 8000cd0:	08000d31 	.word	0x08000d31
 8000cd4:	08000d31 	.word	0x08000d31
 8000cd8:	08000d31 	.word	0x08000d31
 8000cdc:	08000d31 	.word	0x08000d31
 8000ce0:	08000d31 	.word	0x08000d31
 8000ce4:	08000d31 	.word	0x08000d31
 8000ce8:	08000d19 	.word	0x08000d19
 8000cec:	08000d31 	.word	0x08000d31
 8000cf0:	08000d31 	.word	0x08000d31
 8000cf4:	08000d31 	.word	0x08000d31
 8000cf8:	08000d31 	.word	0x08000d31
 8000cfc:	08000d31 	.word	0x08000d31
 8000d00:	08000d31 	.word	0x08000d31
 8000d04:	08000d31 	.word	0x08000d31
 8000d08:	08000d0d 	.word	0x08000d0d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d913      	bls.n	8000d3a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000d16:	e010      	b.n	8000d3a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	2b07      	cmp	r3, #7
 8000d1c:	d90f      	bls.n	8000d3e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000d22:	e00c      	b.n	8000d3e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	d90b      	bls.n	8000d42 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000d2e:	e008      	b.n	8000d42 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	75fb      	strb	r3, [r7, #23]
        break;
 8000d34:	e006      	b.n	8000d44 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000d36:	bf00      	nop
 8000d38:	e004      	b.n	8000d44 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000d3a:	bf00      	nop
 8000d3c:	e002      	b.n	8000d44 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000d3e:	bf00      	nop
 8000d40:	e000      	b.n	8000d44 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000d42:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10d      	bne.n	8000d66 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f023 0118 	bic.w	r1, r3, #24
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	430a      	orrs	r2, r1
 8000d64:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	e14e      	b.n	8001022 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 8140 	beq.w	800101c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d005      	beq.n	8000db4 <HAL_GPIO_Init+0x40>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d130      	bne.n	8000e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dea:	2201      	movs	r2, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	f003 0201 	and.w	r2, r3, #1
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d017      	beq.n	8000e52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d123      	bne.n	8000ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	6939      	ldr	r1, [r7, #16]
 8000ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0203 	and.w	r2, r3, #3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 809a 	beq.w	800101c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee8:	4b55      	ldr	r3, [pc, #340]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a54      	ldr	r2, [pc, #336]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b52      	ldr	r3, [pc, #328]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f00:	4a50      	ldr	r2, [pc, #320]	; (8001044 <HAL_GPIO_Init+0x2d0>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f2a:	d013      	beq.n	8000f54 <HAL_GPIO_Init+0x1e0>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a46      	ldr	r2, [pc, #280]	; (8001048 <HAL_GPIO_Init+0x2d4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d00d      	beq.n	8000f50 <HAL_GPIO_Init+0x1dc>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a45      	ldr	r2, [pc, #276]	; (800104c <HAL_GPIO_Init+0x2d8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d007      	beq.n	8000f4c <HAL_GPIO_Init+0x1d8>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a44      	ldr	r2, [pc, #272]	; (8001050 <HAL_GPIO_Init+0x2dc>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d101      	bne.n	8000f48 <HAL_GPIO_Init+0x1d4>
 8000f44:	2303      	movs	r3, #3
 8000f46:	e006      	b.n	8000f56 <HAL_GPIO_Init+0x1e2>
 8000f48:	2305      	movs	r3, #5
 8000f4a:	e004      	b.n	8000f56 <HAL_GPIO_Init+0x1e2>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e002      	b.n	8000f56 <HAL_GPIO_Init+0x1e2>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <HAL_GPIO_Init+0x1e2>
 8000f54:	2300      	movs	r3, #0
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	f002 0203 	and.w	r2, r2, #3
 8000f5c:	0092      	lsls	r2, r2, #2
 8000f5e:	4093      	lsls	r3, r2
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f66:	4937      	ldr	r1, [pc, #220]	; (8001044 <HAL_GPIO_Init+0x2d0>)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f74:	4b37      	ldr	r3, [pc, #220]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f98:	4a2e      	ldr	r2, [pc, #184]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fc2:	4a24      	ldr	r2, [pc, #144]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001016:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	f47f aea9 	bne.w	8000d84 <HAL_GPIO_Init+0x10>
  }
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	48000400 	.word	0x48000400
 800104c:	48000800 	.word	0x48000800
 8001050:	48000c00 	.word	0x48000c00
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
 8001064:	4613      	mov	r3, r2
 8001066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001074:	e002      	b.n	800107c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800108e:	af00      	add	r7, sp, #0
 8001090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001094:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001098:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800109a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	f001 b823 	b.w	80020f4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 817d 	beq.w	80013be <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010c4:	4bbc      	ldr	r3, [pc, #752]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 030c 	and.w	r3, r3, #12
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d00c      	beq.n	80010ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d0:	4bb9      	ldr	r3, [pc, #740]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d15c      	bne.n	8001196 <HAL_RCC_OscConfig+0x10e>
 80010dc:	4bb6      	ldr	r3, [pc, #728]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e8:	d155      	bne.n	8001196 <HAL_RCC_OscConfig+0x10e>
 80010ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80010f6:	fa93 f3a3 	rbit	r3, r3
 80010fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001102:	fab3 f383 	clz	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	095b      	lsrs	r3, r3, #5
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b01      	cmp	r3, #1
 8001114:	d102      	bne.n	800111c <HAL_RCC_OscConfig+0x94>
 8001116:	4ba8      	ldr	r3, [pc, #672]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	e015      	b.n	8001148 <HAL_RCC_OscConfig+0xc0>
 800111c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001120:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001124:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001134:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001138:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800113c:	fa93 f3a3 	rbit	r3, r3
 8001140:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001144:	4b9c      	ldr	r3, [pc, #624]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800114c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001150:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001154:	fa92 f2a2 	rbit	r2, r2
 8001158:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800115c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001160:	fab2 f282 	clz	r2, r2
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	f042 0220 	orr.w	r2, r2, #32
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	f002 021f 	and.w	r2, r2, #31
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	4013      	ands	r3, r2
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 811f 	beq.w	80013bc <HAL_RCC_OscConfig+0x334>
 800117e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f040 8116 	bne.w	80013bc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	f000 bfaf 	b.w	80020f4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800119a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a6:	d106      	bne.n	80011b6 <HAL_RCC_OscConfig+0x12e>
 80011a8:	4b83      	ldr	r3, [pc, #524]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a82      	ldr	r2, [pc, #520]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 80011ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	e036      	b.n	8001224 <HAL_RCC_OscConfig+0x19c>
 80011b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x158>
 80011c6:	4b7c      	ldr	r3, [pc, #496]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a7b      	ldr	r2, [pc, #492]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 80011cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b79      	ldr	r3, [pc, #484]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a78      	ldr	r2, [pc, #480]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 80011d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e021      	b.n	8001224 <HAL_RCC_OscConfig+0x19c>
 80011e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x184>
 80011f2:	4b71      	ldr	r3, [pc, #452]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a70      	ldr	r2, [pc, #448]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b6e      	ldr	r3, [pc, #440]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a6d      	ldr	r2, [pc, #436]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e00b      	b.n	8001224 <HAL_RCC_OscConfig+0x19c>
 800120c:	4b6a      	ldr	r3, [pc, #424]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a69      	ldr	r2, [pc, #420]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 8001212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b67      	ldr	r3, [pc, #412]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a66      	ldr	r2, [pc, #408]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 800121e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001222:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001224:	4b64      	ldr	r3, [pc, #400]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	f023 020f 	bic.w	r2, r3, #15
 800122c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001230:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	495f      	ldr	r1, [pc, #380]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 800123a:	4313      	orrs	r3, r2
 800123c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800123e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d059      	beq.n	8001302 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124e:	f7ff fbad 	bl	80009ac <HAL_GetTick>
 8001252:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	e00a      	b.n	800126e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fba8 	bl	80009ac <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b64      	cmp	r3, #100	; 0x64
 8001266:	d902      	bls.n	800126e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	f000 bf43 	b.w	80020f4 <HAL_RCC_OscConfig+0x106c>
 800126e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001272:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001282:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	fab3 f383 	clz	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	095b      	lsrs	r3, r3, #5
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d102      	bne.n	80012a0 <HAL_RCC_OscConfig+0x218>
 800129a:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	e015      	b.n	80012cc <HAL_RCC_OscConfig+0x244>
 80012a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80012ac:	fa93 f3a3 	rbit	r3, r3
 80012b0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80012c0:	fa93 f3a3 	rbit	r3, r3
 80012c4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012d0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80012d4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012d8:	fa92 f2a2 	rbit	r2, r2
 80012dc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80012e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80012e4:	fab2 f282 	clz	r2, r2
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	f042 0220 	orr.w	r2, r2, #32
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	f002 021f 	and.w	r2, r2, #31
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f202 	lsl.w	r2, r1, r2
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0ab      	beq.n	8001258 <HAL_RCC_OscConfig+0x1d0>
 8001300:	e05d      	b.n	80013be <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fb53 	bl	80009ac <HAL_GetTick>
 8001306:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	e00a      	b.n	8001322 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fb4e 	bl	80009ac <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b64      	cmp	r3, #100	; 0x64
 800131a:	d902      	bls.n	8001322 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	f000 bee9 	b.w	80020f4 <HAL_RCC_OscConfig+0x106c>
 8001322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001326:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001336:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	fab3 f383 	clz	r3, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	095b      	lsrs	r3, r3, #5
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d102      	bne.n	8001354 <HAL_RCC_OscConfig+0x2cc>
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	e015      	b.n	8001380 <HAL_RCC_OscConfig+0x2f8>
 8001354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001358:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001360:	fa93 f3a3 	rbit	r3, r3
 8001364:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800136c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001370:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001374:	fa93 f3a3 	rbit	r3, r3
 8001378:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001384:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001388:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800138c:	fa92 f2a2 	rbit	r2, r2
 8001390:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001394:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001398:	fab2 f282 	clz	r2, r2
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	f042 0220 	orr.w	r2, r2, #32
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	f002 021f 	and.w	r2, r2, #31
 80013a8:	2101      	movs	r1, #1
 80013aa:	fa01 f202 	lsl.w	r2, r1, r2
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1ab      	bne.n	800130c <HAL_RCC_OscConfig+0x284>
 80013b4:	e003      	b.n	80013be <HAL_RCC_OscConfig+0x336>
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 817d 	beq.w	80016ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013d4:	4ba6      	ldr	r3, [pc, #664]	; (8001670 <HAL_RCC_OscConfig+0x5e8>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00b      	beq.n	80013f8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013e0:	4ba3      	ldr	r3, [pc, #652]	; (8001670 <HAL_RCC_OscConfig+0x5e8>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d172      	bne.n	80014d2 <HAL_RCC_OscConfig+0x44a>
 80013ec:	4ba0      	ldr	r3, [pc, #640]	; (8001670 <HAL_RCC_OscConfig+0x5e8>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d16c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x44a>
 80013f8:	2302      	movs	r3, #2
 80013fa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001402:	fa93 f3a3 	rbit	r3, r3
 8001406:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800140a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	fab3 f383 	clz	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	095b      	lsrs	r3, r3, #5
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d102      	bne.n	8001428 <HAL_RCC_OscConfig+0x3a0>
 8001422:	4b93      	ldr	r3, [pc, #588]	; (8001670 <HAL_RCC_OscConfig+0x5e8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	e013      	b.n	8001450 <HAL_RCC_OscConfig+0x3c8>
 8001428:	2302      	movs	r3, #2
 800142a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001440:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001444:	fa93 f3a3 	rbit	r3, r3
 8001448:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800144c:	4b88      	ldr	r3, [pc, #544]	; (8001670 <HAL_RCC_OscConfig+0x5e8>)
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	2202      	movs	r2, #2
 8001452:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001456:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800145a:	fa92 f2a2 	rbit	r2, r2
 800145e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001462:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001466:	fab2 f282 	clz	r2, r2
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	f042 0220 	orr.w	r2, r2, #32
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	f002 021f 	and.w	r2, r2, #31
 8001476:	2101      	movs	r1, #1
 8001478:	fa01 f202 	lsl.w	r2, r1, r2
 800147c:	4013      	ands	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00a      	beq.n	8001498 <HAL_RCC_OscConfig+0x410>
 8001482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d002      	beq.n	8001498 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	f000 be2e 	b.w	80020f4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001498:	4b75      	ldr	r3, [pc, #468]	; (8001670 <HAL_RCC_OscConfig+0x5e8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	21f8      	movs	r1, #248	; 0xf8
 80014ae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014b6:	fa91 f1a1 	rbit	r1, r1
 80014ba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80014be:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80014c2:	fab1 f181 	clz	r1, r1
 80014c6:	b2c9      	uxtb	r1, r1
 80014c8:	408b      	lsls	r3, r1
 80014ca:	4969      	ldr	r1, [pc, #420]	; (8001670 <HAL_RCC_OscConfig+0x5e8>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d0:	e0fd      	b.n	80016ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8088 	beq.w	80015f4 <HAL_RCC_OscConfig+0x56c>
 80014e4:	2301      	movs	r3, #1
 80014e6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80014ee:	fa93 f3a3 	rbit	r3, r3
 80014f2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80014f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001504:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	461a      	mov	r2, r3
 800150c:	2301      	movs	r3, #1
 800150e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fa4c 	bl	80009ac <HAL_GetTick>
 8001514:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	e00a      	b.n	8001530 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fa47 	bl	80009ac <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d902      	bls.n	8001530 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	f000 bde2 	b.w	80020f4 <HAL_RCC_OscConfig+0x106c>
 8001530:	2302      	movs	r3, #2
 8001532:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001542:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	fab3 f383 	clz	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	095b      	lsrs	r3, r3, #5
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d102      	bne.n	8001560 <HAL_RCC_OscConfig+0x4d8>
 800155a:	4b45      	ldr	r3, [pc, #276]	; (8001670 <HAL_RCC_OscConfig+0x5e8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	e013      	b.n	8001588 <HAL_RCC_OscConfig+0x500>
 8001560:	2302      	movs	r3, #2
 8001562:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001578:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001584:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <HAL_RCC_OscConfig+0x5e8>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	2202      	movs	r2, #2
 800158a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800158e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001592:	fa92 f2a2 	rbit	r2, r2
 8001596:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800159a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800159e:	fab2 f282 	clz	r2, r2
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	f042 0220 	orr.w	r2, r2, #32
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	f002 021f 	and.w	r2, r2, #31
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0af      	beq.n	800151a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ba:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <HAL_RCC_OscConfig+0x5e8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	21f8      	movs	r1, #248	; 0xf8
 80015d0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015d8:	fa91 f1a1 	rbit	r1, r1
 80015dc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80015e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80015e4:	fab1 f181 	clz	r1, r1
 80015e8:	b2c9      	uxtb	r1, r1
 80015ea:	408b      	lsls	r3, r1
 80015ec:	4920      	ldr	r1, [pc, #128]	; (8001670 <HAL_RCC_OscConfig+0x5e8>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
 80015f2:	e06c      	b.n	80016ce <HAL_RCC_OscConfig+0x646>
 80015f4:	2301      	movs	r3, #1
 80015f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001606:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001614:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	461a      	mov	r2, r3
 800161c:	2300      	movs	r3, #0
 800161e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff f9c4 	bl	80009ac <HAL_GetTick>
 8001624:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff f9bf 	bl	80009ac <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d902      	bls.n	8001640 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	f000 bd5a 	b.w	80020f4 <HAL_RCC_OscConfig+0x106c>
 8001640:	2302      	movs	r3, #2
 8001642:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	fab3 f383 	clz	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	095b      	lsrs	r3, r3, #5
 800165e:	b2db      	uxtb	r3, r3
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b01      	cmp	r3, #1
 8001668:	d104      	bne.n	8001674 <HAL_RCC_OscConfig+0x5ec>
 800166a:	4b01      	ldr	r3, [pc, #4]	; (8001670 <HAL_RCC_OscConfig+0x5e8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	e015      	b.n	800169c <HAL_RCC_OscConfig+0x614>
 8001670:	40021000 	.word	0x40021000
 8001674:	2302      	movs	r3, #2
 8001676:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001686:	2302      	movs	r3, #2
 8001688:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800168c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001698:	4bc8      	ldr	r3, [pc, #800]	; (80019bc <HAL_RCC_OscConfig+0x934>)
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	2202      	movs	r2, #2
 800169e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80016a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016a6:	fa92 f2a2 	rbit	r2, r2
 80016aa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80016ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016b2:	fab2 f282 	clz	r2, r2
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	f042 0220 	orr.w	r2, r2, #32
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	f002 021f 	and.w	r2, r2, #31
 80016c2:	2101      	movs	r1, #1
 80016c4:	fa01 f202 	lsl.w	r2, r1, r2
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ad      	bne.n	800162a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8110 	beq.w	8001904 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d079      	beq.n	80017e8 <HAL_RCC_OscConfig+0x760>
 80016f4:	2301      	movs	r3, #1
 80016f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	461a      	mov	r2, r3
 8001712:	4bab      	ldr	r3, [pc, #684]	; (80019c0 <HAL_RCC_OscConfig+0x938>)
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	461a      	mov	r2, r3
 800171a:	2301      	movs	r3, #1
 800171c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7ff f945 	bl	80009ac <HAL_GetTick>
 8001722:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	e00a      	b.n	800173e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff f940 	bl	80009ac <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d902      	bls.n	800173e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	f000 bcdb 	b.w	80020f4 <HAL_RCC_OscConfig+0x106c>
 800173e:	2302      	movs	r3, #2
 8001740:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001758:	2202      	movs	r2, #2
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001760:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	fa93 f2a3 	rbit	r2, r3
 800176a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800177c:	2202      	movs	r2, #2
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	fa93 f2a3 	rbit	r2, r3
 800178e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001792:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001796:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001798:	4b88      	ldr	r3, [pc, #544]	; (80019bc <HAL_RCC_OscConfig+0x934>)
 800179a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017a4:	2102      	movs	r1, #2
 80017a6:	6019      	str	r1, [r3, #0]
 80017a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f1a3 	rbit	r1, r3
 80017b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017be:	6019      	str	r1, [r3, #0]
  return result;
 80017c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	2101      	movs	r1, #1
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0a0      	beq.n	8001728 <HAL_RCC_OscConfig+0x6a0>
 80017e6:	e08d      	b.n	8001904 <HAL_RCC_OscConfig+0x87c>
 80017e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	fa93 f2a3 	rbit	r2, r3
 8001802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001806:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800180a:	601a      	str	r2, [r3, #0]
  return result;
 800180c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001810:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001814:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_OscConfig+0x938>)
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	461a      	mov	r2, r3
 8001826:	2300      	movs	r3, #0
 8001828:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182a:	f7ff f8bf 	bl	80009ac <HAL_GetTick>
 800182e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001832:	e00a      	b.n	800184a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff f8ba 	bl	80009ac <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d902      	bls.n	800184a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	f000 bc55 	b.w	80020f4 <HAL_RCC_OscConfig+0x106c>
 800184a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001852:	2202      	movs	r2, #2
 8001854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001872:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001876:	2202      	movs	r2, #2
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	fa93 f2a3 	rbit	r2, r3
 8001888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800189a:	2202      	movs	r2, #2
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fa93 f2a3 	rbit	r2, r3
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b6:	4b41      	ldr	r3, [pc, #260]	; (80019bc <HAL_RCC_OscConfig+0x934>)
 80018b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018c2:	2102      	movs	r1, #2
 80018c4:	6019      	str	r1, [r3, #0]
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	fa93 f1a3 	rbit	r1, r3
 80018d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018dc:	6019      	str	r1, [r3, #0]
  return result;
 80018de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	fab3 f383 	clz	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	2101      	movs	r1, #1
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	4013      	ands	r3, r2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d197      	bne.n	8001834 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 81a1 	beq.w	8001c5c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001920:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_RCC_OscConfig+0x934>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d116      	bne.n	800195a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <HAL_RCC_OscConfig+0x934>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	4a22      	ldr	r2, [pc, #136]	; (80019bc <HAL_RCC_OscConfig+0x934>)
 8001932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001936:	61d3      	str	r3, [r2, #28]
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_RCC_OscConfig+0x934>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001944:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001952:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001954:	2301      	movs	r3, #1
 8001956:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_RCC_OscConfig+0x93c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11a      	bne.n	800199c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_RCC_OscConfig+0x93c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a16      	ldr	r2, [pc, #88]	; (80019c4 <HAL_RCC_OscConfig+0x93c>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001972:	f7ff f81b 	bl	80009ac <HAL_GetTick>
 8001976:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197a:	e009      	b.n	8001990 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197c:	f7ff f816 	bl	80009ac <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b64      	cmp	r3, #100	; 0x64
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e3b1      	b.n	80020f4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_RCC_OscConfig+0x93c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ef      	beq.n	800197c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d10d      	bne.n	80019c8 <HAL_RCC_OscConfig+0x940>
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_RCC_OscConfig+0x934>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a02      	ldr	r2, [pc, #8]	; (80019bc <HAL_RCC_OscConfig+0x934>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6213      	str	r3, [r2, #32]
 80019b8:	e03c      	b.n	8001a34 <HAL_RCC_OscConfig+0x9ac>
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	10908120 	.word	0x10908120
 80019c4:	40007000 	.word	0x40007000
 80019c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10c      	bne.n	80019f2 <HAL_RCC_OscConfig+0x96a>
 80019d8:	4bc1      	ldr	r3, [pc, #772]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4ac0      	ldr	r2, [pc, #768]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	6213      	str	r3, [r2, #32]
 80019e4:	4bbe      	ldr	r3, [pc, #760]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4abd      	ldr	r2, [pc, #756]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 80019ea:	f023 0304 	bic.w	r3, r3, #4
 80019ee:	6213      	str	r3, [r2, #32]
 80019f0:	e020      	b.n	8001a34 <HAL_RCC_OscConfig+0x9ac>
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x994>
 8001a02:	4bb7      	ldr	r3, [pc, #732]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4ab6      	ldr	r2, [pc, #728]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	4bb4      	ldr	r3, [pc, #720]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4ab3      	ldr	r2, [pc, #716]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0x9ac>
 8001a1c:	4bb0      	ldr	r3, [pc, #704]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4aaf      	ldr	r2, [pc, #700]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	6213      	str	r3, [r2, #32]
 8001a28:	4bad      	ldr	r3, [pc, #692]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4aac      	ldr	r2, [pc, #688]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001a2e:	f023 0304 	bic.w	r3, r3, #4
 8001a32:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8081 	beq.w	8001b48 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a46:	f7fe ffb1 	bl	80009ac <HAL_GetTick>
 8001a4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a50:	f7fe ffac 	bl	80009ac <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e345      	b.n	80020f4 <HAL_RCC_OscConfig+0x106c>
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a70:	2202      	movs	r2, #2
 8001a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a78:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a94:	2202      	movs	r2, #2
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f2a3 	rbit	r2, r3
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001aae:	601a      	str	r2, [r3, #0]
  return result;
 8001ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ab8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	095b      	lsrs	r3, r3, #5
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d102      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xa4c>
 8001ace:	4b84      	ldr	r3, [pc, #528]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	e013      	b.n	8001afc <HAL_RCC_OscConfig+0xa74>
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001adc:	2202      	movs	r2, #2
 8001ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	fa93 f2a3 	rbit	r2, r3
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b00:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b04:	2102      	movs	r1, #2
 8001b06:	6011      	str	r1, [r2, #0]
 8001b08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	fa92 f1a2 	rbit	r1, r2
 8001b16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b1a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b1e:	6011      	str	r1, [r2, #0]
  return result;
 8001b20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b24:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	fab2 f282 	clz	r2, r2
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	f002 021f 	and.w	r2, r2, #31
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d084      	beq.n	8001a50 <HAL_RCC_OscConfig+0x9c8>
 8001b46:	e07f      	b.n	8001c48 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7fe ff30 	bl	80009ac <HAL_GetTick>
 8001b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	e00b      	b.n	8001b6a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7fe ff2b 	bl	80009ac <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e2c4      	b.n	80020f4 <HAL_RCC_OscConfig+0x106c>
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b72:	2202      	movs	r2, #2
 8001b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	fa93 f2a3 	rbit	r2, r3
 8001b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b88:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b96:	2202      	movs	r2, #2
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bb0:	601a      	str	r2, [r3, #0]
  return result;
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d102      	bne.n	8001bd6 <HAL_RCC_OscConfig+0xb4e>
 8001bd0:	4b43      	ldr	r3, [pc, #268]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	e013      	b.n	8001bfe <HAL_RCC_OscConfig+0xb76>
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001bde:	2202      	movs	r2, #2
 8001be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	fa93 f2a3 	rbit	r2, r3
 8001bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c02:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c06:	2102      	movs	r1, #2
 8001c08:	6011      	str	r1, [r2, #0]
 8001c0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c0e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	fa92 f1a2 	rbit	r1, r2
 8001c18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c20:	6011      	str	r1, [r2, #0]
  return result;
 8001c22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c26:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	fab2 f282 	clz	r2, r2
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	f002 021f 	and.w	r2, r2, #31
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d184      	bne.n	8001b52 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c48:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d105      	bne.n	8001c5c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8242 	beq.w	80020f2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <HAL_RCC_OscConfig+0xc58>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	f000 8213 	beq.w	80020a2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	f040 8162 	bne.w	8001f52 <HAL_RCC_OscConfig+0xeca>
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cb2:	601a      	str	r2, [r3, #0]
  return result;
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cbc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7fe fe6a 	bl	80009ac <HAL_GetTick>
 8001cd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cdc:	e00c      	b.n	8001cf8 <HAL_RCC_OscConfig+0xc70>
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7fe fe62 	bl	80009ac <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e1fd      	b.n	80020f4 <HAL_RCC_OscConfig+0x106c>
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	fa93 f2a3 	rbit	r2, r3
 8001d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d18:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d1c:	601a      	str	r2, [r3, #0]
  return result;
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d28:	fab3 f383 	clz	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_OscConfig+0xcba>
 8001d3c:	4bb0      	ldr	r3, [pc, #704]	; (8002000 <HAL_RCC_OscConfig+0xf78>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e027      	b.n	8001d92 <HAL_RCC_OscConfig+0xd0a>
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	fa93 f2a3 	rbit	r2, r3
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	4b9c      	ldr	r3, [pc, #624]	; (8002000 <HAL_RCC_OscConfig+0xf78>)
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d96:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001d9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d9e:	6011      	str	r1, [r2, #0]
 8001da0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001da4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	fa92 f1a2 	rbit	r1, r2
 8001dae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001db6:	6011      	str	r1, [r2, #0]
  return result;
 8001db8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dbc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	fab2 f282 	clz	r2, r2
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	f042 0220 	orr.w	r2, r2, #32
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f002 021f 	and.w	r2, r2, #31
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d182      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dde:	4b88      	ldr	r3, [pc, #544]	; (8002000 <HAL_RCC_OscConfig+0xf78>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	430b      	orrs	r3, r1
 8001e00:	497f      	ldr	r1, [pc, #508]	; (8002000 <HAL_RCC_OscConfig+0xf78>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e2a:	601a      	str	r2, [r3, #0]
  return result;
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e34:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	461a      	mov	r2, r3
 8001e48:	2301      	movs	r3, #1
 8001e4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fdae 	bl	80009ac <HAL_GetTick>
 8001e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e54:	e009      	b.n	8001e6a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e56:	f7fe fda9 	bl	80009ac <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e144      	b.n	80020f4 <HAL_RCC_OscConfig+0x106c>
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f2a3 	rbit	r2, r3
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e8e:	601a      	str	r2, [r3, #0]
  return result;
 8001e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e94:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xe2c>
 8001eae:	4b54      	ldr	r3, [pc, #336]	; (8002000 <HAL_RCC_OscConfig+0xf78>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e027      	b.n	8001f04 <HAL_RCC_OscConfig+0xe7c>
 8001eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ebc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	fa93 f2a3 	rbit	r2, r3
 8001ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ede:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ee2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fa93 f2a3 	rbit	r2, r3
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_RCC_OscConfig+0xf78>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f08:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f10:	6011      	str	r1, [r2, #0]
 8001f12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f16:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	fa92 f1a2 	rbit	r1, r2
 8001f20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f24:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f28:	6011      	str	r1, [r2, #0]
  return result;
 8001f2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f2e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	fab2 f282 	clz	r2, r2
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f042 0220 	orr.w	r2, r2, #32
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f002 021f 	and.w	r2, r2, #31
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d082      	beq.n	8001e56 <HAL_RCC_OscConfig+0xdce>
 8001f50:	e0cf      	b.n	80020f2 <HAL_RCC_OscConfig+0x106a>
 8001f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f56:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f64:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	fa93 f2a3 	rbit	r2, r3
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f76:	601a      	str	r2, [r3, #0]
  return result;
 8001f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f80:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	461a      	mov	r2, r3
 8001f94:	2300      	movs	r3, #0
 8001f96:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7fe fd08 	bl	80009ac <HAL_GetTick>
 8001f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa0:	e009      	b.n	8001fb6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7fe fd03 	bl	80009ac <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e09e      	b.n	80020f4 <HAL_RCC_OscConfig+0x106c>
 8001fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	fa93 f2a3 	rbit	r2, r3
 8001fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001fda:	601a      	str	r2, [r3, #0]
  return result;
 8001fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001fe4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d104      	bne.n	8002004 <HAL_RCC_OscConfig+0xf7c>
 8001ffa:	4b01      	ldr	r3, [pc, #4]	; (8002000 <HAL_RCC_OscConfig+0xf78>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e029      	b.n	8002054 <HAL_RCC_OscConfig+0xfcc>
 8002000:	40021000 	.word	0x40021000
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800200c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fa93 f2a3 	rbit	r2, r3
 8002020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002024:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002032:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	fa93 f2a3 	rbit	r2, r3
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_RCC_OscConfig+0x1078>)
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002058:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800205c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002060:	6011      	str	r1, [r2, #0]
 8002062:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002066:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	fa92 f1a2 	rbit	r1, r2
 8002070:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002074:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002078:	6011      	str	r1, [r2, #0]
  return result;
 800207a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800207e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	f042 0220 	orr.w	r2, r2, #32
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f002 021f 	and.w	r2, r2, #31
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d180      	bne.n	8001fa2 <HAL_RCC_OscConfig+0xf1a>
 80020a0:	e027      	b.n	80020f2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e01e      	b.n	80020f4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_RCC_OscConfig+0x1078>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020c2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d10b      	bne.n	80020ee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000

08002104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b09e      	sub	sp, #120	; 0x78
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e162      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b90      	ldr	r3, [pc, #576]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b8d      	ldr	r3, [pc, #564]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	498b      	ldr	r1, [pc, #556]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b89      	ldr	r3, [pc, #548]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e14a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b82      	ldr	r3, [pc, #520]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	497f      	ldr	r1, [pc, #508]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80dc 	beq.w	8002330 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d13c      	bne.n	80021fa <HAL_RCC_ClockConfig+0xf6>
 8002180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002184:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800218e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_ClockConfig+0xa6>
 80021a4:	4b6f      	ldr	r3, [pc, #444]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	e00f      	b.n	80021ca <HAL_RCC_ClockConfig+0xc6>
 80021aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	667b      	str	r3, [r7, #100]	; 0x64
 80021b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021bc:	663b      	str	r3, [r7, #96]	; 0x60
 80021be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021c6:	4b67      	ldr	r3, [pc, #412]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80021d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021d2:	fa92 f2a2 	rbit	r2, r2
 80021d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80021d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021da:	fab2 f282 	clz	r2, r2
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f042 0220 	orr.w	r2, r2, #32
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	f002 021f 	and.w	r2, r2, #31
 80021ea:	2101      	movs	r1, #1
 80021ec:	fa01 f202 	lsl.w	r2, r1, r2
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d17b      	bne.n	80022ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0f3      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d13c      	bne.n	800227c <HAL_RCC_ClockConfig+0x178>
 8002202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002206:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d102      	bne.n	800222c <HAL_RCC_ClockConfig+0x128>
 8002226:	4b4f      	ldr	r3, [pc, #316]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	e00f      	b.n	800224c <HAL_RCC_ClockConfig+0x148>
 800222c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002230:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	647b      	str	r3, [r7, #68]	; 0x44
 800223a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223e:	643b      	str	r3, [r7, #64]	; 0x40
 8002240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002248:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002250:	63ba      	str	r2, [r7, #56]	; 0x38
 8002252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002254:	fa92 f2a2 	rbit	r2, r2
 8002258:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800225a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f042 0220 	orr.w	r2, r2, #32
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f002 021f 	and.w	r2, r2, #31
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d13a      	bne.n	80022ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0b2      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
 800227c:	2302      	movs	r3, #2
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x1a0>
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	e00d      	b.n	80022c0 <HAL_RCC_ClockConfig+0x1bc>
 80022a4:	2302      	movs	r3, #2
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
 80022b0:	2302      	movs	r3, #2
 80022b2:	623b      	str	r3, [r7, #32]
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	4b29      	ldr	r3, [pc, #164]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	2202      	movs	r2, #2
 80022c2:	61ba      	str	r2, [r7, #24]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	fa92 f2a2 	rbit	r2, r2
 80022ca:	617a      	str	r2, [r7, #20]
  return result;
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	fab2 f282 	clz	r2, r2
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f042 0220 	orr.w	r2, r2, #32
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f002 021f 	and.w	r2, r2, #31
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e079      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	491a      	ldr	r1, [pc, #104]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002300:	f7fe fb54 	bl	80009ac <HAL_GetTick>
 8002304:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe fb50 	bl	80009ac <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e061      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 020c 	and.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d1eb      	bne.n	8002308 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d214      	bcs.n	8002368 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 0207 	bic.w	r2, r3, #7
 8002346:	4906      	ldr	r1, [pc, #24]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e040      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
 8002360:	40022000 	.word	0x40022000
 8002364:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCC_ClockConfig+0x2e8>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	491a      	ldr	r1, [pc, #104]	; (80023ec <HAL_RCC_ClockConfig+0x2e8>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002392:	4b16      	ldr	r3, [pc, #88]	; (80023ec <HAL_RCC_ClockConfig+0x2e8>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4912      	ldr	r1, [pc, #72]	; (80023ec <HAL_RCC_ClockConfig+0x2e8>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023a6:	f000 f829 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023aa:	4601      	mov	r1, r0
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_RCC_ClockConfig+0x2e8>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b4:	22f0      	movs	r2, #240	; 0xf0
 80023b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	fa92 f2a2 	rbit	r2, r2
 80023be:	60fa      	str	r2, [r7, #12]
  return result;
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	fab2 f282 	clz	r2, r2
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	40d3      	lsrs	r3, r2
 80023ca:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x2ec>)
 80023cc:	5cd3      	ldrb	r3, [r2, r3]
 80023ce:	fa21 f303 	lsr.w	r3, r1, r3
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <HAL_RCC_ClockConfig+0x2f0>)
 80023d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_RCC_ClockConfig+0x2f4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe faa2 	bl	8000924 <HAL_InitTick>
  
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3778      	adds	r7, #120	; 0x78
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	08007b90 	.word	0x08007b90
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b08b      	sub	sp, #44	; 0x2c
 8002400:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	2300      	movs	r3, #0
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002416:	4b29      	ldr	r3, [pc, #164]	; (80024bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b04      	cmp	r3, #4
 8002424:	d002      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x30>
 8002426:	2b08      	cmp	r3, #8
 8002428:	d003      	beq.n	8002432 <HAL_RCC_GetSysClockFreq+0x36>
 800242a:	e03c      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800242e:	623b      	str	r3, [r7, #32]
      break;
 8002430:	e03c      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002438:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800243c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	fa92 f2a2 	rbit	r2, r2
 8002444:	607a      	str	r2, [r7, #4]
  return result;
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	fab2 f282 	clz	r2, r2
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	40d3      	lsrs	r3, r2
 8002450:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	220f      	movs	r2, #15
 8002460:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	fa92 f2a2 	rbit	r2, r2
 8002468:	60fa      	str	r2, [r7, #12]
  return result;
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	fab2 f282 	clz	r2, r2
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	40d3      	lsrs	r3, r2
 8002474:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002476:	5cd3      	ldrb	r3, [r2, r3]
 8002478:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002484:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	fbb2 f2f3 	udiv	r2, r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fb02 f303 	mul.w	r3, r2, r3
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
 8002494:	e004      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	4a0c      	ldr	r2, [pc, #48]	; (80024cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	623b      	str	r3, [r7, #32]
      break;
 80024a4:	e002      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024a8:	623b      	str	r3, [r7, #32]
      break;
 80024aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ac:	6a3b      	ldr	r3, [r7, #32]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	372c      	adds	r7, #44	; 0x2c
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	007a1200 	.word	0x007a1200
 80024c4:	08007ba8 	.word	0x08007ba8
 80024c8:	08007bb8 	.word	0x08007bb8
 80024cc:	003d0900 	.word	0x003d0900

080024d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000000 	.word	0x20000000

080024e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80024ee:	f7ff ffef 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 80024f2:	4601      	mov	r1, r0
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002500:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	fa92 f2a2 	rbit	r2, r2
 8002508:	603a      	str	r2, [r7, #0]
  return result;
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	40d3      	lsrs	r3, r2
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	08007ba0 	.word	0x08007ba0

0800252c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002532:	f7ff ffcd 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 8002536:	4601      	mov	r1, r0
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002540:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002544:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	fa92 f2a2 	rbit	r2, r2
 800254c:	603a      	str	r2, [r7, #0]
  return result;
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	fab2 f282 	clz	r2, r2
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	40d3      	lsrs	r3, r2
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_RCC_GetPCLK2Freq+0x40>)
 800255a:	5cd3      	ldrb	r3, [r2, r3]
 800255c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	08007ba0 	.word	0x08007ba0

08002570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e040      	b.n	8002604 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe f864 	bl	8000660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2224      	movs	r2, #36	; 0x24
 800259c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0201 	bic.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f82c 	bl	800260c <UART_SetConfig>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e022      	b.n	8002604 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f956 	bl	8002878 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f9dd 	bl	80029bc <UART_CheckIdleState>
 8002602:	4603      	mov	r3, r0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b8a      	ldr	r3, [pc, #552]	; (8002860 <UART_SetConfig+0x254>)
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	6979      	ldr	r1, [r7, #20]
 8002640:	430b      	orrs	r3, r1
 8002642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4313      	orrs	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	430a      	orrs	r2, r1
 800267c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a78      	ldr	r2, [pc, #480]	; (8002864 <UART_SetConfig+0x258>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d120      	bne.n	80026ca <UART_SetConfig+0xbe>
 8002688:	4b77      	ldr	r3, [pc, #476]	; (8002868 <UART_SetConfig+0x25c>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b03      	cmp	r3, #3
 8002692:	d817      	bhi.n	80026c4 <UART_SetConfig+0xb8>
 8002694:	a201      	add	r2, pc, #4	; (adr r2, 800269c <UART_SetConfig+0x90>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026b9 	.word	0x080026b9
 80026a4:	080026bf 	.word	0x080026bf
 80026a8:	080026b3 	.word	0x080026b3
 80026ac:	2300      	movs	r3, #0
 80026ae:	77fb      	strb	r3, [r7, #31]
 80026b0:	e01d      	b.n	80026ee <UART_SetConfig+0xe2>
 80026b2:	2302      	movs	r3, #2
 80026b4:	77fb      	strb	r3, [r7, #31]
 80026b6:	e01a      	b.n	80026ee <UART_SetConfig+0xe2>
 80026b8:	2304      	movs	r3, #4
 80026ba:	77fb      	strb	r3, [r7, #31]
 80026bc:	e017      	b.n	80026ee <UART_SetConfig+0xe2>
 80026be:	2308      	movs	r3, #8
 80026c0:	77fb      	strb	r3, [r7, #31]
 80026c2:	e014      	b.n	80026ee <UART_SetConfig+0xe2>
 80026c4:	2310      	movs	r3, #16
 80026c6:	77fb      	strb	r3, [r7, #31]
 80026c8:	e011      	b.n	80026ee <UART_SetConfig+0xe2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a67      	ldr	r2, [pc, #412]	; (800286c <UART_SetConfig+0x260>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d102      	bne.n	80026da <UART_SetConfig+0xce>
 80026d4:	2300      	movs	r3, #0
 80026d6:	77fb      	strb	r3, [r7, #31]
 80026d8:	e009      	b.n	80026ee <UART_SetConfig+0xe2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a64      	ldr	r2, [pc, #400]	; (8002870 <UART_SetConfig+0x264>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d102      	bne.n	80026ea <UART_SetConfig+0xde>
 80026e4:	2300      	movs	r3, #0
 80026e6:	77fb      	strb	r3, [r7, #31]
 80026e8:	e001      	b.n	80026ee <UART_SetConfig+0xe2>
 80026ea:	2310      	movs	r3, #16
 80026ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f6:	d15a      	bne.n	80027ae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80026f8:	7ffb      	ldrb	r3, [r7, #31]
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d827      	bhi.n	800274e <UART_SetConfig+0x142>
 80026fe:	a201      	add	r2, pc, #4	; (adr r2, 8002704 <UART_SetConfig+0xf8>)
 8002700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002704:	08002729 	.word	0x08002729
 8002708:	08002731 	.word	0x08002731
 800270c:	08002739 	.word	0x08002739
 8002710:	0800274f 	.word	0x0800274f
 8002714:	0800273f 	.word	0x0800273f
 8002718:	0800274f 	.word	0x0800274f
 800271c:	0800274f 	.word	0x0800274f
 8002720:	0800274f 	.word	0x0800274f
 8002724:	08002747 	.word	0x08002747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002728:	f7ff fede 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 800272c:	61b8      	str	r0, [r7, #24]
        break;
 800272e:	e013      	b.n	8002758 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002730:	f7ff fefc 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 8002734:	61b8      	str	r0, [r7, #24]
        break;
 8002736:	e00f      	b.n	8002758 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002738:	4b4e      	ldr	r3, [pc, #312]	; (8002874 <UART_SetConfig+0x268>)
 800273a:	61bb      	str	r3, [r7, #24]
        break;
 800273c:	e00c      	b.n	8002758 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800273e:	f7ff fe5d 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8002742:	61b8      	str	r0, [r7, #24]
        break;
 8002744:	e008      	b.n	8002758 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800274a:	61bb      	str	r3, [r7, #24]
        break;
 800274c:	e004      	b.n	8002758 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	77bb      	strb	r3, [r7, #30]
        break;
 8002756:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d074      	beq.n	8002848 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	005a      	lsls	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	441a      	add	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b0f      	cmp	r3, #15
 8002778:	d916      	bls.n	80027a8 <UART_SetConfig+0x19c>
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d212      	bcs.n	80027a8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	b29b      	uxth	r3, r3
 8002786:	f023 030f 	bic.w	r3, r3, #15
 800278a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	085b      	lsrs	r3, r3, #1
 8002790:	b29b      	uxth	r3, r3
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	b29a      	uxth	r2, r3
 8002798:	89fb      	ldrh	r3, [r7, #14]
 800279a:	4313      	orrs	r3, r2
 800279c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	89fa      	ldrh	r2, [r7, #14]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	e04f      	b.n	8002848 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	77bb      	strb	r3, [r7, #30]
 80027ac:	e04c      	b.n	8002848 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027ae:	7ffb      	ldrb	r3, [r7, #31]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d828      	bhi.n	8002806 <UART_SetConfig+0x1fa>
 80027b4:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <UART_SetConfig+0x1b0>)
 80027b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ba:	bf00      	nop
 80027bc:	080027e1 	.word	0x080027e1
 80027c0:	080027e9 	.word	0x080027e9
 80027c4:	080027f1 	.word	0x080027f1
 80027c8:	08002807 	.word	0x08002807
 80027cc:	080027f7 	.word	0x080027f7
 80027d0:	08002807 	.word	0x08002807
 80027d4:	08002807 	.word	0x08002807
 80027d8:	08002807 	.word	0x08002807
 80027dc:	080027ff 	.word	0x080027ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027e0:	f7ff fe82 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 80027e4:	61b8      	str	r0, [r7, #24]
        break;
 80027e6:	e013      	b.n	8002810 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027e8:	f7ff fea0 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 80027ec:	61b8      	str	r0, [r7, #24]
        break;
 80027ee:	e00f      	b.n	8002810 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027f0:	4b20      	ldr	r3, [pc, #128]	; (8002874 <UART_SetConfig+0x268>)
 80027f2:	61bb      	str	r3, [r7, #24]
        break;
 80027f4:	e00c      	b.n	8002810 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027f6:	f7ff fe01 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80027fa:	61b8      	str	r0, [r7, #24]
        break;
 80027fc:	e008      	b.n	8002810 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002802:	61bb      	str	r3, [r7, #24]
        break;
 8002804:	e004      	b.n	8002810 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	77bb      	strb	r3, [r7, #30]
        break;
 800280e:	bf00      	nop
    }

    if (pclk != 0U)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d018      	beq.n	8002848 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	085a      	lsrs	r2, r3, #1
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	441a      	add	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b0f      	cmp	r3, #15
 800282e:	d909      	bls.n	8002844 <UART_SetConfig+0x238>
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002836:	d205      	bcs.n	8002844 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	b29a      	uxth	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	e001      	b.n	8002848 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002854:	7fbb      	ldrb	r3, [r7, #30]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	efff69f3 	.word	0xefff69f3
 8002864:	40013800 	.word	0x40013800
 8002868:	40021000 	.word	0x40021000
 800286c:	40004400 	.word	0x40004400
 8002870:	40004800 	.word	0x40004800
 8002874:	007a1200 	.word	0x007a1200

08002878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01a      	beq.n	800298e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002976:	d10a      	bne.n	800298e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	605a      	str	r2, [r3, #4]
  }
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b098      	sub	sp, #96	; 0x60
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029cc:	f7fd ffee 	bl	80009ac <HAL_GetTick>
 80029d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d12e      	bne.n	8002a3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e8:	2200      	movs	r2, #0
 80029ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f88c 	bl	8002b0c <UART_WaitOnFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d021      	beq.n	8002a3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a02:	e853 3f00 	ldrex	r3, [r3]
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a18:	647b      	str	r3, [r7, #68]	; 0x44
 8002a1a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a20:	e841 2300 	strex	r3, r2, [r1]
 8002a24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1e6      	bne.n	80029fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e062      	b.n	8002b04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d149      	bne.n	8002ae0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a54:	2200      	movs	r2, #0
 8002a56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f856 	bl	8002b0c <UART_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d03c      	beq.n	8002ae0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	e853 3f00 	ldrex	r3, [r3]
 8002a72:	623b      	str	r3, [r7, #32]
   return(result);
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
 8002a86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a8c:	e841 2300 	strex	r3, r2, [r1]
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e6      	bne.n	8002a66 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	e853 3f00 	ldrex	r3, [r3]
 8002aa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3308      	adds	r3, #8
 8002ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ab8:	61fa      	str	r2, [r7, #28]
 8002aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abc:	69b9      	ldr	r1, [r7, #24]
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	e841 2300 	strex	r3, r2, [r1]
 8002ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1e5      	bne.n	8002a98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e011      	b.n	8002b04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3758      	adds	r7, #88	; 0x58
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b1c:	e049      	b.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b24:	d045      	beq.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7fd ff41 	bl	80009ac <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e048      	b.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d031      	beq.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d110      	bne.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2208      	movs	r2, #8
 8002b62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f838 	bl	8002bda <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e029      	b.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b8c:	d111      	bne.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f81e 	bl	8002bda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e00f      	b.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d0a6      	beq.n	8002b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b095      	sub	sp, #84	; 0x54
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bea:	e853 3f00 	ldrex	r3, [r3]
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c00:	643b      	str	r3, [r7, #64]	; 0x40
 8002c02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c08:	e841 2300 	strex	r3, r2, [r1]
 8002c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e6      	bne.n	8002be2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3308      	adds	r3, #8
 8002c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	e853 3f00 	ldrex	r3, [r3]
 8002c22:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3308      	adds	r3, #8
 8002c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c3c:	e841 2300 	strex	r3, r2, [r1]
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e5      	bne.n	8002c14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d118      	bne.n	8002c82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f023 0310 	bic.w	r3, r3, #16
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c72:	6979      	ldr	r1, [r7, #20]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e6      	bne.n	8002c50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002c96:	bf00      	nop
 8002c98:	3754      	adds	r7, #84	; 0x54
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4817      	ldr	r0, [pc, #92]	; (8002d10 <network_configure_activations+0x6c>)
 8002cb4:	f000 faac 	bl	8003210 <ai_platform_get_activations_map>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01d      	beq.n	8002cfa <network_configure_activations+0x56>
    /* Updating activations (byte) offsets */
    
    lstm_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <network_configure_activations+0x6c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <network_configure_activations+0x70>)
 8002cc4:	6093      	str	r3, [r2, #8]
    lstm_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002cc6:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <network_configure_activations+0x6c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <network_configure_activations+0x70>)
 8002ccc:	60d3      	str	r3, [r2, #12]
    
    lstm_1_output0_array.data = AI_PTR(g_network_activations_map[0] + 896);
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <network_configure_activations+0x6c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8002cd6:	4a10      	ldr	r2, [pc, #64]	; (8002d18 <network_configure_activations+0x74>)
 8002cd8:	6093      	str	r3, [r2, #8]
    lstm_1_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 896);
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <network_configure_activations+0x6c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8002ce2:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <network_configure_activations+0x74>)
 8002ce4:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <network_configure_activations+0x6c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <network_configure_activations+0x78>)
 8002cec:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <network_configure_activations+0x6c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <network_configure_activations+0x78>)
 8002cf4:	60d3      	str	r3, [r2, #12]
    
    return true;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e005      	b.n	8002d06 <network_configure_activations+0x62>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8002cfa:	2213      	movs	r2, #19
 8002cfc:	2130      	movs	r1, #48	; 0x30
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fb6a 	bl	80033d8 <ai_platform_network_set_error>
  return false;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000fa0 	.word	0x20000fa0
 8002d14:	2000001c 	.word	0x2000001c
 8002d18:	2000003c 	.word	0x2000003c
 8002d1c:	2000004c 	.word	0x2000004c

08002d20 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	483f      	ldr	r0, [pc, #252]	; (8002e2c <network_configure_weights+0x10c>)
 8002d30:	f000 fa1a 	bl	8003168 <ai_platform_get_weights_map>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d06d      	beq.n	8002e16 <network_configure_weights+0xf6>
    /* Updating weights (byte) offsets */
    
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <network_configure_weights+0x110>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d42:	4a3b      	ldr	r2, [pc, #236]	; (8002e30 <network_configure_weights+0x110>)
 8002d44:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8002d46:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <network_configure_weights+0x10c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a39      	ldr	r2, [pc, #228]	; (8002e30 <network_configure_weights+0x110>)
 8002d4c:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8002d4e:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <network_configure_weights+0x10c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a37      	ldr	r2, [pc, #220]	; (8002e30 <network_configure_weights+0x110>)
 8002d54:	60d3      	str	r3, [r2, #12]
    
    lstm_1_kernel_array.format |= AI_FMT_FLAG_CONST;
 8002d56:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <network_configure_weights+0x114>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d5e:	4a35      	ldr	r2, [pc, #212]	; (8002e34 <network_configure_weights+0x114>)
 8002d60:	6013      	str	r3, [r2, #0]
    lstm_1_kernel_array.data = AI_PTR(g_network_weights_map[0] + 8);
 8002d62:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <network_configure_weights+0x10c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3308      	adds	r3, #8
 8002d68:	4a32      	ldr	r2, [pc, #200]	; (8002e34 <network_configure_weights+0x114>)
 8002d6a:	6093      	str	r3, [r2, #8]
    lstm_1_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 8);
 8002d6c:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <network_configure_weights+0x10c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3308      	adds	r3, #8
 8002d72:	4a30      	ldr	r2, [pc, #192]	; (8002e34 <network_configure_weights+0x114>)
 8002d74:	60d3      	str	r3, [r2, #12]
    
    lstm_1_recurrent_array.format |= AI_FMT_FLAG_CONST;
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <network_configure_weights+0x118>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d7e:	4a2e      	ldr	r2, [pc, #184]	; (8002e38 <network_configure_weights+0x118>)
 8002d80:	6013      	str	r3, [r2, #0]
    lstm_1_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 520);
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <network_configure_weights+0x10c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d8a:	4a2b      	ldr	r2, [pc, #172]	; (8002e38 <network_configure_weights+0x118>)
 8002d8c:	6093      	str	r3, [r2, #8]
    lstm_1_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 520);
 8002d8e:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <network_configure_weights+0x10c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d96:	4a28      	ldr	r2, [pc, #160]	; (8002e38 <network_configure_weights+0x118>)
 8002d98:	60d3      	str	r3, [r2, #12]
    
    lstm_1_peephole_array.format |= AI_FMT_FLAG_CONST;
 8002d9a:	4b28      	ldr	r3, [pc, #160]	; (8002e3c <network_configure_weights+0x11c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002da2:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <network_configure_weights+0x11c>)
 8002da4:	6013      	str	r3, [r2, #0]
    lstm_1_peephole_array.data = AI_PTR(g_network_weights_map[0] + 16904);
 8002da6:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <network_configure_weights+0x10c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002dae:	3308      	adds	r3, #8
 8002db0:	4a22      	ldr	r2, [pc, #136]	; (8002e3c <network_configure_weights+0x11c>)
 8002db2:	6093      	str	r3, [r2, #8]
    lstm_1_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 16904);
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <network_configure_weights+0x10c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	4a1f      	ldr	r2, [pc, #124]	; (8002e3c <network_configure_weights+0x11c>)
 8002dc0:	60d3      	str	r3, [r2, #12]
    
    lstm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8002dc2:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <network_configure_weights+0x120>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <network_configure_weights+0x120>)
 8002dcc:	6013      	str	r3, [r2, #0]
    lstm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 17288);
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <network_configure_weights+0x10c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f503 4387 	add.w	r3, r3, #17280	; 0x4380
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	4a19      	ldr	r2, [pc, #100]	; (8002e40 <network_configure_weights+0x120>)
 8002dda:	6093      	str	r3, [r2, #8]
    lstm_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 17288);
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <network_configure_weights+0x10c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f503 4387 	add.w	r3, r3, #17280	; 0x4380
 8002de4:	3308      	adds	r3, #8
 8002de6:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <network_configure_weights+0x120>)
 8002de8:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8002dea:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <network_configure_weights+0x124>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002df2:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <network_configure_weights+0x124>)
 8002df4:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 17800);
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <network_configure_weights+0x10c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f503 438b 	add.w	r3, r3, #17792	; 0x4580
 8002dfe:	3308      	adds	r3, #8
 8002e00:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <network_configure_weights+0x124>)
 8002e02:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 17800);
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <network_configure_weights+0x10c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f503 438b 	add.w	r3, r3, #17792	; 0x4580
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	4a0d      	ldr	r2, [pc, #52]	; (8002e44 <network_configure_weights+0x124>)
 8002e10:	60d3      	str	r3, [r2, #12]
    
    return true;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e005      	b.n	8002e22 <network_configure_weights+0x102>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8002e16:	2212      	movs	r2, #18
 8002e18:	2130      	movs	r1, #48	; 0x30
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fadc 	bl	80033d8 <ai_platform_network_set_error>
  return false;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000fa4 	.word	0x20000fa4
 8002e30:	2000000c 	.word	0x2000000c
 8002e34:	2000006c 	.word	0x2000006c
 8002e38:	2000007c 	.word	0x2000007c
 8002e3c:	2000008c 	.word	0x2000008c
 8002e40:	2000009c 	.word	0x2000009c
 8002e44:	200000ac 	.word	0x200000ac

08002e48 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fa53 	bl	80032fc <ai_platform_network_get_error>
 8002e56:	4603      	mov	r3, r0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	2305      	movs	r3, #5
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2301      	movs	r3, #1
 8002e74:	4a04      	ldr	r2, [pc, #16]	; (8002e88 <ai_network_create+0x28>)
 8002e76:	6839      	ldr	r1, [r7, #0]
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fc59 	bl	8003730 <ai_platform_network_create>
 8002e7e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000538 	.word	0x20000538

08002e8c <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b096      	sub	sp, #88	; 0x58
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8002e98:	2100      	movs	r1, #0
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7ff ffe0 	bl	8002e60 <ai_network_create>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8002ea4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <ai_network_create_and_init+0x24>
        return err;
 8002eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eae:	e05d      	b.n	8002f6c <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 f8dd 	bl	8003074 <ai_network_data_params_get>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f083 0301 	eor.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ffbc 	bl	8002e48 <ai_network_get_error>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8002ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed6:	e049      	b.n	8002f6c <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d016      	beq.n	8002f0c <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	657b      	str	r3, [r7, #84]	; 0x54
 8002ee2:	e00e      	b.n	8002f02 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8002ee4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	4413      	add	r3, r2
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f922 	bl	8003140 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8002efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002efe:	3301      	adds	r3, #1
 8002f00:	657b      	str	r3, [r7, #84]	; 0x54
 8002f02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f04:	461a      	mov	r2, r3
 8002f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	dbeb      	blt.n	8002ee4 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	653b      	str	r3, [r7, #80]	; 0x50
 8002f16:	e00e      	b.n	8002f36 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8002f18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	3304      	adds	r3, #4
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f908 	bl	8003140 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8002f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f32:	3301      	adds	r3, #1
 8002f34:	653b      	str	r3, [r7, #80]	; 0x50
 8002f36:	8b7b      	ldrh	r3, [r7, #26]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	dbeb      	blt.n	8002f18 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f107 0214 	add.w	r2, r7, #20
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 f846 	bl	8002fdc <ai_network_init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f083 0301 	eor.w	r3, r3, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff71 	bl	8002e48 <ai_network_get_error>
 8002f66:	4603      	mov	r3, r0
 8002f68:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8002f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3758      	adds	r7, #88	; 0x58
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d104      	bne.n	8002f8e <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <ai_network_inputs_get+0x2c>)
 8002f86:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a06      	ldr	r2, [pc, #24]	; (8002fa4 <ai_network_inputs_get+0x30>)
 8002f8c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8002f8e:	6839      	ldr	r1, [r7, #0]
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fa27 	bl	80033e4 <ai_platform_inputs_get>
 8002f96:	4603      	mov	r3, r0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000538 	.word	0x20000538
 8002fa4:	a1c00100 	.word	0xa1c00100

08002fa8 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d104      	bne.n	8002fc2 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <ai_network_outputs_get+0x2c>)
 8002fba:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a06      	ldr	r2, [pc, #24]	; (8002fd8 <ai_network_outputs_get+0x30>)
 8002fc0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8002fc2:	6839      	ldr	r1, [r7, #0]
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fae3 	bl	8003590 <ai_platform_outputs_get>
 8002fca:	4603      	mov	r3, r0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000538 	.word	0x20000538
 8002fd8:	a1c00100 	.word	0xa1c00100

08002fdc <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8002fe6:	6839      	ldr	r1, [r7, #0]
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fc77 	bl	80038dc <ai_platform_network_init>
 8002fee:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <ai_network_init+0x1e>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e028      	b.n	800304c <ai_network_init+0x70>

  ai_bool ok = true;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8002ffe:	6839      	ldr	r1, [r7, #0]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff fe8d 	bl	8002d20 <network_configure_weights>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	7afb      	ldrb	r3, [r7, #11]
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf14      	ite	ne
 8003012:	2301      	movne	r3, #1
 8003014:	2300      	moveq	r3, #0
 8003016:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8003018:	6839      	ldr	r1, [r7, #0]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f7ff fe42 	bl	8002ca4 <network_configure_activations>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	7afb      	ldrb	r3, [r7, #11]
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fd40 	bl	8003ab8 <ai_platform_network_post_init>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	7afb      	ldrb	r3, [r7, #11]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf14      	ite	ne
 8003044:	2301      	movne	r3, #1
 8003046:	2300      	moveq	r3, #0
 8003048:	72fb      	strb	r3, [r7, #11]

  return ok;
 800304a:	7afb      	ldrb	r3, [r7, #11]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fdaf 	bl	8003bc8 <ai_platform_network_process>
 800306a:	4603      	mov	r3, r0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <ai_network_data_params_get+0x12>
 8003082:	2300      	movs	r3, #0
 8003084:	e016      	b.n	80030b4 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8003086:	4a0d      	ldr	r2, [pc, #52]	; (80030bc <ai_network_data_params_get+0x48>)
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003090:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <ai_network_data_params_get+0x4c>)
 8003096:	f107 0308 	add.w	r3, r7, #8
 800309a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800309e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80030a2:	f107 0210 	add.w	r2, r7, #16
 80030a6:	f107 0308 	add.w	r3, r7, #8
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f903 	bl	80032b8 <ai_platform_bind_network_params>
 80030b2:	4603      	mov	r3, r0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	08007b80 	.word	0x08007b80
 80030c0:	08007b88 	.word	0x08007b88

080030c4 <ai_buffer_get_size>:
 80030c4:	b378      	cbz	r0, 8003126 <ai_buffer_get_size+0x62>
 80030c6:	b410      	push	{r4}
 80030c8:	6803      	ldr	r3, [r0, #0]
 80030ca:	4a17      	ldr	r2, [pc, #92]	; (8003128 <ai_buffer_get_size+0x64>)
 80030cc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80030d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d01e      	beq.n	8003116 <ai_buffer_get_size+0x52>
 80030d8:	6984      	ldr	r4, [r0, #24]
 80030da:	6862      	ldr	r2, [r4, #4]
 80030dc:	7d03      	ldrb	r3, [r0, #20]
 80030de:	6941      	ldr	r1, [r0, #20]
 80030e0:	f1a3 0301 	sub.w	r3, r3, #1
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80030ee:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80030f2:	da0b      	bge.n	800310c <ai_buffer_get_size+0x48>
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d102      	bne.n	80030fe <ai_buffer_get_size+0x3a>
 80030f8:	2802      	cmp	r0, #2
 80030fa:	d007      	beq.n	800310c <ai_buffer_get_size+0x48>
 80030fc:	2302      	movs	r3, #2
 80030fe:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8003102:	3301      	adds	r3, #1
 8003104:	4298      	cmp	r0, r3
 8003106:	fb01 f202 	mul.w	r2, r1, r2
 800310a:	d1f3      	bne.n	80030f4 <ai_buffer_get_size+0x30>
 800310c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8003110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	2900      	cmp	r1, #0
 8003118:	d0de      	beq.n	80030d8 <ai_buffer_get_size+0x14>
 800311a:	6984      	ldr	r4, [r0, #24]
 800311c:	6863      	ldr	r3, [r4, #4]
 800311e:	331f      	adds	r3, #31
 8003120:	f023 021f 	bic.w	r2, r3, #31
 8003124:	e7da      	b.n	80030dc <ai_buffer_get_size+0x18>
 8003126:	4770      	bx	lr
 8003128:	000400c0 	.word	0x000400c0

0800312c <ai_buffer_array_sane>:
 800312c:	b138      	cbz	r0, 800313e <ai_buffer_array_sane+0x12>
 800312e:	6843      	ldr	r3, [r0, #4]
 8003130:	b123      	cbz	r3, 800313c <ai_buffer_array_sane+0x10>
 8003132:	8840      	ldrh	r0, [r0, #2]
 8003134:	3800      	subs	r0, #0
 8003136:	bf18      	it	ne
 8003138:	2001      	movne	r0, #1
 800313a:	4770      	bx	lr
 800313c:	4618      	mov	r0, r3
 800313e:	4770      	bx	lr

08003140 <ai_buffer_array_item_set_address>:
 8003140:	b150      	cbz	r0, 8003158 <ai_buffer_array_item_set_address+0x18>
 8003142:	6843      	ldr	r3, [r0, #4]
 8003144:	b14b      	cbz	r3, 800315a <ai_buffer_array_item_set_address+0x1a>
 8003146:	8840      	ldrh	r0, [r0, #2]
 8003148:	b900      	cbnz	r0, 800314c <ai_buffer_array_item_set_address+0xc>
 800314a:	4770      	bx	lr
 800314c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003150:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003154:	2001      	movs	r0, #1
 8003156:	604a      	str	r2, [r1, #4]
 8003158:	4770      	bx	lr
 800315a:	4618      	mov	r0, r3
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop

08003160 <_ai_platform_acquire_crc>:
 8003160:	2001      	movs	r0, #1
 8003162:	4770      	bx	lr

08003164 <_ai_platform_release_crc>:
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop

08003168 <ai_platform_get_weights_map>:
 8003168:	2a00      	cmp	r2, #0
 800316a:	d037      	beq.n	80031dc <ai_platform_get_weights_map+0x74>
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	4604      	mov	r4, r0
 8003170:	b1a0      	cbz	r0, 800319c <ai_platform_get_weights_map+0x34>
 8003172:	460f      	mov	r7, r1
 8003174:	b191      	cbz	r1, 800319c <ai_platform_get_weights_map+0x34>
 8003176:	4b25      	ldr	r3, [pc, #148]	; (800320c <ai_platform_get_weights_map+0xa4>)
 8003178:	6810      	ldr	r0, [r2, #0]
 800317a:	4298      	cmp	r0, r3
 800317c:	4615      	mov	r5, r2
 800317e:	d00f      	beq.n	80031a0 <ai_platform_get_weights_map+0x38>
 8003180:	6855      	ldr	r5, [r2, #4]
 8003182:	b15d      	cbz	r5, 800319c <ai_platform_get_weights_map+0x34>
 8003184:	682e      	ldr	r6, [r5, #0]
 8003186:	429e      	cmp	r6, r3
 8003188:	d02a      	beq.n	80031e0 <ai_platform_get_weights_map+0x78>
 800318a:	f1a1 0001 	sub.w	r0, r1, #1
 800318e:	6025      	str	r5, [r4, #0]
 8003190:	fab0 f080 	clz	r0, r0
 8003194:	0940      	lsrs	r0, r0, #5
 8003196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003198:	42a7      	cmp	r7, r4
 800319a:	d034      	beq.n	8003206 <ai_platform_get_weights_map+0x9e>
 800319c:	2000      	movs	r0, #0
 800319e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031a0:	1d10      	adds	r0, r2, #4
 80031a2:	f7ff ffc3 	bl	800312c <ai_buffer_array_sane>
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d0f8      	beq.n	800319c <ai_platform_get_weights_map+0x34>
 80031aa:	88eb      	ldrh	r3, [r5, #6]
 80031ac:	429f      	cmp	r7, r3
 80031ae:	d1f5      	bne.n	800319c <ai_platform_get_weights_map+0x34>
 80031b0:	f04f 0e00 	mov.w	lr, #0
 80031b4:	1f23      	subs	r3, r4, #4
 80031b6:	4670      	mov	r0, lr
 80031b8:	68aa      	ldr	r2, [r5, #8]
 80031ba:	eb02 0c0e 	add.w	ip, r2, lr
 80031be:	f10e 0e1c 	add.w	lr, lr, #28
 80031c2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80031c6:	b124      	cbz	r4, 80031d2 <ai_platform_get_weights_map+0x6a>
 80031c8:	3001      	adds	r0, #1
 80031ca:	4287      	cmp	r7, r0
 80031cc:	f843 4f04 	str.w	r4, [r3, #4]!
 80031d0:	d1f2      	bne.n	80031b8 <ai_platform_get_weights_map+0x50>
 80031d2:	1a38      	subs	r0, r7, r0
 80031d4:	fab0 f080 	clz	r0, r0
 80031d8:	0940      	lsrs	r0, r0, #5
 80031da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031dc:	2000      	movs	r0, #0
 80031de:	4770      	bx	lr
 80031e0:	1f23      	subs	r3, r4, #4
 80031e2:	4628      	mov	r0, r5
 80031e4:	2400      	movs	r4, #0
 80031e6:	e000      	b.n	80031ea <ai_platform_get_weights_map+0x82>
 80031e8:	4614      	mov	r4, r2
 80031ea:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80031ee:	42b2      	cmp	r2, r6
 80031f0:	d0d2      	beq.n	8003198 <ai_platform_get_weights_map+0x30>
 80031f2:	f843 2f04 	str.w	r2, [r3, #4]!
 80031f6:	1c62      	adds	r2, r4, #1
 80031f8:	4297      	cmp	r7, r2
 80031fa:	d1f5      	bne.n	80031e8 <ai_platform_get_weights_map+0x80>
 80031fc:	3402      	adds	r4, #2
 80031fe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003202:	42b3      	cmp	r3, r6
 8003204:	d1ca      	bne.n	800319c <ai_platform_get_weights_map+0x34>
 8003206:	2001      	movs	r0, #1
 8003208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800320a:	bf00      	nop
 800320c:	a1facade 	.word	0xa1facade

08003210 <ai_platform_get_activations_map>:
 8003210:	2a00      	cmp	r2, #0
 8003212:	d038      	beq.n	8003286 <ai_platform_get_activations_map+0x76>
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	4604      	mov	r4, r0
 8003218:	b1a0      	cbz	r0, 8003244 <ai_platform_get_activations_map+0x34>
 800321a:	460f      	mov	r7, r1
 800321c:	b191      	cbz	r1, 8003244 <ai_platform_get_activations_map+0x34>
 800321e:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <ai_platform_get_activations_map+0xa4>)
 8003220:	6810      	ldr	r0, [r2, #0]
 8003222:	4298      	cmp	r0, r3
 8003224:	4615      	mov	r5, r2
 8003226:	d00f      	beq.n	8003248 <ai_platform_get_activations_map+0x38>
 8003228:	6a15      	ldr	r5, [r2, #32]
 800322a:	b15d      	cbz	r5, 8003244 <ai_platform_get_activations_map+0x34>
 800322c:	682e      	ldr	r6, [r5, #0]
 800322e:	429e      	cmp	r6, r3
 8003230:	d02b      	beq.n	800328a <ai_platform_get_activations_map+0x7a>
 8003232:	f1a1 0001 	sub.w	r0, r1, #1
 8003236:	6025      	str	r5, [r4, #0]
 8003238:	fab0 f080 	clz	r0, r0
 800323c:	0940      	lsrs	r0, r0, #5
 800323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003240:	42a7      	cmp	r7, r4
 8003242:	d035      	beq.n	80032b0 <ai_platform_get_activations_map+0xa0>
 8003244:	2000      	movs	r0, #0
 8003246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003248:	f102 000c 	add.w	r0, r2, #12
 800324c:	f7ff ff6e 	bl	800312c <ai_buffer_array_sane>
 8003250:	2800      	cmp	r0, #0
 8003252:	d0f7      	beq.n	8003244 <ai_platform_get_activations_map+0x34>
 8003254:	89eb      	ldrh	r3, [r5, #14]
 8003256:	429f      	cmp	r7, r3
 8003258:	d1f4      	bne.n	8003244 <ai_platform_get_activations_map+0x34>
 800325a:	f04f 0e00 	mov.w	lr, #0
 800325e:	1f23      	subs	r3, r4, #4
 8003260:	4670      	mov	r0, lr
 8003262:	692a      	ldr	r2, [r5, #16]
 8003264:	eb02 0c0e 	add.w	ip, r2, lr
 8003268:	f10e 0e1c 	add.w	lr, lr, #28
 800326c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003270:	b124      	cbz	r4, 800327c <ai_platform_get_activations_map+0x6c>
 8003272:	3001      	adds	r0, #1
 8003274:	4287      	cmp	r7, r0
 8003276:	f843 4f04 	str.w	r4, [r3, #4]!
 800327a:	d1f2      	bne.n	8003262 <ai_platform_get_activations_map+0x52>
 800327c:	1a38      	subs	r0, r7, r0
 800327e:	fab0 f080 	clz	r0, r0
 8003282:	0940      	lsrs	r0, r0, #5
 8003284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003286:	2000      	movs	r0, #0
 8003288:	4770      	bx	lr
 800328a:	1f23      	subs	r3, r4, #4
 800328c:	4628      	mov	r0, r5
 800328e:	2400      	movs	r4, #0
 8003290:	e000      	b.n	8003294 <ai_platform_get_activations_map+0x84>
 8003292:	4614      	mov	r4, r2
 8003294:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8003298:	42b2      	cmp	r2, r6
 800329a:	d0d1      	beq.n	8003240 <ai_platform_get_activations_map+0x30>
 800329c:	f843 2f04 	str.w	r2, [r3, #4]!
 80032a0:	1c62      	adds	r2, r4, #1
 80032a2:	4297      	cmp	r7, r2
 80032a4:	d1f5      	bne.n	8003292 <ai_platform_get_activations_map+0x82>
 80032a6:	3402      	adds	r4, #2
 80032a8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80032ac:	42b3      	cmp	r3, r6
 80032ae:	d1c9      	bne.n	8003244 <ai_platform_get_activations_map+0x34>
 80032b0:	2001      	movs	r0, #1
 80032b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032b4:	a1facade 	.word	0xa1facade

080032b8 <ai_platform_bind_network_params>:
 80032b8:	b1a0      	cbz	r0, 80032e4 <ai_platform_bind_network_params+0x2c>
 80032ba:	b1b1      	cbz	r1, 80032ea <ai_platform_bind_network_params+0x32>
 80032bc:	b1c2      	cbz	r2, 80032f0 <ai_platform_bind_network_params+0x38>
 80032be:	b410      	push	{r4}
 80032c0:	4603      	mov	r3, r0
 80032c2:	4c0d      	ldr	r4, [pc, #52]	; (80032f8 <ai_platform_bind_network_params+0x40>)
 80032c4:	f843 4b04 	str.w	r4, [r3], #4
 80032c8:	f100 0c0c 	add.w	ip, r0, #12
 80032cc:	c903      	ldmia	r1, {r0, r1}
 80032ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80032d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032d6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80032da:	2301      	movs	r3, #1
 80032dc:	4618      	mov	r0, r3
 80032de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	4603      	mov	r3, r0
 80032e6:	4618      	mov	r0, r3
 80032e8:	4770      	bx	lr
 80032ea:	460b      	mov	r3, r1
 80032ec:	4618      	mov	r0, r3
 80032ee:	4770      	bx	lr
 80032f0:	4613      	mov	r3, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	a1facade 	.word	0xa1facade

080032fc <ai_platform_network_get_error>:
 80032fc:	b510      	push	{r4, lr}
 80032fe:	b1f0      	cbz	r0, 800333e <ai_platform_network_get_error+0x42>
 8003300:	4b2f      	ldr	r3, [pc, #188]	; (80033c0 <ai_platform_network_get_error+0xc4>)
 8003302:	6802      	ldr	r2, [r0, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	4604      	mov	r4, r0
 8003308:	d119      	bne.n	800333e <ai_platform_network_get_error+0x42>
 800330a:	f7ff ff29 	bl	8003160 <_ai_platform_acquire_crc>
 800330e:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <ai_platform_network_get_error+0xc8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331a:	d03c      	beq.n	8003396 <ai_platform_network_get_error+0x9a>
 800331c:	4a2a      	ldr	r2, [pc, #168]	; (80033c8 <ai_platform_network_get_error+0xcc>)
 800331e:	2301      	movs	r3, #1
 8003320:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003324:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1fb      	bne.n	8003324 <ai_platform_network_get_error+0x28>
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <ai_platform_network_get_error+0xd0>)
 800332e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003332:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003336:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <ai_platform_network_get_error+0xd4>)
 8003338:	429a      	cmp	r2, r3
 800333a:	d038      	beq.n	80033ae <ai_platform_network_get_error+0xb2>
 800333c:	e7fe      	b.n	800333c <ai_platform_network_get_error+0x40>
 800333e:	f7ff ff0f 	bl	8003160 <_ai_platform_acquire_crc>
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <ai_platform_network_get_error+0xc8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334e:	d010      	beq.n	8003372 <ai_platform_network_get_error+0x76>
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <ai_platform_network_get_error+0xcc>)
 8003352:	2301      	movs	r3, #1
 8003354:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003358:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1fb      	bne.n	8003358 <ai_platform_network_get_error+0x5c>
 8003360:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <ai_platform_network_get_error+0xd0>)
 8003362:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003366:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800336a:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <ai_platform_network_get_error+0xd4>)
 800336c:	429a      	cmp	r2, r3
 800336e:	d00d      	beq.n	800338c <ai_platform_network_get_error+0x90>
 8003370:	e7fe      	b.n	8003370 <ai_platform_network_get_error+0x74>
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <ai_platform_network_get_error+0xd8>)
 8003374:	2301      	movs	r3, #1
 8003376:	6093      	str	r3, [r2, #8]
 8003378:	6893      	ldr	r3, [r2, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1fc      	bne.n	8003378 <ai_platform_network_get_error+0x7c>
 800337e:	4b13      	ldr	r3, [pc, #76]	; (80033cc <ai_platform_network_get_error+0xd0>)
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <ai_platform_network_get_error+0xd4>)
 8003386:	429a      	cmp	r2, r3
 8003388:	d000      	beq.n	800338c <ai_platform_network_get_error+0x90>
 800338a:	e7fe      	b.n	800338a <ai_platform_network_get_error+0x8e>
 800338c:	f7ff feea 	bl	8003164 <_ai_platform_release_crc>
 8003390:	f241 0010 	movw	r0, #4112	; 0x1010
 8003394:	bd10      	pop	{r4, pc}
 8003396:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <ai_platform_network_get_error+0xd8>)
 8003398:	2301      	movs	r3, #1
 800339a:	6093      	str	r3, [r2, #8]
 800339c:	6893      	ldr	r3, [r2, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1fc      	bne.n	800339c <ai_platform_network_get_error+0xa0>
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <ai_platform_network_get_error+0xd0>)
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <ai_platform_network_get_error+0xd4>)
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d107      	bne.n	80033be <ai_platform_network_get_error+0xc2>
 80033ae:	f7ff fed9 	bl	8003164 <_ai_platform_release_crc>
 80033b2:	f104 0010 	add.w	r0, r4, #16
 80033b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033ba:	f000 be8b 	b.w	80040d4 <core_get_error>
 80033be:	e7fe      	b.n	80033be <ai_platform_network_get_error+0xc2>
 80033c0:	a1c00100 	.word	0xa1c00100
 80033c4:	e0042000 	.word	0xe0042000
 80033c8:	58024000 	.word	0x58024000
 80033cc:	f407a5c2 	.word	0xf407a5c2
 80033d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80033d4:	40023000 	.word	0x40023000

080033d8 <ai_platform_network_set_error>:
 80033d8:	b110      	cbz	r0, 80033e0 <ai_platform_network_set_error+0x8>
 80033da:	3010      	adds	r0, #16
 80033dc:	f000 be80 	b.w	80040e0 <core_set_error>
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop

080033e4 <ai_platform_inputs_get>:
 80033e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e8:	b085      	sub	sp, #20
 80033ea:	9102      	str	r1, [sp, #8]
 80033ec:	b1f0      	cbz	r0, 800342c <ai_platform_inputs_get+0x48>
 80033ee:	4b62      	ldr	r3, [pc, #392]	; (8003578 <ai_platform_inputs_get+0x194>)
 80033f0:	6802      	ldr	r2, [r0, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	4607      	mov	r7, r0
 80033f6:	d119      	bne.n	800342c <ai_platform_inputs_get+0x48>
 80033f8:	f7ff feb2 	bl	8003160 <_ai_platform_acquire_crc>
 80033fc:	4b5f      	ldr	r3, [pc, #380]	; (800357c <ai_platform_inputs_get+0x198>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003408:	d03d      	beq.n	8003486 <ai_platform_inputs_get+0xa2>
 800340a:	4a5d      	ldr	r2, [pc, #372]	; (8003580 <ai_platform_inputs_get+0x19c>)
 800340c:	2301      	movs	r3, #1
 800340e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003412:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1fb      	bne.n	8003412 <ai_platform_inputs_get+0x2e>
 800341a:	4b5a      	ldr	r3, [pc, #360]	; (8003584 <ai_platform_inputs_get+0x1a0>)
 800341c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003420:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003424:	4b58      	ldr	r3, [pc, #352]	; (8003588 <ai_platform_inputs_get+0x1a4>)
 8003426:	429a      	cmp	r2, r3
 8003428:	d039      	beq.n	800349e <ai_platform_inputs_get+0xba>
 800342a:	e7fe      	b.n	800342a <ai_platform_inputs_get+0x46>
 800342c:	f7ff fe98 	bl	8003160 <_ai_platform_acquire_crc>
 8003430:	4b52      	ldr	r3, [pc, #328]	; (800357c <ai_platform_inputs_get+0x198>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343c:	d010      	beq.n	8003460 <ai_platform_inputs_get+0x7c>
 800343e:	4a50      	ldr	r2, [pc, #320]	; (8003580 <ai_platform_inputs_get+0x19c>)
 8003440:	2301      	movs	r3, #1
 8003442:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003446:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1fb      	bne.n	8003446 <ai_platform_inputs_get+0x62>
 800344e:	4b4d      	ldr	r3, [pc, #308]	; (8003584 <ai_platform_inputs_get+0x1a0>)
 8003450:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003454:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003458:	4b4b      	ldr	r3, [pc, #300]	; (8003588 <ai_platform_inputs_get+0x1a4>)
 800345a:	429a      	cmp	r2, r3
 800345c:	d00d      	beq.n	800347a <ai_platform_inputs_get+0x96>
 800345e:	e7fe      	b.n	800345e <ai_platform_inputs_get+0x7a>
 8003460:	4a4a      	ldr	r2, [pc, #296]	; (800358c <ai_platform_inputs_get+0x1a8>)
 8003462:	2301      	movs	r3, #1
 8003464:	6093      	str	r3, [r2, #8]
 8003466:	6893      	ldr	r3, [r2, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1fc      	bne.n	8003466 <ai_platform_inputs_get+0x82>
 800346c:	4b45      	ldr	r3, [pc, #276]	; (8003584 <ai_platform_inputs_get+0x1a0>)
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	4b45      	ldr	r3, [pc, #276]	; (8003588 <ai_platform_inputs_get+0x1a4>)
 8003474:	429a      	cmp	r2, r3
 8003476:	d000      	beq.n	800347a <ai_platform_inputs_get+0x96>
 8003478:	e7fe      	b.n	8003478 <ai_platform_inputs_get+0x94>
 800347a:	f7ff fe73 	bl	8003164 <_ai_platform_release_crc>
 800347e:	2000      	movs	r0, #0
 8003480:	b005      	add	sp, #20
 8003482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003486:	4a41      	ldr	r2, [pc, #260]	; (800358c <ai_platform_inputs_get+0x1a8>)
 8003488:	2301      	movs	r3, #1
 800348a:	6093      	str	r3, [r2, #8]
 800348c:	6893      	ldr	r3, [r2, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1fc      	bne.n	800348c <ai_platform_inputs_get+0xa8>
 8003492:	4b3c      	ldr	r3, [pc, #240]	; (8003584 <ai_platform_inputs_get+0x1a0>)
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <ai_platform_inputs_get+0x1a4>)
 800349a:	429a      	cmp	r2, r3
 800349c:	d155      	bne.n	800354a <ai_platform_inputs_get+0x166>
 800349e:	f7ff fe61 	bl	8003164 <_ai_platform_release_crc>
 80034a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d051      	beq.n	800354c <ai_platform_inputs_get+0x168>
 80034a8:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80034ac:	f1ba 0f00 	cmp.w	sl, #0
 80034b0:	d04c      	beq.n	800354c <ai_platform_inputs_get+0x168>
 80034b2:	f04f 0b00 	mov.w	fp, #0
 80034b6:	465d      	mov	r5, fp
 80034b8:	9703      	str	r7, [sp, #12]
 80034ba:	e016      	b.n	80034ea <ai_platform_inputs_get+0x106>
 80034bc:	9901      	ldr	r1, [sp, #4]
 80034be:	2301      	movs	r3, #1
 80034c0:	507b      	str	r3, [r7, r1]
 80034c2:	69b1      	ldr	r1, [r6, #24]
 80034c4:	6849      	ldr	r1, [r1, #4]
 80034c6:	6121      	str	r1, [r4, #16]
 80034c8:	f04f 0301 	mov.w	r3, #1
 80034cc:	7523      	strb	r3, [r4, #20]
 80034ce:	e9c4 c200 	strd	ip, r2, [r4]
 80034d2:	6962      	ldr	r2, [r4, #20]
 80034d4:	60a0      	str	r0, [r4, #8]
 80034d6:	2300      	movs	r3, #0
 80034d8:	f369 221f 	bfi	r2, r9, #8, #24
 80034dc:	f8c4 8018 	str.w	r8, [r4, #24]
 80034e0:	60e3      	str	r3, [r4, #12]
 80034e2:	3501      	adds	r5, #1
 80034e4:	f10b 0b1c 	add.w	fp, fp, #28
 80034e8:	6162      	str	r2, [r4, #20]
 80034ea:	f8ba 3000 	ldrh.w	r3, [sl]
 80034ee:	42ab      	cmp	r3, r5
 80034f0:	b2aa      	uxth	r2, r5
 80034f2:	d93a      	bls.n	800356a <ai_platform_inputs_get+0x186>
 80034f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80034f8:	00e9      	lsls	r1, r5, #3
 80034fa:	9101      	str	r1, [sp, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d034      	beq.n	800356a <ai_platform_inputs_get+0x186>
 8003500:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003504:	2e00      	cmp	r6, #0
 8003506:	d030      	beq.n	800356a <ai_platform_inputs_get+0x186>
 8003508:	f8da 3008 	ldr.w	r3, [sl, #8]
 800350c:	69b2      	ldr	r2, [r6, #24]
 800350e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003512:	6810      	ldr	r0, [r2, #0]
 8003514:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003518:	68b3      	ldr	r3, [r6, #8]
 800351a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800351e:	f003 f843 	bl	80065a8 <ai_array_to_buffer_fmt>
 8003522:	69b1      	ldr	r1, [r6, #24]
 8003524:	4684      	mov	ip, r0
 8003526:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800352a:	688a      	ldr	r2, [r1, #8]
 800352c:	445c      	add	r4, fp
 800352e:	2800      	cmp	r0, #0
 8003530:	d0c8      	beq.n	80034c4 <ai_platform_inputs_get+0xe0>
 8003532:	2100      	movs	r1, #0
 8003534:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8003538:	6831      	ldr	r1, [r6, #0]
 800353a:	6041      	str	r1, [r0, #4]
 800353c:	b111      	cbz	r1, 8003544 <ai_platform_inputs_get+0x160>
 800353e:	8849      	ldrh	r1, [r1, #2]
 8003540:	2900      	cmp	r1, #0
 8003542:	d1bb      	bne.n	80034bc <ai_platform_inputs_get+0xd8>
 8003544:	69b1      	ldr	r1, [r6, #24]
 8003546:	2000      	movs	r0, #0
 8003548:	e7bc      	b.n	80034c4 <ai_platform_inputs_get+0xe0>
 800354a:	e7fe      	b.n	800354a <ai_platform_inputs_get+0x166>
 800354c:	2218      	movs	r2, #24
 800354e:	2111      	movs	r1, #17
 8003550:	f107 0010 	add.w	r0, r7, #16
 8003554:	f000 fdc4 	bl	80040e0 <core_set_error>
 8003558:	2200      	movs	r2, #0
 800355a:	4610      	mov	r0, r2
 800355c:	9b02      	ldr	r3, [sp, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d08e      	beq.n	8003480 <ai_platform_inputs_get+0x9c>
 8003562:	801a      	strh	r2, [r3, #0]
 8003564:	b005      	add	sp, #20
 8003566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800356a:	9f03      	ldr	r7, [sp, #12]
 800356c:	2a00      	cmp	r2, #0
 800356e:	d0ed      	beq.n	800354c <ai_platform_inputs_get+0x168>
 8003570:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003574:	6858      	ldr	r0, [r3, #4]
 8003576:	e7f1      	b.n	800355c <ai_platform_inputs_get+0x178>
 8003578:	a1c00100 	.word	0xa1c00100
 800357c:	e0042000 	.word	0xe0042000
 8003580:	58024000 	.word	0x58024000
 8003584:	f407a5c2 	.word	0xf407a5c2
 8003588:	b5e8b5cd 	.word	0xb5e8b5cd
 800358c:	40023000 	.word	0x40023000

08003590 <ai_platform_outputs_get>:
 8003590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003594:	b085      	sub	sp, #20
 8003596:	9102      	str	r1, [sp, #8]
 8003598:	b1f0      	cbz	r0, 80035d8 <ai_platform_outputs_get+0x48>
 800359a:	4b5f      	ldr	r3, [pc, #380]	; (8003718 <ai_platform_outputs_get+0x188>)
 800359c:	6802      	ldr	r2, [r0, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	4607      	mov	r7, r0
 80035a2:	d119      	bne.n	80035d8 <ai_platform_outputs_get+0x48>
 80035a4:	f7ff fddc 	bl	8003160 <_ai_platform_acquire_crc>
 80035a8:	4b5c      	ldr	r3, [pc, #368]	; (800371c <ai_platform_outputs_get+0x18c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b4:	d03d      	beq.n	8003632 <ai_platform_outputs_get+0xa2>
 80035b6:	4a5a      	ldr	r2, [pc, #360]	; (8003720 <ai_platform_outputs_get+0x190>)
 80035b8:	2301      	movs	r3, #1
 80035ba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80035be:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1fb      	bne.n	80035be <ai_platform_outputs_get+0x2e>
 80035c6:	4b57      	ldr	r3, [pc, #348]	; (8003724 <ai_platform_outputs_get+0x194>)
 80035c8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80035cc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80035d0:	4b55      	ldr	r3, [pc, #340]	; (8003728 <ai_platform_outputs_get+0x198>)
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d039      	beq.n	800364a <ai_platform_outputs_get+0xba>
 80035d6:	e7fe      	b.n	80035d6 <ai_platform_outputs_get+0x46>
 80035d8:	f7ff fdc2 	bl	8003160 <_ai_platform_acquire_crc>
 80035dc:	4b4f      	ldr	r3, [pc, #316]	; (800371c <ai_platform_outputs_get+0x18c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e8:	d010      	beq.n	800360c <ai_platform_outputs_get+0x7c>
 80035ea:	4a4d      	ldr	r2, [pc, #308]	; (8003720 <ai_platform_outputs_get+0x190>)
 80035ec:	2301      	movs	r3, #1
 80035ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80035f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1fb      	bne.n	80035f2 <ai_platform_outputs_get+0x62>
 80035fa:	4b4a      	ldr	r3, [pc, #296]	; (8003724 <ai_platform_outputs_get+0x194>)
 80035fc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003600:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003604:	4b48      	ldr	r3, [pc, #288]	; (8003728 <ai_platform_outputs_get+0x198>)
 8003606:	429a      	cmp	r2, r3
 8003608:	d00d      	beq.n	8003626 <ai_platform_outputs_get+0x96>
 800360a:	e7fe      	b.n	800360a <ai_platform_outputs_get+0x7a>
 800360c:	4a47      	ldr	r2, [pc, #284]	; (800372c <ai_platform_outputs_get+0x19c>)
 800360e:	2301      	movs	r3, #1
 8003610:	6093      	str	r3, [r2, #8]
 8003612:	6893      	ldr	r3, [r2, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1fc      	bne.n	8003612 <ai_platform_outputs_get+0x82>
 8003618:	4b42      	ldr	r3, [pc, #264]	; (8003724 <ai_platform_outputs_get+0x194>)
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	4b42      	ldr	r3, [pc, #264]	; (8003728 <ai_platform_outputs_get+0x198>)
 8003620:	429a      	cmp	r2, r3
 8003622:	d000      	beq.n	8003626 <ai_platform_outputs_get+0x96>
 8003624:	e7fe      	b.n	8003624 <ai_platform_outputs_get+0x94>
 8003626:	f7ff fd9d 	bl	8003164 <_ai_platform_release_crc>
 800362a:	2000      	movs	r0, #0
 800362c:	b005      	add	sp, #20
 800362e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003632:	4a3e      	ldr	r2, [pc, #248]	; (800372c <ai_platform_outputs_get+0x19c>)
 8003634:	2301      	movs	r3, #1
 8003636:	6093      	str	r3, [r2, #8]
 8003638:	6893      	ldr	r3, [r2, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1fc      	bne.n	8003638 <ai_platform_outputs_get+0xa8>
 800363e:	4b39      	ldr	r3, [pc, #228]	; (8003724 <ai_platform_outputs_get+0x194>)
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	4b38      	ldr	r3, [pc, #224]	; (8003728 <ai_platform_outputs_get+0x198>)
 8003646:	429a      	cmp	r2, r3
 8003648:	d150      	bne.n	80036ec <ai_platform_outputs_get+0x15c>
 800364a:	f7ff fd8b 	bl	8003164 <_ai_platform_release_crc>
 800364e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d958      	bls.n	8003706 <ai_platform_outputs_get+0x176>
 8003654:	f04f 0b00 	mov.w	fp, #0
 8003658:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800365c:	9703      	str	r7, [sp, #12]
 800365e:	465d      	mov	r5, fp
 8003660:	e016      	b.n	8003690 <ai_platform_outputs_get+0x100>
 8003662:	9901      	ldr	r1, [sp, #4]
 8003664:	2301      	movs	r3, #1
 8003666:	507b      	str	r3, [r7, r1]
 8003668:	69b1      	ldr	r1, [r6, #24]
 800366a:	6849      	ldr	r1, [r1, #4]
 800366c:	6121      	str	r1, [r4, #16]
 800366e:	f04f 0301 	mov.w	r3, #1
 8003672:	7523      	strb	r3, [r4, #20]
 8003674:	e9c4 c200 	strd	ip, r2, [r4]
 8003678:	6962      	ldr	r2, [r4, #20]
 800367a:	60a0      	str	r0, [r4, #8]
 800367c:	2300      	movs	r3, #0
 800367e:	f369 221f 	bfi	r2, r9, #8, #24
 8003682:	f8c4 8018 	str.w	r8, [r4, #24]
 8003686:	60e3      	str	r3, [r4, #12]
 8003688:	3501      	adds	r5, #1
 800368a:	f10b 0b1c 	add.w	fp, fp, #28
 800368e:	6162      	str	r2, [r4, #20]
 8003690:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003694:	42ab      	cmp	r3, r5
 8003696:	b2aa      	uxth	r2, r5
 8003698:	d929      	bls.n	80036ee <ai_platform_outputs_get+0x15e>
 800369a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800369e:	00e9      	lsls	r1, r5, #3
 80036a0:	9101      	str	r1, [sp, #4]
 80036a2:	b323      	cbz	r3, 80036ee <ai_platform_outputs_get+0x15e>
 80036a4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80036a8:	b30e      	cbz	r6, 80036ee <ai_platform_outputs_get+0x15e>
 80036aa:	f8da 3014 	ldr.w	r3, [sl, #20]
 80036ae:	69b2      	ldr	r2, [r6, #24]
 80036b0:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80036b4:	6810      	ldr	r0, [r2, #0]
 80036b6:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80036ba:	68b3      	ldr	r3, [r6, #8]
 80036bc:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80036c0:	f002 ff72 	bl	80065a8 <ai_array_to_buffer_fmt>
 80036c4:	69b1      	ldr	r1, [r6, #24]
 80036c6:	4684      	mov	ip, r0
 80036c8:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80036cc:	688a      	ldr	r2, [r1, #8]
 80036ce:	445c      	add	r4, fp
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d0ca      	beq.n	800366a <ai_platform_outputs_get+0xda>
 80036d4:	2100      	movs	r1, #0
 80036d6:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80036da:	6831      	ldr	r1, [r6, #0]
 80036dc:	6041      	str	r1, [r0, #4]
 80036de:	b111      	cbz	r1, 80036e6 <ai_platform_outputs_get+0x156>
 80036e0:	8849      	ldrh	r1, [r1, #2]
 80036e2:	2900      	cmp	r1, #0
 80036e4:	d1bd      	bne.n	8003662 <ai_platform_outputs_get+0xd2>
 80036e6:	69b1      	ldr	r1, [r6, #24]
 80036e8:	2000      	movs	r0, #0
 80036ea:	e7be      	b.n	800366a <ai_platform_outputs_get+0xda>
 80036ec:	e7fe      	b.n	80036ec <ai_platform_outputs_get+0x15c>
 80036ee:	9f03      	ldr	r7, [sp, #12]
 80036f0:	b14a      	cbz	r2, 8003706 <ai_platform_outputs_get+0x176>
 80036f2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80036f6:	6858      	ldr	r0, [r3, #4]
 80036f8:	9b02      	ldr	r3, [sp, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d096      	beq.n	800362c <ai_platform_outputs_get+0x9c>
 80036fe:	801a      	strh	r2, [r3, #0]
 8003700:	b005      	add	sp, #20
 8003702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003706:	2218      	movs	r2, #24
 8003708:	2111      	movs	r1, #17
 800370a:	f107 0010 	add.w	r0, r7, #16
 800370e:	f000 fce7 	bl	80040e0 <core_set_error>
 8003712:	2200      	movs	r2, #0
 8003714:	4610      	mov	r0, r2
 8003716:	e7ef      	b.n	80036f8 <ai_platform_outputs_get+0x168>
 8003718:	a1c00100 	.word	0xa1c00100
 800371c:	e0042000 	.word	0xe0042000
 8003720:	58024000 	.word	0x58024000
 8003724:	f407a5c2 	.word	0xf407a5c2
 8003728:	b5e8b5cd 	.word	0xb5e8b5cd
 800372c:	40023000 	.word	0x40023000

08003730 <ai_platform_network_create>:
 8003730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003734:	b083      	sub	sp, #12
 8003736:	4606      	mov	r6, r0
 8003738:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800373c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8003740:	4615      	mov	r5, r2
 8003742:	461f      	mov	r7, r3
 8003744:	f7ff fd0c 	bl	8003160 <_ai_platform_acquire_crc>
 8003748:	b188      	cbz	r0, 800376e <ai_platform_network_create+0x3e>
 800374a:	4a5d      	ldr	r2, [pc, #372]	; (80038c0 <ai_platform_network_create+0x190>)
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003752:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003756:	4603      	mov	r3, r0
 8003758:	d00e      	beq.n	8003778 <ai_platform_network_create+0x48>
 800375a:	4a5a      	ldr	r2, [pc, #360]	; (80038c4 <ai_platform_network_create+0x194>)
 800375c:	2118      	movs	r1, #24
 800375e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003762:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8003766:	2918      	cmp	r1, #24
 8003768:	d018      	beq.n	800379c <ai_platform_network_create+0x6c>
 800376a:	f7ff fcfb 	bl	8003164 <_ai_platform_release_crc>
 800376e:	f244 1033 	movw	r0, #16691	; 0x4133
 8003772:	b003      	add	sp, #12
 8003774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003778:	4a53      	ldr	r2, [pc, #332]	; (80038c8 <ai_platform_network_create+0x198>)
 800377a:	2101      	movs	r1, #1
 800377c:	6091      	str	r1, [r2, #8]
 800377e:	2114      	movs	r1, #20
 8003780:	e001      	b.n	8003786 <ai_platform_network_create+0x56>
 8003782:	3901      	subs	r1, #1
 8003784:	d002      	beq.n	800378c <ai_platform_network_create+0x5c>
 8003786:	6894      	ldr	r4, [r2, #8]
 8003788:	2c00      	cmp	r4, #0
 800378a:	d1fa      	bne.n	8003782 <ai_platform_network_create+0x52>
 800378c:	4a4e      	ldr	r2, [pc, #312]	; (80038c8 <ai_platform_network_create+0x198>)
 800378e:	6891      	ldr	r1, [r2, #8]
 8003790:	b911      	cbnz	r1, 8003798 <ai_platform_network_create+0x68>
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	3201      	adds	r2, #1
 8003796:	d008      	beq.n	80037aa <ai_platform_network_create+0x7a>
 8003798:	4618      	mov	r0, r3
 800379a:	e7e6      	b.n	800376a <ai_platform_network_create+0x3a>
 800379c:	2101      	movs	r1, #1
 800379e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80037a2:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80037a6:	2900      	cmp	r1, #0
 80037a8:	d1fb      	bne.n	80037a2 <ai_platform_network_create+0x72>
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fcda 	bl	8003164 <_ai_platform_release_crc>
 80037b0:	f7ff fcd6 	bl	8003160 <_ai_platform_acquire_crc>
 80037b4:	4b42      	ldr	r3, [pc, #264]	; (80038c0 <ai_platform_network_create+0x190>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c0:	d010      	beq.n	80037e4 <ai_platform_network_create+0xb4>
 80037c2:	4b40      	ldr	r3, [pc, #256]	; (80038c4 <ai_platform_network_create+0x194>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80037ca:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80037ce:	2900      	cmp	r1, #0
 80037d0:	d1fb      	bne.n	80037ca <ai_platform_network_create+0x9a>
 80037d2:	4a3e      	ldr	r2, [pc, #248]	; (80038cc <ai_platform_network_create+0x19c>)
 80037d4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80037d8:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80037dc:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <ai_platform_network_create+0x1a0>)
 80037de:	429a      	cmp	r2, r3
 80037e0:	d00c      	beq.n	80037fc <ai_platform_network_create+0xcc>
 80037e2:	e7fe      	b.n	80037e2 <ai_platform_network_create+0xb2>
 80037e4:	4a38      	ldr	r2, [pc, #224]	; (80038c8 <ai_platform_network_create+0x198>)
 80037e6:	2301      	movs	r3, #1
 80037e8:	6093      	str	r3, [r2, #8]
 80037ea:	6893      	ldr	r3, [r2, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1fc      	bne.n	80037ea <ai_platform_network_create+0xba>
 80037f0:	4b36      	ldr	r3, [pc, #216]	; (80038cc <ai_platform_network_create+0x19c>)
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <ai_platform_network_create+0x1a0>)
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d122      	bne.n	8003842 <ai_platform_network_create+0x112>
 80037fc:	f7ff fcb2 	bl	8003164 <_ai_platform_release_crc>
 8003800:	b38e      	cbz	r6, 8003866 <ai_platform_network_create+0x136>
 8003802:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <ai_platform_network_create+0x1a4>)
 8003804:	602b      	str	r3, [r5, #0]
 8003806:	6035      	str	r5, [r6, #0]
 8003808:	f000 fc62 	bl	80040d0 <core_init>
 800380c:	b1d0      	cbz	r0, 8003844 <ai_platform_network_create+0x114>
 800380e:	f7ff fca7 	bl	8003160 <_ai_platform_acquire_crc>
 8003812:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <ai_platform_network_create+0x190>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800381a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381e:	d025      	beq.n	800386c <ai_platform_network_create+0x13c>
 8003820:	4a28      	ldr	r2, [pc, #160]	; (80038c4 <ai_platform_network_create+0x194>)
 8003822:	2301      	movs	r3, #1
 8003824:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003828:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1fb      	bne.n	8003828 <ai_platform_network_create+0xf8>
 8003830:	4b26      	ldr	r3, [pc, #152]	; (80038cc <ai_platform_network_create+0x19c>)
 8003832:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003836:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800383a:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <ai_platform_network_create+0x1a0>)
 800383c:	429a      	cmp	r2, r3
 800383e:	d022      	beq.n	8003886 <ai_platform_network_create+0x156>
 8003840:	e7fe      	b.n	8003840 <ai_platform_network_create+0x110>
 8003842:	e7fe      	b.n	8003842 <ai_platform_network_create+0x112>
 8003844:	2430      	movs	r4, #48	; 0x30
 8003846:	2300      	movs	r3, #0
 8003848:	6033      	str	r3, [r6, #0]
 800384a:	2610      	movs	r6, #16
 800384c:	464a      	mov	r2, r9
 800384e:	4641      	mov	r1, r8
 8003850:	4638      	mov	r0, r7
 8003852:	f002 ff4f 	bl	80066f4 <ai_version_get>
 8003856:	4603      	mov	r3, r0
 8003858:	2000      	movs	r0, #0
 800385a:	f364 0007 	bfi	r0, r4, #0, #8
 800385e:	64ab      	str	r3, [r5, #72]	; 0x48
 8003860:	f366 201f 	bfi	r0, r6, #8, #24
 8003864:	e785      	b.n	8003772 <ai_platform_network_create+0x42>
 8003866:	f241 0010 	movw	r0, #4112	; 0x1010
 800386a:	e782      	b.n	8003772 <ai_platform_network_create+0x42>
 800386c:	4a16      	ldr	r2, [pc, #88]	; (80038c8 <ai_platform_network_create+0x198>)
 800386e:	2301      	movs	r3, #1
 8003870:	6093      	str	r3, [r2, #8]
 8003872:	6893      	ldr	r3, [r2, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1fc      	bne.n	8003872 <ai_platform_network_create+0x142>
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <ai_platform_network_create+0x19c>)
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <ai_platform_network_create+0x1a0>)
 8003880:	429a      	cmp	r2, r3
 8003882:	d000      	beq.n	8003886 <ai_platform_network_create+0x156>
 8003884:	e7fe      	b.n	8003884 <ai_platform_network_create+0x154>
 8003886:	f7ff fc6d 	bl	8003164 <_ai_platform_release_crc>
 800388a:	2200      	movs	r2, #0
 800388c:	4641      	mov	r1, r8
 800388e:	4638      	mov	r0, r7
 8003890:	f002 ff30 	bl	80066f4 <ai_version_get>
 8003894:	2200      	movs	r2, #0
 8003896:	4604      	mov	r4, r0
 8003898:	2105      	movs	r1, #5
 800389a:	2001      	movs	r0, #1
 800389c:	f002 ff2a 	bl	80066f4 <ai_version_get>
 80038a0:	4284      	cmp	r4, r0
 80038a2:	d001      	beq.n	80038a8 <ai_platform_network_create+0x178>
 80038a4:	2401      	movs	r4, #1
 80038a6:	e7ce      	b.n	8003846 <ai_platform_network_create+0x116>
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <ai_platform_network_create+0x1a8>)
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	a801      	add	r0, sp, #4
 80038ae:	f000 fc23 	bl	80040f8 <ai_check_custom_types>
 80038b2:	b110      	cbz	r0, 80038ba <ai_platform_network_create+0x18a>
 80038b4:	2600      	movs	r6, #0
 80038b6:	4634      	mov	r4, r6
 80038b8:	e7c8      	b.n	800384c <ai_platform_network_create+0x11c>
 80038ba:	2402      	movs	r4, #2
 80038bc:	e7c3      	b.n	8003846 <ai_platform_network_create+0x116>
 80038be:	bf00      	nop
 80038c0:	e0042000 	.word	0xe0042000
 80038c4:	58024000 	.word	0x58024000
 80038c8:	40023000 	.word	0x40023000
 80038cc:	f407a5c2 	.word	0xf407a5c2
 80038d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80038d4:	a1c00100 	.word	0xa1c00100
 80038d8:	84048403 	.word	0x84048403

080038dc <ai_platform_network_init>:
 80038dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038e0:	b1f8      	cbz	r0, 8003922 <ai_platform_network_init+0x46>
 80038e2:	4b6e      	ldr	r3, [pc, #440]	; (8003a9c <ai_platform_network_init+0x1c0>)
 80038e4:	6802      	ldr	r2, [r0, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	4604      	mov	r4, r0
 80038ea:	d11a      	bne.n	8003922 <ai_platform_network_init+0x46>
 80038ec:	460e      	mov	r6, r1
 80038ee:	f7ff fc37 	bl	8003160 <_ai_platform_acquire_crc>
 80038f2:	4b6b      	ldr	r3, [pc, #428]	; (8003aa0 <ai_platform_network_init+0x1c4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fe:	d03d      	beq.n	800397c <ai_platform_network_init+0xa0>
 8003900:	4a68      	ldr	r2, [pc, #416]	; (8003aa4 <ai_platform_network_init+0x1c8>)
 8003902:	2301      	movs	r3, #1
 8003904:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003908:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1fb      	bne.n	8003908 <ai_platform_network_init+0x2c>
 8003910:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <ai_platform_network_init+0x1cc>)
 8003912:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003916:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800391a:	4b64      	ldr	r3, [pc, #400]	; (8003aac <ai_platform_network_init+0x1d0>)
 800391c:	429a      	cmp	r2, r3
 800391e:	d039      	beq.n	8003994 <ai_platform_network_init+0xb8>
 8003920:	e7fe      	b.n	8003920 <ai_platform_network_init+0x44>
 8003922:	f7ff fc1d 	bl	8003160 <_ai_platform_acquire_crc>
 8003926:	4b5e      	ldr	r3, [pc, #376]	; (8003aa0 <ai_platform_network_init+0x1c4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800392e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003932:	d010      	beq.n	8003956 <ai_platform_network_init+0x7a>
 8003934:	4a5b      	ldr	r2, [pc, #364]	; (8003aa4 <ai_platform_network_init+0x1c8>)
 8003936:	2301      	movs	r3, #1
 8003938:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800393c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1fb      	bne.n	800393c <ai_platform_network_init+0x60>
 8003944:	4b58      	ldr	r3, [pc, #352]	; (8003aa8 <ai_platform_network_init+0x1cc>)
 8003946:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800394a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800394e:	4b57      	ldr	r3, [pc, #348]	; (8003aac <ai_platform_network_init+0x1d0>)
 8003950:	429a      	cmp	r2, r3
 8003952:	d00d      	beq.n	8003970 <ai_platform_network_init+0x94>
 8003954:	e7fe      	b.n	8003954 <ai_platform_network_init+0x78>
 8003956:	4a56      	ldr	r2, [pc, #344]	; (8003ab0 <ai_platform_network_init+0x1d4>)
 8003958:	2301      	movs	r3, #1
 800395a:	6093      	str	r3, [r2, #8]
 800395c:	6893      	ldr	r3, [r2, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1fc      	bne.n	800395c <ai_platform_network_init+0x80>
 8003962:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <ai_platform_network_init+0x1cc>)
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	4b50      	ldr	r3, [pc, #320]	; (8003aac <ai_platform_network_init+0x1d0>)
 800396a:	429a      	cmp	r2, r3
 800396c:	d000      	beq.n	8003970 <ai_platform_network_init+0x94>
 800396e:	e7fe      	b.n	800396e <ai_platform_network_init+0x92>
 8003970:	f7ff fbf8 	bl	8003164 <_ai_platform_release_crc>
 8003974:	2600      	movs	r6, #0
 8003976:	4630      	mov	r0, r6
 8003978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800397c:	4a4c      	ldr	r2, [pc, #304]	; (8003ab0 <ai_platform_network_init+0x1d4>)
 800397e:	2301      	movs	r3, #1
 8003980:	6093      	str	r3, [r2, #8]
 8003982:	6893      	ldr	r3, [r2, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1fc      	bne.n	8003982 <ai_platform_network_init+0xa6>
 8003988:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <ai_platform_network_init+0x1cc>)
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	4b47      	ldr	r3, [pc, #284]	; (8003aac <ai_platform_network_init+0x1d0>)
 8003990:	429a      	cmp	r2, r3
 8003992:	d11c      	bne.n	80039ce <ai_platform_network_init+0xf2>
 8003994:	f7ff fbe6 	bl	8003164 <_ai_platform_release_crc>
 8003998:	2e00      	cmp	r6, #0
 800399a:	d06f      	beq.n	8003a7c <ai_platform_network_init+0x1a0>
 800399c:	4b45      	ldr	r3, [pc, #276]	; (8003ab4 <ai_platform_network_init+0x1d8>)
 800399e:	6832      	ldr	r2, [r6, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d115      	bne.n	80039d0 <ai_platform_network_init+0xf4>
 80039a4:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80039a8:	6933      	ldr	r3, [r6, #16]
 80039aa:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 80039ae:	89f7      	ldrh	r7, [r6, #14]
 80039b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80039b2:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80039b6:	2303      	movs	r3, #3
 80039b8:	84e7      	strh	r7, [r4, #38]	; 0x26
 80039ba:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80039be:	60e3      	str	r3, [r4, #12]
 80039c0:	4620      	mov	r0, r4
 80039c2:	4626      	mov	r6, r4
 80039c4:	f000 fbc2 	bl	800414c <ai_layers_init_all>
 80039c8:	4630      	mov	r0, r6
 80039ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ce:	e7fe      	b.n	80039ce <ai_platform_network_init+0xf2>
 80039d0:	2101      	movs	r1, #1
 80039d2:	4630      	mov	r0, r6
 80039d4:	4635      	mov	r5, r6
 80039d6:	6876      	ldr	r6, [r6, #4]
 80039d8:	f7ff fb74 	bl	80030c4 <ai_buffer_get_size>
 80039dc:	f105 081c 	add.w	r8, r5, #28
 80039e0:	4681      	mov	r9, r0
 80039e2:	2101      	movs	r1, #1
 80039e4:	4640      	mov	r0, r8
 80039e6:	6a2f      	ldr	r7, [r5, #32]
 80039e8:	f7ff fb6c 	bl	80030c4 <ai_buffer_get_size>
 80039ec:	f1b9 0f00 	cmp.w	r9, #0
 80039f0:	d025      	beq.n	8003a3e <ai_platform_network_init+0x162>
 80039f2:	2201      	movs	r2, #1
 80039f4:	4696      	mov	lr, r2
 80039f6:	bb30      	cbnz	r0, 8003a46 <ai_platform_network_init+0x16a>
 80039f8:	4680      	mov	r8, r0
 80039fa:	4607      	mov	r7, r0
 80039fc:	b376      	cbz	r6, 8003a5c <ai_platform_network_init+0x180>
 80039fe:	8be3      	ldrh	r3, [r4, #30]
 8003a00:	4573      	cmp	r3, lr
 8003a02:	d323      	bcc.n	8003a4c <ai_platform_network_init+0x170>
 8003a04:	b142      	cbz	r2, 8003a18 <ai_platform_network_init+0x13c>
 8003a06:	46ac      	mov	ip, r5
 8003a08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a0c:	6a25      	ldr	r5, [r4, #32]
 8003a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a10:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003a14:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003a18:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003a1a:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8003a1e:	2600      	movs	r6, #0
 8003a20:	42bb      	cmp	r3, r7
 8003a22:	83a6      	strh	r6, [r4, #28]
 8003a24:	d323      	bcc.n	8003a6e <ai_platform_network_init+0x192>
 8003a26:	b37f      	cbz	r7, 8003a88 <ai_platform_network_init+0x1ac>
 8003a28:	46c4      	mov	ip, r8
 8003a2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a2e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a32:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003a36:	46b6      	mov	lr, r6
 8003a38:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003a3c:	e7bb      	b.n	80039b6 <ai_platform_network_init+0xda>
 8003a3e:	464a      	mov	r2, r9
 8003a40:	46ce      	mov	lr, r9
 8003a42:	464d      	mov	r5, r9
 8003a44:	e7d7      	b.n	80039f6 <ai_platform_network_init+0x11a>
 8003a46:	b30f      	cbz	r7, 8003a8c <ai_platform_network_init+0x1b0>
 8003a48:	2701      	movs	r7, #1
 8003a4a:	e7d7      	b.n	80039fc <ai_platform_network_init+0x120>
 8003a4c:	2212      	movs	r2, #18
 8003a4e:	2116      	movs	r1, #22
 8003a50:	f104 0010 	add.w	r0, r4, #16
 8003a54:	f000 fb44 	bl	80040e0 <core_set_error>
 8003a58:	2600      	movs	r6, #0
 8003a5a:	e78c      	b.n	8003976 <ai_platform_network_init+0x9a>
 8003a5c:	f1b9 0f00 	cmp.w	r9, #0
 8003a60:	d0cd      	beq.n	80039fe <ai_platform_network_init+0x122>
 8003a62:	2110      	movs	r1, #16
 8003a64:	2212      	movs	r2, #18
 8003a66:	1860      	adds	r0, r4, r1
 8003a68:	f000 fb3a 	bl	80040e0 <core_set_error>
 8003a6c:	e783      	b.n	8003976 <ai_platform_network_init+0x9a>
 8003a6e:	2213      	movs	r2, #19
 8003a70:	2116      	movs	r1, #22
 8003a72:	f104 0010 	add.w	r0, r4, #16
 8003a76:	f000 fb33 	bl	80040e0 <core_set_error>
 8003a7a:	e77c      	b.n	8003976 <ai_platform_network_init+0x9a>
 8003a7c:	2110      	movs	r1, #16
 8003a7e:	2211      	movs	r2, #17
 8003a80:	1860      	adds	r0, r4, r1
 8003a82:	f000 fb2d 	bl	80040e0 <core_set_error>
 8003a86:	e776      	b.n	8003976 <ai_platform_network_init+0x9a>
 8003a88:	46be      	mov	lr, r7
 8003a8a:	e794      	b.n	80039b6 <ai_platform_network_init+0xda>
 8003a8c:	2110      	movs	r1, #16
 8003a8e:	2213      	movs	r2, #19
 8003a90:	1860      	adds	r0, r4, r1
 8003a92:	f000 fb25 	bl	80040e0 <core_set_error>
 8003a96:	463e      	mov	r6, r7
 8003a98:	e76d      	b.n	8003976 <ai_platform_network_init+0x9a>
 8003a9a:	bf00      	nop
 8003a9c:	a1c00100 	.word	0xa1c00100
 8003aa0:	e0042000 	.word	0xe0042000
 8003aa4:	58024000 	.word	0x58024000
 8003aa8:	f407a5c2 	.word	0xf407a5c2
 8003aac:	b5e8b5cd 	.word	0xb5e8b5cd
 8003ab0:	40023000 	.word	0x40023000
 8003ab4:	a1facade 	.word	0xa1facade

08003ab8 <ai_platform_network_post_init>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	b1f0      	cbz	r0, 8003afa <ai_platform_network_post_init+0x42>
 8003abc:	4b3c      	ldr	r3, [pc, #240]	; (8003bb0 <ai_platform_network_post_init+0xf8>)
 8003abe:	6802      	ldr	r2, [r0, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	d119      	bne.n	8003afa <ai_platform_network_post_init+0x42>
 8003ac6:	f7ff fb4b 	bl	8003160 <_ai_platform_acquire_crc>
 8003aca:	4b3a      	ldr	r3, [pc, #232]	; (8003bb4 <ai_platform_network_post_init+0xfc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad6:	d03b      	beq.n	8003b50 <ai_platform_network_post_init+0x98>
 8003ad8:	4a37      	ldr	r2, [pc, #220]	; (8003bb8 <ai_platform_network_post_init+0x100>)
 8003ada:	2301      	movs	r3, #1
 8003adc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003ae0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1fb      	bne.n	8003ae0 <ai_platform_network_post_init+0x28>
 8003ae8:	4b34      	ldr	r3, [pc, #208]	; (8003bbc <ai_platform_network_post_init+0x104>)
 8003aea:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003aee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003af2:	4b33      	ldr	r3, [pc, #204]	; (8003bc0 <ai_platform_network_post_init+0x108>)
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d037      	beq.n	8003b68 <ai_platform_network_post_init+0xb0>
 8003af8:	e7fe      	b.n	8003af8 <ai_platform_network_post_init+0x40>
 8003afa:	f7ff fb31 	bl	8003160 <_ai_platform_acquire_crc>
 8003afe:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <ai_platform_network_post_init+0xfc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0a:	d010      	beq.n	8003b2e <ai_platform_network_post_init+0x76>
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <ai_platform_network_post_init+0x100>)
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003b14:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1fb      	bne.n	8003b14 <ai_platform_network_post_init+0x5c>
 8003b1c:	4b27      	ldr	r3, [pc, #156]	; (8003bbc <ai_platform_network_post_init+0x104>)
 8003b1e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003b22:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003b26:	4b26      	ldr	r3, [pc, #152]	; (8003bc0 <ai_platform_network_post_init+0x108>)
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d00d      	beq.n	8003b48 <ai_platform_network_post_init+0x90>
 8003b2c:	e7fe      	b.n	8003b2c <ai_platform_network_post_init+0x74>
 8003b2e:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <ai_platform_network_post_init+0x10c>)
 8003b30:	2301      	movs	r3, #1
 8003b32:	6093      	str	r3, [r2, #8]
 8003b34:	6893      	ldr	r3, [r2, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1fc      	bne.n	8003b34 <ai_platform_network_post_init+0x7c>
 8003b3a:	4b20      	ldr	r3, [pc, #128]	; (8003bbc <ai_platform_network_post_init+0x104>)
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	4b1f      	ldr	r3, [pc, #124]	; (8003bc0 <ai_platform_network_post_init+0x108>)
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d000      	beq.n	8003b48 <ai_platform_network_post_init+0x90>
 8003b46:	e7fe      	b.n	8003b46 <ai_platform_network_post_init+0x8e>
 8003b48:	f7ff fb0c 	bl	8003164 <_ai_platform_release_crc>
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	bd38      	pop	{r3, r4, r5, pc}
 8003b50:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <ai_platform_network_post_init+0x10c>)
 8003b52:	2301      	movs	r3, #1
 8003b54:	6093      	str	r3, [r2, #8]
 8003b56:	6893      	ldr	r3, [r2, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1fc      	bne.n	8003b56 <ai_platform_network_post_init+0x9e>
 8003b5c:	4b17      	ldr	r3, [pc, #92]	; (8003bbc <ai_platform_network_post_init+0x104>)
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <ai_platform_network_post_init+0x108>)
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d11a      	bne.n	8003b9e <ai_platform_network_post_init+0xe6>
 8003b68:	f7ff fafc 	bl	8003164 <_ai_platform_release_crc>
 8003b6c:	68e3      	ldr	r3, [r4, #12]
 8003b6e:	f013 0502 	ands.w	r5, r3, #2
 8003b72:	d015      	beq.n	8003ba0 <ai_platform_network_post_init+0xe8>
 8003b74:	4620      	mov	r0, r4
 8003b76:	f000 faf7 	bl	8004168 <ai_layers_post_init_all>
 8003b7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b7c:	b16b      	cbz	r3, 8003b9a <ai_platform_network_post_init+0xe2>
 8003b7e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003b80:	e007      	b.n	8003b92 <ai_platform_network_post_init+0xda>
 8003b82:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8003b86:	4798      	blx	r3
 8003b88:	692b      	ldr	r3, [r5, #16]
 8003b8a:	42ab      	cmp	r3, r5
 8003b8c:	d005      	beq.n	8003b9a <ai_platform_network_post_init+0xe2>
 8003b8e:	b123      	cbz	r3, 8003b9a <ai_platform_network_post_init+0xe2>
 8003b90:	461d      	mov	r5, r3
 8003b92:	4629      	mov	r1, r5
 8003b94:	2000      	movs	r0, #0
 8003b96:	2d00      	cmp	r5, #0
 8003b98:	d1f3      	bne.n	8003b82 <ai_platform_network_post_init+0xca>
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	bd38      	pop	{r3, r4, r5, pc}
 8003b9e:	e7fe      	b.n	8003b9e <ai_platform_network_post_init+0xe6>
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	2111      	movs	r1, #17
 8003ba4:	18a0      	adds	r0, r4, r2
 8003ba6:	f000 fa9b 	bl	80040e0 <core_set_error>
 8003baa:	4628      	mov	r0, r5
 8003bac:	bd38      	pop	{r3, r4, r5, pc}
 8003bae:	bf00      	nop
 8003bb0:	a1c00100 	.word	0xa1c00100
 8003bb4:	e0042000 	.word	0xe0042000
 8003bb8:	58024000 	.word	0x58024000
 8003bbc:	f407a5c2 	.word	0xf407a5c2
 8003bc0:	b5e8b5cd 	.word	0xb5e8b5cd
 8003bc4:	40023000 	.word	0x40023000

08003bc8 <ai_platform_network_process>:
 8003bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bcc:	460e      	mov	r6, r1
 8003bce:	b085      	sub	sp, #20
 8003bd0:	4693      	mov	fp, r2
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	b120      	cbz	r0, 8003be0 <ai_platform_network_process+0x18>
 8003bd6:	4bb8      	ldr	r3, [pc, #736]	; (8003eb8 <ai_platform_network_process+0x2f0>)
 8003bd8:	6802      	ldr	r2, [r0, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	bf18      	it	ne
 8003bde:	2500      	movne	r5, #0
 8003be0:	f7ff fabe 	bl	8003160 <_ai_platform_acquire_crc>
 8003be4:	4bb5      	ldr	r3, [pc, #724]	; (8003ebc <ai_platform_network_process+0x2f4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf0:	d010      	beq.n	8003c14 <ai_platform_network_process+0x4c>
 8003bf2:	4ab3      	ldr	r2, [pc, #716]	; (8003ec0 <ai_platform_network_process+0x2f8>)
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003bfa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1fb      	bne.n	8003bfa <ai_platform_network_process+0x32>
 8003c02:	4bb0      	ldr	r3, [pc, #704]	; (8003ec4 <ai_platform_network_process+0x2fc>)
 8003c04:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003c08:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003c0c:	4bae      	ldr	r3, [pc, #696]	; (8003ec8 <ai_platform_network_process+0x300>)
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d00d      	beq.n	8003c2e <ai_platform_network_process+0x66>
 8003c12:	e7fe      	b.n	8003c12 <ai_platform_network_process+0x4a>
 8003c14:	4aad      	ldr	r2, [pc, #692]	; (8003ecc <ai_platform_network_process+0x304>)
 8003c16:	2301      	movs	r3, #1
 8003c18:	6093      	str	r3, [r2, #8]
 8003c1a:	6893      	ldr	r3, [r2, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1fc      	bne.n	8003c1a <ai_platform_network_process+0x52>
 8003c20:	4ba8      	ldr	r3, [pc, #672]	; (8003ec4 <ai_platform_network_process+0x2fc>)
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	4ba8      	ldr	r3, [pc, #672]	; (8003ec8 <ai_platform_network_process+0x300>)
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	f040 812c 	bne.w	8003e86 <ai_platform_network_process+0x2be>
 8003c2e:	f7ff fa99 	bl	8003164 <_ai_platform_release_crc>
 8003c32:	2d00      	cmp	r5, #0
 8003c34:	f000 8154 	beq.w	8003ee0 <ai_platform_network_process+0x318>
 8003c38:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 8124 	beq.w	8003e88 <ai_platform_network_process+0x2c0>
 8003c40:	68eb      	ldr	r3, [r5, #12]
 8003c42:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2700      	movs	r7, #0
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	616f      	str	r7, [r5, #20]
 8003c50:	f040 813e 	bne.w	8003ed0 <ai_platform_network_process+0x308>
 8003c54:	2e00      	cmp	r6, #0
 8003c56:	f000 811d 	beq.w	8003e94 <ai_platform_network_process+0x2cc>
 8003c5a:	f1ba 0f00 	cmp.w	sl, #0
 8003c5e:	f000 8119 	beq.w	8003e94 <ai_platform_network_process+0x2cc>
 8003c62:	f8ba 3000 	ldrh.w	r3, [sl]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8114 	beq.w	8003e94 <ai_platform_network_process+0x2cc>
 8003c6c:	69b3      	ldr	r3, [r6, #24]
 8003c6e:	f8cd b00c 	str.w	fp, [sp, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8003c78:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d072      	beq.n	8003d66 <ai_platform_network_process+0x19e>
 8003c80:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8003c84:	2c00      	cmp	r4, #0
 8003c86:	d06e      	beq.n	8003d66 <ai_platform_network_process+0x19e>
 8003c88:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003c8c:	f8d3 9000 	ldr.w	r9, [r3]
 8003c90:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8003c94:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003c98:	f000 81de 	beq.w	8004058 <ai_platform_network_process+0x490>
 8003c9c:	69a3      	ldr	r3, [r4, #24]
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	685d      	ldr	r5, [r3, #4]
 8003ca4:	f7ff fa0e 	bl	80030c4 <ai_buffer_get_size>
 8003ca8:	4285      	cmp	r5, r0
 8003caa:	f0c0 811b 	bcc.w	8003ee4 <ai_platform_network_process+0x31c>
 8003cae:	68e0      	ldr	r0, [r4, #12]
 8003cb0:	69b1      	ldr	r1, [r6, #24]
 8003cb2:	68c2      	ldr	r2, [r0, #12]
 8003cb4:	68cb      	ldr	r3, [r1, #12]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	f040 8114 	bne.w	8003ee4 <ai_platform_network_process+0x31c>
 8003cbc:	6882      	ldr	r2, [r0, #8]
 8003cbe:	688b      	ldr	r3, [r1, #8]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	f040 810f 	bne.w	8003ee4 <ai_platform_network_process+0x31c>
 8003cc6:	6842      	ldr	r2, [r0, #4]
 8003cc8:	684b      	ldr	r3, [r1, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	f040 810a 	bne.w	8003ee4 <ai_platform_network_process+0x31c>
 8003cd0:	69a3      	ldr	r3, [r4, #24]
 8003cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cd6:	f002 fcfb 	bl	80066d0 <ai_array_get_data_byte_size>
 8003cda:	4605      	mov	r5, r0
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f002 fd0f 	bl	8006700 <get_tensor_byte_size>
 8003ce2:	4285      	cmp	r5, r0
 8003ce4:	f0c0 80fe 	bcc.w	8003ee4 <ai_platform_network_process+0x31c>
 8003ce8:	69a3      	ldr	r3, [r4, #24]
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	f002 fc5c 	bl	80065a8 <ai_array_to_buffer_fmt>
 8003cf0:	6833      	ldr	r3, [r6, #0]
 8003cf2:	4058      	eors	r0, r3
 8003cf4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003cf8:	f040 81b9 	bne.w	800406e <ai_platform_network_process+0x4a6>
 8003cfc:	6873      	ldr	r3, [r6, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 81ac 	beq.w	800405c <ai_platform_network_process+0x494>
 8003d04:	69b3      	ldr	r3, [r6, #24]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 819c 	beq.w	8004046 <ai_platform_network_process+0x47e>
 8003d0e:	9a01      	ldr	r2, [sp, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	bf38      	it	cc
 8003d14:	461a      	movcc	r2, r3
 8003d16:	4620      	mov	r0, r4
 8003d18:	9201      	str	r2, [sp, #4]
 8003d1a:	f002 fcf1 	bl	8006700 <get_tensor_byte_size>
 8003d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8003d22:	69b3      	ldr	r3, [r6, #24]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	fb00 f303 	mul.w	r3, r0, r3
 8003d2a:	f8c8 300c 	str.w	r3, [r8, #12]
 8003d2e:	6871      	ldr	r1, [r6, #4]
 8003d30:	f8c8 1004 	str.w	r1, [r8, #4]
 8003d34:	440b      	add	r3, r1
 8003d36:	f849 300b 	str.w	r3, [r9, fp]
 8003d3a:	69a0      	ldr	r0, [r4, #24]
 8003d3c:	6803      	ldr	r3, [r0, #0]
 8003d3e:	009a      	lsls	r2, r3, #2
 8003d40:	f107 0701 	add.w	r7, r7, #1
 8003d44:	f106 061c 	add.w	r6, r6, #28
 8003d48:	f100 80af 	bmi.w	8003eaa <ai_platform_network_process+0x2e2>
 8003d4c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	4419      	add	r1, r3
 8003d54:	6081      	str	r1, [r0, #8]
 8003d56:	69a3      	ldr	r3, [r4, #24]
 8003d58:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	f8ba 3000 	ldrh.w	r3, [sl]
 8003d62:	42bb      	cmp	r3, r7
 8003d64:	d888      	bhi.n	8003c78 <ai_platform_network_process+0xb0>
 8003d66:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8003d6a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8003d6c:	f1bb 0f00 	cmp.w	fp, #0
 8003d70:	f000 8186 	beq.w	8004080 <ai_platform_network_process+0x4b8>
 8003d74:	2a01      	cmp	r2, #1
 8003d76:	f240 815e 	bls.w	8004036 <ai_platform_network_process+0x46e>
 8003d7a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8003d7e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8157 	beq.w	8004036 <ai_platform_network_process+0x46e>
 8003d88:	465e      	mov	r6, fp
 8003d8a:	2700      	movs	r7, #0
 8003d8c:	462c      	mov	r4, r5
 8003d8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 80b4 	beq.w	8003f00 <ai_platform_network_process+0x338>
 8003d98:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8003d9c:	2d00      	cmp	r5, #0
 8003d9e:	f000 80af 	beq.w	8003f00 <ai_platform_network_process+0x338>
 8003da2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003da6:	f8d3 8000 	ldr.w	r8, [r3]
 8003daa:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8003dae:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003db2:	f000 8171 	beq.w	8004098 <ai_platform_network_process+0x4d0>
 8003db6:	69ab      	ldr	r3, [r5, #24]
 8003db8:	2101      	movs	r1, #1
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	9302      	str	r3, [sp, #8]
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	f7ff f980 	bl	80030c4 <ai_buffer_get_size>
 8003dc4:	9b02      	ldr	r3, [sp, #8]
 8003dc6:	4283      	cmp	r3, r0
 8003dc8:	f0c0 8134 	bcc.w	8004034 <ai_platform_network_process+0x46c>
 8003dcc:	68e8      	ldr	r0, [r5, #12]
 8003dce:	69b1      	ldr	r1, [r6, #24]
 8003dd0:	68c2      	ldr	r2, [r0, #12]
 8003dd2:	68cb      	ldr	r3, [r1, #12]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	f040 812d 	bne.w	8004034 <ai_platform_network_process+0x46c>
 8003dda:	6882      	ldr	r2, [r0, #8]
 8003ddc:	688b      	ldr	r3, [r1, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	f040 8128 	bne.w	8004034 <ai_platform_network_process+0x46c>
 8003de4:	6842      	ldr	r2, [r0, #4]
 8003de6:	684b      	ldr	r3, [r1, #4]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	f040 8123 	bne.w	8004034 <ai_platform_network_process+0x46c>
 8003dee:	69ab      	ldr	r3, [r5, #24]
 8003df0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003df4:	f002 fc6c 	bl	80066d0 <ai_array_get_data_byte_size>
 8003df8:	9002      	str	r0, [sp, #8]
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f002 fc80 	bl	8006700 <get_tensor_byte_size>
 8003e00:	9b02      	ldr	r3, [sp, #8]
 8003e02:	4283      	cmp	r3, r0
 8003e04:	f0c0 8116 	bcc.w	8004034 <ai_platform_network_process+0x46c>
 8003e08:	69ab      	ldr	r3, [r5, #24]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	f002 fbcc 	bl	80065a8 <ai_array_to_buffer_fmt>
 8003e10:	6833      	ldr	r3, [r6, #0]
 8003e12:	4058      	eors	r0, r3
 8003e14:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003e18:	f040 8136 	bne.w	8004088 <ai_platform_network_process+0x4c0>
 8003e1c:	6873      	ldr	r3, [r6, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 814d 	beq.w	80040be <ai_platform_network_process+0x4f6>
 8003e24:	69b3      	ldr	r3, [r6, #24]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 813f 	beq.w	80040ac <ai_platform_network_process+0x4e4>
 8003e2e:	9a01      	ldr	r2, [sp, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	bf38      	it	cc
 8003e34:	461a      	movcc	r2, r3
 8003e36:	4628      	mov	r0, r5
 8003e38:	9201      	str	r2, [sp, #4]
 8003e3a:	f002 fc61 	bl	8006700 <get_tensor_byte_size>
 8003e3e:	f8ca 0008 	str.w	r0, [sl, #8]
 8003e42:	69b3      	ldr	r3, [r6, #24]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	fb00 f303 	mul.w	r3, r0, r3
 8003e4a:	f8ca 300c 	str.w	r3, [sl, #12]
 8003e4e:	6871      	ldr	r1, [r6, #4]
 8003e50:	f8ca 1004 	str.w	r1, [sl, #4]
 8003e54:	440b      	add	r3, r1
 8003e56:	f848 300b 	str.w	r3, [r8, fp]
 8003e5a:	69a8      	ldr	r0, [r5, #24]
 8003e5c:	6803      	ldr	r3, [r0, #0]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	f107 0701 	add.w	r7, r7, #1
 8003e64:	f106 061c 	add.w	r6, r6, #28
 8003e68:	d445      	bmi.n	8003ef6 <ai_platform_network_process+0x32e>
 8003e6a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	4419      	add	r1, r3
 8003e72:	6081      	str	r1, [r0, #8]
 8003e74:	69ab      	ldr	r3, [r5, #24]
 8003e76:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003e7a:	60da      	str	r2, [r3, #12]
 8003e7c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003e80:	429f      	cmp	r7, r3
 8003e82:	d384      	bcc.n	8003d8e <ai_platform_network_process+0x1c6>
 8003e84:	e03c      	b.n	8003f00 <ai_platform_network_process+0x338>
 8003e86:	e7fe      	b.n	8003e86 <ai_platform_network_process+0x2be>
 8003e88:	68ea      	ldr	r2, [r5, #12]
 8003e8a:	616b      	str	r3, [r5, #20]
 8003e8c:	f002 0203 	and.w	r2, r2, #3
 8003e90:	2a03      	cmp	r2, #3
 8003e92:	d11d      	bne.n	8003ed0 <ai_platform_network_process+0x308>
 8003e94:	2217      	movs	r2, #23
 8003e96:	2112      	movs	r1, #18
 8003e98:	f105 0010 	add.w	r0, r5, #16
 8003e9c:	f000 f920 	bl	80040e0 <core_set_error>
 8003ea0:	2400      	movs	r4, #0
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	b005      	add	sp, #20
 8003ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eaa:	f8ba 3000 	ldrh.w	r3, [sl]
 8003eae:	429f      	cmp	r7, r3
 8003eb0:	f4ff aee2 	bcc.w	8003c78 <ai_platform_network_process+0xb0>
 8003eb4:	e757      	b.n	8003d66 <ai_platform_network_process+0x19e>
 8003eb6:	bf00      	nop
 8003eb8:	a1c00100 	.word	0xa1c00100
 8003ebc:	e0042000 	.word	0xe0042000
 8003ec0:	58024000 	.word	0x58024000
 8003ec4:	f407a5c2 	.word	0xf407a5c2
 8003ec8:	b5e8b5cd 	.word	0xb5e8b5cd
 8003ecc:	40023000 	.word	0x40023000
 8003ed0:	2230      	movs	r2, #48	; 0x30
 8003ed2:	2111      	movs	r1, #17
 8003ed4:	f105 0010 	add.w	r0, r5, #16
 8003ed8:	f000 f902 	bl	80040e0 <core_set_error>
 8003edc:	2400      	movs	r4, #0
 8003ede:	e7e0      	b.n	8003ea2 <ai_platform_network_process+0x2da>
 8003ee0:	462c      	mov	r4, r5
 8003ee2:	e7de      	b.n	8003ea2 <ai_platform_network_process+0x2da>
 8003ee4:	9d02      	ldr	r5, [sp, #8]
 8003ee6:	2218      	movs	r2, #24
 8003ee8:	2112      	movs	r1, #18
 8003eea:	f105 0010 	add.w	r0, r5, #16
 8003eee:	f000 f8f7 	bl	80040e0 <core_set_error>
 8003ef2:	2400      	movs	r4, #0
 8003ef4:	e7d5      	b.n	8003ea2 <ai_platform_network_process+0x2da>
 8003ef6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003efa:	429f      	cmp	r7, r3
 8003efc:	f4ff af47 	bcc.w	8003d8e <ai_platform_network_process+0x1c6>
 8003f00:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003f04:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003f06:	82a3      	strh	r3, [r4, #20]
 8003f08:	4625      	mov	r5, r4
 8003f0a:	2a00      	cmp	r2, #0
 8003f0c:	f040 808c 	bne.w	8004028 <ai_platform_network_process+0x460>
 8003f10:	4616      	mov	r6, r2
 8003f12:	4617      	mov	r7, r2
 8003f14:	8aec      	ldrh	r4, [r5, #22]
 8003f16:	429c      	cmp	r4, r3
 8003f18:	bf38      	it	cc
 8003f1a:	46ab      	movcc	fp, r5
 8003f1c:	d2c1      	bcs.n	8003ea2 <ai_platform_network_process+0x2da>
 8003f1e:	2e00      	cmp	r6, #0
 8003f20:	d030      	beq.n	8003f84 <ai_platform_network_process+0x3bc>
 8003f22:	f04f 0800 	mov.w	r8, #0
 8003f26:	e014      	b.n	8003f52 <ai_platform_network_process+0x38a>
 8003f28:	6882      	ldr	r2, [r0, #8]
 8003f2a:	68c5      	ldr	r5, [r0, #12]
 8003f2c:	6863      	ldr	r3, [r4, #4]
 8003f2e:	1b52      	subs	r2, r2, r5
 8003f30:	4413      	add	r3, r2
 8003f32:	6083      	str	r3, [r0, #8]
 8003f34:	698b      	ldr	r3, [r1, #24]
 8003f36:	6862      	ldr	r2, [r4, #4]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8003f3e:	f859 200a 	ldr.w	r2, [r9, sl]
 8003f42:	440b      	add	r3, r1
 8003f44:	4293      	cmp	r3, r2
 8003f46:	bf24      	itt	cs
 8003f48:	68e3      	ldrcs	r3, [r4, #12]
 8003f4a:	1ad3      	subcs	r3, r2, r3
 8003f4c:	6063      	str	r3, [r4, #4]
 8003f4e:	f108 0801 	add.w	r8, r8, #1
 8003f52:	8833      	ldrh	r3, [r6, #0]
 8003f54:	4543      	cmp	r3, r8
 8003f56:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8003f5a:	d913      	bls.n	8003f84 <ai_platform_network_process+0x3bc>
 8003f5c:	6873      	ldr	r3, [r6, #4]
 8003f5e:	b18b      	cbz	r3, 8003f84 <ai_platform_network_process+0x3bc>
 8003f60:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8003f64:	b171      	cbz	r1, 8003f84 <ai_platform_network_process+0x3bc>
 8003f66:	6988      	ldr	r0, [r1, #24]
 8003f68:	68b2      	ldr	r2, [r6, #8]
 8003f6a:	6803      	ldr	r3, [r0, #0]
 8003f6c:	f8d2 9000 	ldr.w	r9, [r2]
 8003f70:	009d      	lsls	r5, r3, #2
 8003f72:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8003f76:	d5d7      	bpl.n	8003f28 <ai_platform_network_process+0x360>
 8003f78:	6881      	ldr	r1, [r0, #8]
 8003f7a:	68a2      	ldr	r2, [r4, #8]
 8003f7c:	6860      	ldr	r0, [r4, #4]
 8003f7e:	f002 fa8d 	bl	800649c <st_int8_copy>
 8003f82:	e7da      	b.n	8003f3a <ai_platform_network_process+0x372>
 8003f84:	4658      	mov	r0, fp
 8003f86:	f000 f903 	bl	8004190 <ai_layers_forward_all>
 8003f8a:	2f00      	cmp	r7, #0
 8003f8c:	d03d      	beq.n	800400a <ai_platform_network_process+0x442>
 8003f8e:	2400      	movs	r4, #0
 8003f90:	e016      	b.n	8003fc0 <ai_platform_network_process+0x3f8>
 8003f92:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8003f96:	f859 100a 	ldr.w	r1, [r9, sl]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	bf24      	itt	cs
 8003fa0:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8003fa4:	1acb      	subcs	r3, r1, r3
 8003fa6:	f8c8 3004 	str.w	r3, [r8, #4]
 8003faa:	6981      	ldr	r1, [r0, #24]
 8003fac:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8003fb0:	1b52      	subs	r2, r2, r5
 8003fb2:	4413      	add	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
 8003fb6:	6983      	ldr	r3, [r0, #24]
 8003fb8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003fbc:	60da      	str	r2, [r3, #12]
 8003fbe:	3401      	adds	r4, #1
 8003fc0:	883b      	ldrh	r3, [r7, #0]
 8003fc2:	42a3      	cmp	r3, r4
 8003fc4:	d921      	bls.n	800400a <ai_platform_network_process+0x442>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	b1fb      	cbz	r3, 800400a <ai_platform_network_process+0x442>
 8003fca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003fce:	b1e0      	cbz	r0, 800400a <ai_platform_network_process+0x442>
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	6983      	ldr	r3, [r0, #24]
 8003fd4:	f8d2 9000 	ldr.w	r9, [r2]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	0092      	lsls	r2, r2, #2
 8003fdc:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8003fe0:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8003fe4:	d5d5      	bpl.n	8003f92 <ai_platform_network_process+0x3ca>
 8003fe6:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8003fea:	6898      	ldr	r0, [r3, #8]
 8003fec:	f002 fa56 	bl	800649c <st_int8_copy>
 8003ff0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8003ff4:	f859 200a 	ldr.w	r2, [r9, sl]
 8003ff8:	440b      	add	r3, r1
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	bf24      	itt	cs
 8003ffe:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8004002:	1ad3      	subcs	r3, r2, r3
 8004004:	f8c8 3004 	str.w	r3, [r8, #4]
 8004008:	e7d9      	b.n	8003fbe <ai_platform_network_process+0x3f6>
 800400a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800400e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8004012:	3401      	adds	r4, #1
 8004014:	b2a4      	uxth	r4, r4
 8004016:	42a3      	cmp	r3, r4
 8004018:	f8ab 4016 	strh.w	r4, [fp, #22]
 800401c:	f63f af7f 	bhi.w	8003f1e <ai_platform_network_process+0x356>
 8004020:	4620      	mov	r0, r4
 8004022:	b005      	add	sp, #20
 8004024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004028:	2a01      	cmp	r2, #1
 800402a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800402c:	d03c      	beq.n	80040a8 <ai_platform_network_process+0x4e0>
 800402e:	f106 070c 	add.w	r7, r6, #12
 8004032:	e76f      	b.n	8003f14 <ai_platform_network_process+0x34c>
 8004034:	4625      	mov	r5, r4
 8004036:	2218      	movs	r2, #24
 8004038:	2113      	movs	r1, #19
 800403a:	f105 0010 	add.w	r0, r5, #16
 800403e:	f000 f84f 	bl	80040e0 <core_set_error>
 8004042:	2400      	movs	r4, #0
 8004044:	e72d      	b.n	8003ea2 <ai_platform_network_process+0x2da>
 8004046:	9d02      	ldr	r5, [sp, #8]
 8004048:	4604      	mov	r4, r0
 800404a:	2221      	movs	r2, #33	; 0x21
 800404c:	2112      	movs	r1, #18
 800404e:	f105 0010 	add.w	r0, r5, #16
 8004052:	f000 f845 	bl	80040e0 <core_set_error>
 8004056:	e724      	b.n	8003ea2 <ai_platform_network_process+0x2da>
 8004058:	9d02      	ldr	r5, [sp, #8]
 800405a:	e71b      	b.n	8003e94 <ai_platform_network_process+0x2cc>
 800405c:	9d02      	ldr	r5, [sp, #8]
 800405e:	4604      	mov	r4, r0
 8004060:	2217      	movs	r2, #23
 8004062:	2112      	movs	r1, #18
 8004064:	f105 0010 	add.w	r0, r5, #16
 8004068:	f000 f83a 	bl	80040e0 <core_set_error>
 800406c:	e719      	b.n	8003ea2 <ai_platform_network_process+0x2da>
 800406e:	9d02      	ldr	r5, [sp, #8]
 8004070:	2219      	movs	r2, #25
 8004072:	2112      	movs	r1, #18
 8004074:	f105 0010 	add.w	r0, r5, #16
 8004078:	f000 f832 	bl	80040e0 <core_set_error>
 800407c:	2400      	movs	r4, #0
 800407e:	e710      	b.n	8003ea2 <ai_platform_network_process+0x2da>
 8004080:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004084:	82ab      	strh	r3, [r5, #20]
 8004086:	e740      	b.n	8003f0a <ai_platform_network_process+0x342>
 8004088:	f104 0010 	add.w	r0, r4, #16
 800408c:	2219      	movs	r2, #25
 800408e:	2113      	movs	r1, #19
 8004090:	f000 f826 	bl	80040e0 <core_set_error>
 8004094:	2400      	movs	r4, #0
 8004096:	e704      	b.n	8003ea2 <ai_platform_network_process+0x2da>
 8004098:	f104 0010 	add.w	r0, r4, #16
 800409c:	2217      	movs	r2, #23
 800409e:	2113      	movs	r1, #19
 80040a0:	f000 f81e 	bl	80040e0 <core_set_error>
 80040a4:	4654      	mov	r4, sl
 80040a6:	e6fc      	b.n	8003ea2 <ai_platform_network_process+0x2da>
 80040a8:	2700      	movs	r7, #0
 80040aa:	e733      	b.n	8003f14 <ai_platform_network_process+0x34c>
 80040ac:	4625      	mov	r5, r4
 80040ae:	2221      	movs	r2, #33	; 0x21
 80040b0:	4604      	mov	r4, r0
 80040b2:	2113      	movs	r1, #19
 80040b4:	f105 0010 	add.w	r0, r5, #16
 80040b8:	f000 f812 	bl	80040e0 <core_set_error>
 80040bc:	e6f1      	b.n	8003ea2 <ai_platform_network_process+0x2da>
 80040be:	4625      	mov	r5, r4
 80040c0:	2217      	movs	r2, #23
 80040c2:	4604      	mov	r4, r0
 80040c4:	2113      	movs	r1, #19
 80040c6:	f105 0010 	add.w	r0, r5, #16
 80040ca:	f000 f809 	bl	80040e0 <core_set_error>
 80040ce:	e6e8      	b.n	8003ea2 <ai_platform_network_process+0x2da>

080040d0 <core_init>:
 80040d0:	2001      	movs	r0, #1
 80040d2:	4770      	bx	lr

080040d4 <core_get_error>:
 80040d4:	4603      	mov	r3, r0
 80040d6:	2200      	movs	r2, #0
 80040d8:	6800      	ldr	r0, [r0, #0]
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop

080040e0 <core_set_error>:
 80040e0:	4603      	mov	r3, r0
 80040e2:	7800      	ldrb	r0, [r0, #0]
 80040e4:	b108      	cbz	r0, 80040ea <core_set_error+0xa>
 80040e6:	2000      	movs	r0, #0
 80040e8:	4770      	bx	lr
 80040ea:	7019      	strb	r1, [r3, #0]
 80040ec:	6819      	ldr	r1, [r3, #0]
 80040ee:	f362 211f 	bfi	r1, r2, #8, #24
 80040f2:	2001      	movs	r0, #1
 80040f4:	6019      	str	r1, [r3, #0]
 80040f6:	4770      	bx	lr

080040f8 <ai_check_custom_types>:
 80040f8:	b082      	sub	sp, #8
 80040fa:	4b13      	ldr	r3, [pc, #76]	; (8004148 <ai_check_custom_types+0x50>)
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	b118      	cbz	r0, 8004108 <ai_check_custom_types+0x10>
 8004100:	7803      	ldrb	r3, [r0, #0]
 8004102:	2b03      	cmp	r3, #3
 8004104:	d002      	beq.n	800410c <ai_check_custom_types+0x14>
 8004106:	2000      	movs	r0, #0
 8004108:	b002      	add	sp, #8
 800410a:	4770      	bx	lr
 800410c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004110:	4293      	cmp	r3, r2
 8004112:	d004      	beq.n	800411e <ai_check_custom_types+0x26>
 8004114:	2001      	movs	r0, #1
 8004116:	f080 0001 	eor.w	r0, r0, #1
 800411a:	b002      	add	sp, #8
 800411c:	4770      	bx	lr
 800411e:	7842      	ldrb	r2, [r0, #1]
 8004120:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004124:	429a      	cmp	r2, r3
 8004126:	f100 0001 	add.w	r0, r0, #1
 800412a:	d1f3      	bne.n	8004114 <ai_check_custom_types+0x1c>
 800412c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004130:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004134:	429a      	cmp	r2, r3
 8004136:	d1ed      	bne.n	8004114 <ai_check_custom_types+0x1c>
 8004138:	7842      	ldrb	r2, [r0, #1]
 800413a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800413e:	429a      	cmp	r2, r3
 8004140:	d1e8      	bne.n	8004114 <ai_check_custom_types+0x1c>
 8004142:	2000      	movs	r0, #0
 8004144:	e7e7      	b.n	8004116 <ai_check_custom_types+0x1e>
 8004146:	bf00      	nop
 8004148:	84048403 	.word	0x84048403

0800414c <ai_layers_init_all>:
 800414c:	4601      	mov	r1, r0
 800414e:	2000      	movs	r0, #0
 8004150:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004152:	b143      	cbz	r3, 8004166 <ai_layers_init_all+0x1a>
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	60d9      	str	r1, [r3, #12]
 8004158:	429a      	cmp	r2, r3
 800415a:	f100 0001 	add.w	r0, r0, #1
 800415e:	d002      	beq.n	8004166 <ai_layers_init_all+0x1a>
 8004160:	b10a      	cbz	r2, 8004166 <ai_layers_init_all+0x1a>
 8004162:	4613      	mov	r3, r2
 8004164:	e7f5      	b.n	8004152 <ai_layers_init_all+0x6>
 8004166:	4770      	bx	lr

08004168 <ai_layers_post_init_all>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800416c:	2500      	movs	r5, #0
 800416e:	b16c      	cbz	r4, 800418c <ai_layers_post_init_all+0x24>
 8004170:	6863      	ldr	r3, [r4, #4]
 8004172:	07db      	lsls	r3, r3, #31
 8004174:	d504      	bpl.n	8004180 <ai_layers_post_init_all+0x18>
 8004176:	6a23      	ldr	r3, [r4, #32]
 8004178:	4620      	mov	r0, r4
 800417a:	b10b      	cbz	r3, 8004180 <ai_layers_post_init_all+0x18>
 800417c:	4798      	blx	r3
 800417e:	3501      	adds	r5, #1
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	42a3      	cmp	r3, r4
 8004184:	d002      	beq.n	800418c <ai_layers_post_init_all+0x24>
 8004186:	b10b      	cbz	r3, 800418c <ai_layers_post_init_all+0x24>
 8004188:	461c      	mov	r4, r3
 800418a:	e7f0      	b.n	800416e <ai_layers_post_init_all+0x6>
 800418c:	4628      	mov	r0, r5
 800418e:	bd38      	pop	{r3, r4, r5, pc}

08004190 <ai_layers_forward_all>:
 8004190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004194:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8004198:	4604      	mov	r4, r0
 800419a:	f1b8 0f00 	cmp.w	r8, #0
 800419e:	d02b      	beq.n	80041f8 <ai_layers_forward_all+0x68>
 80041a0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80041a2:	6381      	str	r1, [r0, #56]	; 0x38
 80041a4:	b321      	cbz	r1, 80041f0 <ai_layers_forward_all+0x60>
 80041a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80041a8:	2001      	movs	r0, #1
 80041aa:	47c0      	blx	r8
 80041ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80041ae:	b1fe      	cbz	r6, 80041f0 <ai_layers_forward_all+0x60>
 80041b0:	2700      	movs	r7, #0
 80041b2:	4631      	mov	r1, r6
 80041b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80041b6:	2002      	movs	r0, #2
 80041b8:	47c0      	blx	r8
 80041ba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80041bc:	4628      	mov	r0, r5
 80041be:	696b      	ldr	r3, [r5, #20]
 80041c0:	4798      	blx	r3
 80041c2:	692e      	ldr	r6, [r5, #16]
 80041c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80041c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80041c8:	42b5      	cmp	r5, r6
 80041ca:	f04f 0003 	mov.w	r0, #3
 80041ce:	d007      	beq.n	80041e0 <ai_layers_forward_all+0x50>
 80041d0:	47c0      	blx	r8
 80041d2:	3701      	adds	r7, #1
 80041d4:	63a6      	str	r6, [r4, #56]	; 0x38
 80041d6:	2e00      	cmp	r6, #0
 80041d8:	d1eb      	bne.n	80041b2 <ai_layers_forward_all+0x22>
 80041da:	4638      	mov	r0, r7
 80041dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e0:	2003      	movs	r0, #3
 80041e2:	47c0      	blx	r8
 80041e4:	2300      	movs	r3, #0
 80041e6:	3701      	adds	r7, #1
 80041e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80041ea:	4638      	mov	r0, r7
 80041ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041f0:	2700      	movs	r7, #0
 80041f2:	4638      	mov	r0, r7
 80041f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041f8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80041fa:	6385      	str	r5, [r0, #56]	; 0x38
 80041fc:	2d00      	cmp	r5, #0
 80041fe:	d0f7      	beq.n	80041f0 <ai_layers_forward_all+0x60>
 8004200:	4647      	mov	r7, r8
 8004202:	696b      	ldr	r3, [r5, #20]
 8004204:	4628      	mov	r0, r5
 8004206:	4798      	blx	r3
 8004208:	462b      	mov	r3, r5
 800420a:	692d      	ldr	r5, [r5, #16]
 800420c:	429d      	cmp	r5, r3
 800420e:	d004      	beq.n	800421a <ai_layers_forward_all+0x8a>
 8004210:	63a5      	str	r5, [r4, #56]	; 0x38
 8004212:	3701      	adds	r7, #1
 8004214:	2d00      	cmp	r5, #0
 8004216:	d1f4      	bne.n	8004202 <ai_layers_forward_all+0x72>
 8004218:	e7df      	b.n	80041da <ai_layers_forward_all+0x4a>
 800421a:	2300      	movs	r3, #0
 800421c:	63a3      	str	r3, [r4, #56]	; 0x38
 800421e:	3701      	adds	r7, #1
 8004220:	e7db      	b.n	80041da <ai_layers_forward_all+0x4a>
 8004222:	bf00      	nop

08004224 <forward_dense>:
 8004224:	6983      	ldr	r3, [r0, #24]
 8004226:	881a      	ldrh	r2, [r3, #0]
 8004228:	2a00      	cmp	r2, #0
 800422a:	f000 8181 	beq.w	8004530 <forward_dense+0x30c>
 800422e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004232:	ed2d 8b02 	vpush	{d8}
 8004236:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800423a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800423e:	b095      	sub	sp, #84	; 0x54
 8004240:	b105      	cbz	r5, 8004244 <forward_dense+0x20>
 8004242:	682d      	ldr	r5, [r5, #0]
 8004244:	2a01      	cmp	r2, #1
 8004246:	f000 828f 	beq.w	8004768 <forward_dense+0x544>
 800424a:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800424e:	b106      	cbz	r6, 8004252 <forward_dense+0x2e>
 8004250:	6836      	ldr	r6, [r6, #0]
 8004252:	2a02      	cmp	r2, #2
 8004254:	f000 816e 	beq.w	8004534 <forward_dense+0x310>
 8004258:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800425c:	930b      	str	r3, [sp, #44]	; 0x2c
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 8274 	beq.w	800474c <forward_dense+0x528>
 8004264:	4619      	mov	r1, r3
 8004266:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800426a:	6809      	ldr	r1, [r1, #0]
 800426c:	910d      	str	r1, [sp, #52]	; 0x34
 800426e:	2b01      	cmp	r3, #1
 8004270:	f240 826e 	bls.w	8004750 <forward_dense+0x52c>
 8004274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	930b      	str	r3, [sp, #44]	; 0x2c
 800427a:	460b      	mov	r3, r1
 800427c:	68e8      	ldr	r0, [r5, #12]
 800427e:	68f7      	ldr	r7, [r6, #12]
 8004280:	6840      	ldr	r0, [r0, #4]
 8004282:	6999      	ldr	r1, [r3, #24]
 8004284:	9013      	str	r0, [sp, #76]	; 0x4c
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	680b      	ldr	r3, [r1, #0]
 800428a:	9012      	str	r0, [sp, #72]	; 0x48
 800428c:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8004290:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8004294:	fb00 f404 	mul.w	r4, r0, r4
 8004298:	f3c3 5041 	ubfx	r0, r3, #21, #2
 800429c:	fa4e f000 	asr.w	r0, lr, r0
 80042a0:	2a03      	cmp	r2, #3
 80042a2:	9010      	str	r0, [sp, #64]	; 0x40
 80042a4:	f000 825d 	beq.w	8004762 <forward_dense+0x53e>
 80042a8:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80042ac:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80042b0:	2a00      	cmp	r2, #0
 80042b2:	f000 8246 	beq.w	8004742 <forward_dense+0x51e>
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	2a00      	cmp	r2, #0
 80042ba:	f000 8242 	beq.w	8004742 <forward_dense+0x51e>
 80042be:	2b04      	cmp	r3, #4
 80042c0:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80042c4:	f000 822c 	beq.w	8004720 <forward_dense+0x4fc>
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	f000 8229 	beq.w	8004720 <forward_dense+0x4fc>
 80042ce:	f04f 0b00 	mov.w	fp, #0
 80042d2:	69b2      	ldr	r2, [r6, #24]
 80042d4:	69ab      	ldr	r3, [r5, #24]
 80042d6:	6891      	ldr	r1, [r2, #8]
 80042d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	6952      	ldr	r2, [r2, #20]
 80042de:	9106      	str	r1, [sp, #24]
 80042e0:	fb07 f404 	mul.w	r4, r7, r4
 80042e4:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80042e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80042ea:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80042ee:	4281      	cmp	r1, r0
 80042f0:	ea4f 0482 	mov.w	r4, r2, lsl #2
 80042f4:	900e      	str	r0, [sp, #56]	; 0x38
 80042f6:	940c      	str	r4, [sp, #48]	; 0x30
 80042f8:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 80042fc:	f080 8113 	bcs.w	8004526 <forward_dense+0x302>
 8004300:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004302:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8004550 <forward_dense+0x32c>
 8004306:	f021 0201 	bic.w	r2, r1, #1
 800430a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800430e:	9204      	str	r2, [sp, #16]
 8004310:	f001 0201 	and.w	r2, r1, #1
 8004314:	08c8      	lsrs	r0, r1, #3
 8004316:	9208      	str	r2, [sp, #32]
 8004318:	008a      	lsls	r2, r1, #2
 800431a:	f001 0a07 	and.w	sl, r1, #7
 800431e:	920f      	str	r2, [sp, #60]	; 0x3c
 8004320:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8004324:	3320      	adds	r3, #32
 8004326:	465c      	mov	r4, fp
 8004328:	9007      	str	r0, [sp, #28]
 800432a:	46cb      	mov	fp, r9
 800432c:	9205      	str	r2, [sp, #20]
 800432e:	9302      	str	r3, [sp, #8]
 8004330:	46c1      	mov	r9, r8
 8004332:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8004336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	9b02      	ldr	r3, [sp, #8]
 800433e:	3b20      	subs	r3, #32
 8004340:	930a      	str	r3, [sp, #40]	; 0x28
 8004342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004344:	b10b      	cbz	r3, 800434a <forward_dense+0x126>
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2c00      	cmp	r4, #0
 800434c:	f000 81da 	beq.w	8004704 <forward_dense+0x4e0>
 8004350:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004352:	2904      	cmp	r1, #4
 8004354:	9906      	ldr	r1, [sp, #24]
 8004356:	f000 80fd 	beq.w	8004554 <forward_dense+0x330>
 800435a:	4549      	cmp	r1, r9
 800435c:	f080 80d2 	bcs.w	8004504 <forward_dense+0x2e0>
 8004360:	460f      	mov	r7, r1
 8004362:	9907      	ldr	r1, [sp, #28]
 8004364:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004368:	f8dd a014 	ldr.w	sl, [sp, #20]
 800436c:	1c4e      	adds	r6, r1, #1
 800436e:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004372:	4694      	mov	ip, r2
 8004374:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004376:	468e      	mov	lr, r1
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80de 	beq.w	800453a <forward_dense+0x316>
 800437e:	ecf3 2a01 	vldmia	r3!, {s5}
 8004382:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004550 <forward_dense+0x32c>
 8004386:	f1be 0f00 	cmp.w	lr, #0
 800438a:	f000 80de 	beq.w	800454a <forward_dense+0x326>
 800438e:	f10c 0108 	add.w	r1, ip, #8
 8004392:	4640      	mov	r0, r8
 8004394:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8004398:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800439c:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80043a0:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80043a4:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80043a8:	ed10 5a04 	vldr	s10, [r0, #-16]
 80043ac:	ed50 5a03 	vldr	s11, [r0, #-12]
 80043b0:	ed10 6a02 	vldr	s12, [r0, #-8]
 80043b4:	ed50 6a01 	vldr	s13, [r0, #-4]
 80043b8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80043bc:	edd5 7a00 	vldr	s15, [r5]
 80043c0:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 80043c4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80043c8:	ee67 7a83 	vmul.f32	s15, s15, s6
 80043cc:	ed95 3a00 	vldr	s6, [r5]
 80043d0:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 80043d4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80043d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80043dc:	3108      	adds	r1, #8
 80043de:	edd5 3a00 	vldr	s7, [r5]
 80043e2:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80043e6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80043ea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80043ee:	3020      	adds	r0, #32
 80043f0:	ed95 4a00 	vldr	s8, [r5]
 80043f4:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80043f8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80043fc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004400:	edd5 4a00 	vldr	s9, [r5]
 8004404:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8004408:	eee4 7a85 	vfma.f32	s15, s9, s10
 800440c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004410:	ed95 5a00 	vldr	s10, [r5]
 8004414:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8004418:	eee5 7a25 	vfma.f32	s15, s10, s11
 800441c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004420:	edd5 5a00 	vldr	s11, [r5]
 8004424:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8004428:	eee5 7a86 	vfma.f32	s15, s11, s12
 800442c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004430:	428e      	cmp	r6, r1
 8004432:	ed95 6a00 	vldr	s12, [r5]
 8004436:	eee6 7a26 	vfma.f32	s15, s12, s13
 800443a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800443e:	d1a9      	bne.n	8004394 <forward_dense+0x170>
 8004440:	f1a6 0108 	sub.w	r1, r6, #8
 8004444:	4650      	mov	r0, sl
 8004446:	2a00      	cmp	r2, #0
 8004448:	d04a      	beq.n	80044e0 <forward_dense+0x2bc>
 800444a:	780d      	ldrb	r5, [r1, #0]
 800444c:	edd0 6a00 	vldr	s13, [r0]
 8004450:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004454:	edd5 7a00 	vldr	s15, [r5]
 8004458:	2a01      	cmp	r2, #1
 800445a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800445e:	d03f      	beq.n	80044e0 <forward_dense+0x2bc>
 8004460:	784d      	ldrb	r5, [r1, #1]
 8004462:	edd0 6a01 	vldr	s13, [r0, #4]
 8004466:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800446a:	edd5 7a00 	vldr	s15, [r5]
 800446e:	2a02      	cmp	r2, #2
 8004470:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004474:	d034      	beq.n	80044e0 <forward_dense+0x2bc>
 8004476:	788d      	ldrb	r5, [r1, #2]
 8004478:	edd0 6a02 	vldr	s13, [r0, #8]
 800447c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004480:	edd5 7a00 	vldr	s15, [r5]
 8004484:	2a03      	cmp	r2, #3
 8004486:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800448a:	d029      	beq.n	80044e0 <forward_dense+0x2bc>
 800448c:	78cd      	ldrb	r5, [r1, #3]
 800448e:	edd0 6a03 	vldr	s13, [r0, #12]
 8004492:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004496:	edd5 7a00 	vldr	s15, [r5]
 800449a:	2a04      	cmp	r2, #4
 800449c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80044a0:	d01e      	beq.n	80044e0 <forward_dense+0x2bc>
 80044a2:	790d      	ldrb	r5, [r1, #4]
 80044a4:	edd0 6a04 	vldr	s13, [r0, #16]
 80044a8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80044ac:	edd5 7a00 	vldr	s15, [r5]
 80044b0:	2a05      	cmp	r2, #5
 80044b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80044b6:	d013      	beq.n	80044e0 <forward_dense+0x2bc>
 80044b8:	794d      	ldrb	r5, [r1, #5]
 80044ba:	edd0 6a05 	vldr	s13, [r0, #20]
 80044be:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80044c2:	edd5 7a00 	vldr	s15, [r5]
 80044c6:	2a06      	cmp	r2, #6
 80044c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80044cc:	d008      	beq.n	80044e0 <forward_dense+0x2bc>
 80044ce:	7989      	ldrb	r1, [r1, #6]
 80044d0:	edd0 7a06 	vldr	s15, [r0, #24]
 80044d4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80044d8:	edd1 6a00 	vldr	s13, [r1]
 80044dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80044e0:	44dc      	add	ip, fp
 80044e2:	445e      	add	r6, fp
 80044e4:	ee32 7a87 	vadd.f32	s14, s5, s14
 80044e8:	eca7 7a01 	vstmia	r7!, {s14}
 80044ec:	454f      	cmp	r7, r9
 80044ee:	f4ff af43 	bcc.w	8004378 <forward_dense+0x154>
 80044f2:	9a06      	ldr	r2, [sp, #24]
 80044f4:	eba9 0302 	sub.w	r3, r9, r2
 80044f8:	3b01      	subs	r3, #1
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	3304      	adds	r3, #4
 8004500:	18d3      	adds	r3, r2, r3
 8004502:	9306      	str	r3, [sp, #24]
 8004504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004506:	9a05      	ldr	r2, [sp, #20]
 8004508:	4499      	add	r9, r3
 800450a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800450c:	441a      	add	r2, r3
 800450e:	9205      	str	r2, [sp, #20]
 8004510:	9a02      	ldr	r2, [sp, #8]
 8004512:	441a      	add	r2, r3
 8004514:	9202      	str	r2, [sp, #8]
 8004516:	9a04      	ldr	r2, [sp, #16]
 8004518:	441a      	add	r2, r3
 800451a:	9204      	str	r2, [sp, #16]
 800451c:	9b06      	ldr	r3, [sp, #24]
 800451e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004520:	4293      	cmp	r3, r2
 8004522:	f4ff af08 	bcc.w	8004336 <forward_dense+0x112>
 8004526:	b015      	add	sp, #84	; 0x54
 8004528:	ecbd 8b02 	vpop	{d8}
 800452c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004530:	6853      	ldr	r3, [r2, #4]
 8004532:	deff      	udf	#255	; 0xff
 8004534:	2300      	movs	r3, #0
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	deff      	udf	#255	; 0xff
 800453a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004550 <forward_dense+0x32c>
 800453e:	eef0 2a48 	vmov.f32	s5, s16
 8004542:	f1be 0f00 	cmp.w	lr, #0
 8004546:	f47f af22 	bne.w	800438e <forward_dense+0x16a>
 800454a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800454c:	4661      	mov	r1, ip
 800454e:	e77a      	b.n	8004446 <forward_dense+0x222>
 8004550:	00000000 	.word	0x00000000
 8004554:	4549      	cmp	r1, r9
 8004556:	d2d5      	bcs.n	8004504 <forward_dense+0x2e0>
 8004558:	9807      	ldr	r0, [sp, #28]
 800455a:	9103      	str	r1, [sp, #12]
 800455c:	9904      	ldr	r1, [sp, #16]
 800455e:	f100 0c01 	add.w	ip, r0, #1
 8004562:	3901      	subs	r1, #1
 8004564:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8004568:	9109      	str	r1, [sp, #36]	; 0x24
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80b2 	beq.w	80046d4 <forward_dense+0x4b0>
 8004570:	9907      	ldr	r1, [sp, #28]
 8004572:	ecf3 2a01 	vldmia	r3!, {s5}
 8004576:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8004550 <forward_dense+0x32c>
 800457a:	2900      	cmp	r1, #0
 800457c:	f000 80b2 	beq.w	80046e4 <forward_dense+0x4c0>
 8004580:	9902      	ldr	r1, [sp, #8]
 8004582:	1d10      	adds	r0, r2, #4
 8004584:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8004588:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800458c:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8004590:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8004594:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8004598:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 800459c:	ed11 5a04 	vldr	s10, [r1, #-16]
 80045a0:	ed51 5a03 	vldr	s11, [r1, #-12]
 80045a4:	ed11 6a02 	vldr	s12, [r1, #-8]
 80045a8:	ed51 6a01 	vldr	s13, [r1, #-4]
 80045ac:	f006 070f 	and.w	r7, r6, #15
 80045b0:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80045b4:	edd7 7a00 	vldr	s15, [r7]
 80045b8:	0936      	lsrs	r6, r6, #4
 80045ba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80045be:	ed96 3a00 	vldr	s6, [r6]
 80045c2:	ee67 7a82 	vmul.f32	s15, s15, s4
 80045c6:	092e      	lsrs	r6, r5, #4
 80045c8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80045cc:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80045d0:	f005 050f 	and.w	r5, r5, #15
 80045d4:	edd6 3a00 	vldr	s7, [r6]
 80045d8:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 80045dc:	eee3 7a84 	vfma.f32	s15, s7, s8
 80045e0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80045e4:	0937      	lsrs	r7, r6, #4
 80045e6:	ed95 4a00 	vldr	s8, [r5]
 80045ea:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80045ee:	eee4 7a24 	vfma.f32	s15, s8, s9
 80045f2:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80045f6:	f006 060f 	and.w	r6, r6, #15
 80045fa:	edd7 4a00 	vldr	s9, [r7]
 80045fe:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004602:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004606:	3004      	adds	r0, #4
 8004608:	ed96 5a00 	vldr	s10, [r6]
 800460c:	092e      	lsrs	r6, r5, #4
 800460e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004612:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004616:	f005 050f 	and.w	r5, r5, #15
 800461a:	edd6 5a00 	vldr	s11, [r6]
 800461e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004622:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004626:	4584      	cmp	ip, r0
 8004628:	ed95 6a00 	vldr	s12, [r5]
 800462c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004630:	f101 0120 	add.w	r1, r1, #32
 8004634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004638:	d1a4      	bne.n	8004584 <forward_dense+0x360>
 800463a:	f8dd e014 	ldr.w	lr, [sp, #20]
 800463e:	f1ac 0804 	sub.w	r8, ip, #4
 8004642:	9904      	ldr	r1, [sp, #16]
 8004644:	458e      	cmp	lr, r1
 8004646:	d22a      	bcs.n	800469e <forward_dense+0x47a>
 8004648:	9909      	ldr	r1, [sp, #36]	; 0x24
 800464a:	eba1 070e 	sub.w	r7, r1, lr
 800464e:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8004652:	f10e 0008 	add.w	r0, lr, #8
 8004656:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800465a:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800465e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004662:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004666:	ed50 6a02 	vldr	s13, [r0, #-8]
 800466a:	f001 050f 	and.w	r5, r1, #15
 800466e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004672:	edd5 7a00 	vldr	s15, [r5]
 8004676:	0909      	lsrs	r1, r1, #4
 8004678:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800467c:	ed91 6a00 	vldr	s12, [r1]
 8004680:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004684:	42b7      	cmp	r7, r6
 8004686:	eee6 7a26 	vfma.f32	s15, s12, s13
 800468a:	f100 0008 	add.w	r0, r0, #8
 800468e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004692:	d1e4      	bne.n	800465e <forward_dense+0x43a>
 8004694:	f10a 0a01 	add.w	sl, sl, #1
 8004698:	44d0      	add	r8, sl
 800469a:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800469e:	9908      	ldr	r1, [sp, #32]
 80046a0:	b321      	cbz	r1, 80046ec <forward_dense+0x4c8>
 80046a2:	f898 1000 	ldrb.w	r1, [r8]
 80046a6:	edde 7a00 	vldr	s15, [lr]
 80046aa:	0909      	lsrs	r1, r1, #4
 80046ac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80046b0:	edd1 6a00 	vldr	s13, [r1]
 80046b4:	9903      	ldr	r1, [sp, #12]
 80046b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80046ba:	445a      	add	r2, fp
 80046bc:	44dc      	add	ip, fp
 80046be:	ee72 2a87 	vadd.f32	s5, s5, s14
 80046c2:	ece1 2a01 	vstmia	r1!, {s5}
 80046c6:	4589      	cmp	r9, r1
 80046c8:	9103      	str	r1, [sp, #12]
 80046ca:	f67f af12 	bls.w	80044f2 <forward_dense+0x2ce>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f47f af4e 	bne.w	8004570 <forward_dense+0x34c>
 80046d4:	9907      	ldr	r1, [sp, #28]
 80046d6:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8004550 <forward_dense+0x32c>
 80046da:	eef0 2a48 	vmov.f32	s5, s16
 80046de:	2900      	cmp	r1, #0
 80046e0:	f47f af4e 	bne.w	8004580 <forward_dense+0x35c>
 80046e4:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80046e8:	4690      	mov	r8, r2
 80046ea:	e7aa      	b.n	8004642 <forward_dense+0x41e>
 80046ec:	9903      	ldr	r1, [sp, #12]
 80046ee:	ee32 7a87 	vadd.f32	s14, s5, s14
 80046f2:	445a      	add	r2, fp
 80046f4:	eca1 7a01 	vstmia	r1!, {s14}
 80046f8:	4549      	cmp	r1, r9
 80046fa:	9103      	str	r1, [sp, #12]
 80046fc:	44dc      	add	ip, fp
 80046fe:	f4ff af34 	bcc.w	800456a <forward_dense+0x346>
 8004702:	e6f6      	b.n	80044f2 <forward_dense+0x2ce>
 8004704:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004706:	9d06      	ldr	r5, [sp, #24]
 8004708:	9101      	str	r1, [sp, #4]
 800470a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800470c:	9100      	str	r1, [sp, #0]
 800470e:	4628      	mov	r0, r5
 8004710:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004712:	f001 fd43 	bl	800619c <forward_lite_dense_if32of32wf32>
 8004716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004718:	462b      	mov	r3, r5
 800471a:	4413      	add	r3, r2
 800471c:	9306      	str	r3, [sp, #24]
 800471e:	e6f1      	b.n	8004504 <forward_dense+0x2e0>
 8004720:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8004724:	f1b9 0f00 	cmp.w	r9, #0
 8004728:	d016      	beq.n	8004758 <forward_dense+0x534>
 800472a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800472e:	f001 ffa7 	bl	8006680 <ai_array_get_byte_size>
 8004732:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8004736:	4602      	mov	r2, r0
 8004738:	4659      	mov	r1, fp
 800473a:	4640      	mov	r0, r8
 800473c:	f001 feae 	bl	800649c <st_int8_copy>
 8004740:	e5c7      	b.n	80042d2 <forward_dense+0xae>
 8004742:	2b04      	cmp	r3, #4
 8004744:	d00a      	beq.n	800475c <forward_dense+0x538>
 8004746:	f04f 0900 	mov.w	r9, #0
 800474a:	e5bd      	b.n	80042c8 <forward_dense+0xa4>
 800474c:	930d      	str	r3, [sp, #52]	; 0x34
 800474e:	e595      	b.n	800427c <forward_dense+0x58>
 8004750:	2300      	movs	r3, #0
 8004752:	930b      	str	r3, [sp, #44]	; 0x2c
 8004754:	460b      	mov	r3, r1
 8004756:	e591      	b.n	800427c <forward_dense+0x58>
 8004758:	46c3      	mov	fp, r8
 800475a:	e5ba      	b.n	80042d2 <forward_dense+0xae>
 800475c:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8004760:	e5b7      	b.n	80042d2 <forward_dense+0xae>
 8004762:	2300      	movs	r3, #0
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	deff      	udf	#255	; 0xff
 8004768:	2300      	movs	r3, #0
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	deff      	udf	#255	; 0xff
 800476e:	bf00      	nop

08004770 <nl_func_sigmoid_array_f32>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	ed2d 8b02 	vpush	{d8}
 8004776:	698f      	ldr	r7, [r1, #24]
 8004778:	6980      	ldr	r0, [r0, #24]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	6886      	ldr	r6, [r0, #8]
 800477e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004782:	3a01      	subs	r2, #1
 8004784:	0093      	lsls	r3, r2, #2
 8004786:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800478a:	4291      	cmp	r1, r2
 800478c:	d815      	bhi.n	80047ba <nl_func_sigmoid_array_f32+0x4a>
 800478e:	3304      	adds	r3, #4
 8004790:	1d14      	adds	r4, r2, #4
 8004792:	441e      	add	r6, r3
 8004794:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004798:	4625      	mov	r5, r4
 800479a:	ed34 0a01 	vldmdb	r4!, {s0}
 800479e:	eeb1 0a40 	vneg.f32	s0, s0
 80047a2:	f002 fefd 	bl	80075a0 <expf>
 80047a6:	ee30 0a08 	vadd.f32	s0, s0, s16
 80047aa:	3d08      	subs	r5, #8
 80047ac:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80047b0:	ed66 7a01 	vstmdb	r6!, {s15}
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	42ab      	cmp	r3, r5
 80047b8:	d9ee      	bls.n	8004798 <nl_func_sigmoid_array_f32+0x28>
 80047ba:	ecbd 8b02 	vpop	{d8}
 80047be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047c0 <nl_func_tanh_array_f32>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	698f      	ldr	r7, [r1, #24]
 80047c4:	6980      	ldr	r0, [r0, #24]
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	6886      	ldr	r6, [r0, #8]
 80047ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80047ce:	3a01      	subs	r2, #1
 80047d0:	0093      	lsls	r3, r2, #2
 80047d2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80047d6:	4291      	cmp	r1, r2
 80047d8:	d80d      	bhi.n	80047f6 <nl_func_tanh_array_f32+0x36>
 80047da:	3304      	adds	r3, #4
 80047dc:	1d14      	adds	r4, r2, #4
 80047de:	441e      	add	r6, r3
 80047e0:	4625      	mov	r5, r4
 80047e2:	ed34 0a01 	vldmdb	r4!, {s0}
 80047e6:	f002 ff19 	bl	800761c <tanhf>
 80047ea:	ed26 0a01 	vstmdb	r6!, {s0}
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3d08      	subs	r5, #8
 80047f2:	42ab      	cmp	r3, r5
 80047f4:	d9f4      	bls.n	80047e0 <nl_func_tanh_array_f32+0x20>
 80047f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047f8 <forward_sm>:
 80047f8:	6982      	ldr	r2, [r0, #24]
 80047fa:	8813      	ldrh	r3, [r2, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d07c      	beq.n	80048fa <forward_sm+0x102>
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	ed2d 8b04 	vpush	{d8-d9}
 8004808:	6852      	ldr	r2, [r2, #4]
 800480a:	6854      	ldr	r4, [r2, #4]
 800480c:	b085      	sub	sp, #20
 800480e:	b104      	cbz	r4, 8004812 <forward_sm+0x1a>
 8004810:	6824      	ldr	r4, [r4, #0]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d076      	beq.n	8004904 <forward_sm+0x10c>
 8004816:	6913      	ldr	r3, [r2, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d076      	beq.n	800490a <forward_sm+0x112>
 800481c:	681e      	ldr	r6, [r3, #0]
 800481e:	68a3      	ldr	r3, [r4, #8]
 8004820:	68e0      	ldr	r0, [r4, #12]
 8004822:	68f2      	ldr	r2, [r6, #12]
 8004824:	6845      	ldr	r5, [r0, #4]
 8004826:	6857      	ldr	r7, [r2, #4]
 8004828:	0a1b      	lsrs	r3, r3, #8
 800482a:	d068      	beq.n	80048fe <forward_sm+0x106>
 800482c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004830:	2201      	movs	r2, #1
 8004832:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004836:	4298      	cmp	r0, r3
 8004838:	fb01 f202 	mul.w	r2, r1, r2
 800483c:	d1f9      	bne.n	8004832 <forward_sm+0x3a>
 800483e:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8004842:	69a2      	ldr	r2, [r4, #24]
 8004844:	69b3      	ldr	r3, [r6, #24]
 8004846:	6892      	ldr	r2, [r2, #8]
 8004848:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800484c:	eb02 0309 	add.w	r3, r2, r9
 8004850:	429a      	cmp	r2, r3
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	d24c      	bcs.n	80048f0 <forward_sm+0xf8>
 8004856:	00bb      	lsls	r3, r7, #2
 8004858:	9303      	str	r3, [sp, #12]
 800485a:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800485e:	00ab      	lsls	r3, r5, #2
 8004860:	2d01      	cmp	r5, #1
 8004862:	ed92 8a00 	vldr	s16, [r2]
 8004866:	9302      	str	r3, [sp, #8]
 8004868:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800486c:	463e      	mov	r6, r7
 800486e:	d93c      	bls.n	80048ea <forward_sm+0xf2>
 8004870:	1d13      	adds	r3, r2, #4
 8004872:	ecf3 7a01 	vldmia	r3!, {s15}
 8004876:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487e:	bfb8      	it	lt
 8004880:	eeb0 8a67 	vmovlt.f32	s16, s15
 8004884:	429e      	cmp	r6, r3
 8004886:	d1f4      	bne.n	8004872 <forward_sm+0x7a>
 8004888:	eddf 8a21 	vldr	s17, [pc, #132]	; 8004910 <forward_sm+0x118>
 800488c:	4692      	mov	sl, r2
 800488e:	46c3      	mov	fp, r8
 8004890:	46c1      	mov	r9, r8
 8004892:	2400      	movs	r4, #0
 8004894:	ecba 0a01 	vldmia	sl!, {s0}
 8004898:	ee30 0a48 	vsub.f32	s0, s0, s16
 800489c:	f002 fe80 	bl	80075a0 <expf>
 80048a0:	3401      	adds	r4, #1
 80048a2:	42a5      	cmp	r5, r4
 80048a4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80048a8:	eca9 0a01 	vstmia	r9!, {s0}
 80048ac:	d8f2      	bhi.n	8004894 <forward_sm+0x9c>
 80048ae:	eef5 8a40 	vcmp.f32	s17, #0.0
 80048b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b6:	d00b      	beq.n	80048d0 <forward_sm+0xd8>
 80048b8:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80048bc:	2300      	movs	r3, #0
 80048be:	3301      	adds	r3, #1
 80048c0:	429d      	cmp	r5, r3
 80048c2:	eddb 7a00 	vldr	s15, [fp]
 80048c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ca:	eceb 7a01 	vstmia	fp!, {s15}
 80048ce:	d8f6      	bhi.n	80048be <forward_sm+0xc6>
 80048d0:	9b03      	ldr	r3, [sp, #12]
 80048d2:	9901      	ldr	r1, [sp, #4]
 80048d4:	4498      	add	r8, r3
 80048d6:	9b02      	ldr	r3, [sp, #8]
 80048d8:	42b9      	cmp	r1, r7
 80048da:	463a      	mov	r2, r7
 80048dc:	441e      	add	r6, r3
 80048de:	d907      	bls.n	80048f0 <forward_sm+0xf8>
 80048e0:	2d01      	cmp	r5, #1
 80048e2:	ed92 8a00 	vldr	s16, [r2]
 80048e6:	441f      	add	r7, r3
 80048e8:	d8c2      	bhi.n	8004870 <forward_sm+0x78>
 80048ea:	2d00      	cmp	r5, #0
 80048ec:	d0f0      	beq.n	80048d0 <forward_sm+0xd8>
 80048ee:	e7cb      	b.n	8004888 <forward_sm+0x90>
 80048f0:	b005      	add	sp, #20
 80048f2:	ecbd 8b04 	vpop	{d8-d9}
 80048f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	deff      	udf	#255	; 0xff
 80048fe:	f04f 0904 	mov.w	r9, #4
 8004902:	e79e      	b.n	8004842 <forward_sm+0x4a>
 8004904:	2300      	movs	r3, #0
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	deff      	udf	#255	; 0xff
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	deff      	udf	#255	; 0xff
 800490e:	bf00      	nop
 8004910:	00000000 	.word	0x00000000

08004914 <array_f32_identity>:
 8004914:	6980      	ldr	r0, [r0, #24]
 8004916:	698b      	ldr	r3, [r1, #24]
 8004918:	4298      	cmp	r0, r3
 800491a:	d004      	beq.n	8004926 <array_f32_identity+0x12>
 800491c:	68c1      	ldr	r1, [r0, #12]
 800491e:	68d8      	ldr	r0, [r3, #12]
 8004920:	0092      	lsls	r2, r2, #2
 8004922:	f001 bdbb 	b.w	800649c <st_int8_copy>
 8004926:	4770      	bx	lr

08004928 <forward_lstm>:
 8004928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492c:	ed2d 8b06 	vpush	{d8-d10}
 8004930:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8004934:	6983      	ldr	r3, [r0, #24]
 8004936:	af00      	add	r7, sp, #0
 8004938:	881a      	ldrh	r2, [r3, #0]
 800493a:	60b8      	str	r0, [r7, #8]
 800493c:	2a00      	cmp	r2, #0
 800493e:	f001 842a 	beq.w	8006196 <forward_lstm+0x186e>
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004948:	2a01      	cmp	r2, #1
 800494a:	f001 8424 	beq.w	8006196 <forward_lstm+0x186e>
 800494e:	2a02      	cmp	r2, #2
 8004950:	f001 8421 	beq.w	8006196 <forward_lstm+0x186e>
 8004954:	69d8      	ldr	r0, [r3, #28]
 8004956:	2800      	cmp	r0, #0
 8004958:	f001 8414 	beq.w	8006184 <forward_lstm+0x185c>
 800495c:	8b1b      	ldrh	r3, [r3, #24]
 800495e:	6801      	ldr	r1, [r0, #0]
 8004960:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8004964:	2b01      	cmp	r3, #1
 8004966:	6883      	ldr	r3, [r0, #8]
 8004968:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800496c:	bf88      	it	hi
 800496e:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8004972:	68c3      	ldr	r3, [r0, #12]
 8004974:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004978:	bf98      	it	ls
 800497a:	f04f 0b00 	movls.w	fp, #0
 800497e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004986:	b10b      	cbz	r3, 800498c <forward_lstm+0x64>
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800498c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004990:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004992:	899b      	ldrh	r3, [r3, #12]
 8004994:	68cd      	ldr	r5, [r1, #12]
 8004996:	0099      	lsls	r1, r3, #2
 8004998:	3107      	adds	r1, #7
 800499a:	08c9      	lsrs	r1, r1, #3
 800499c:	466c      	mov	r4, sp
 800499e:	eba4 04c1 	sub.w	r4, r4, r1, lsl #3
 80049a2:	46a5      	mov	sp, r4
 80049a4:	1ddc      	adds	r4, r3, #7
 80049a6:	466e      	mov	r6, sp
 80049a8:	08e4      	lsrs	r4, r4, #3
 80049aa:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80049ae:	46a5      	mov	sp, r4
 80049b0:	68bc      	ldr	r4, [r7, #8]
 80049b2:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80049b6:	466c      	mov	r4, sp
 80049b8:	eba4 0cc1 	sub.w	ip, r4, r1, lsl #3
 80049bc:	46e5      	mov	sp, ip
 80049be:	ebac 01c1 	sub.w	r1, ip, r1, lsl #3
 80049c2:	f8c7 d010 	str.w	sp, [r7, #16]
 80049c6:	468d      	mov	sp, r1
 80049c8:	68e9      	ldr	r1, [r5, #12]
 80049ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80049cc:	6869      	ldr	r1, [r5, #4]
 80049ce:	6779      	str	r1, [r7, #116]	; 0x74
 80049d0:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80049d4:	ee09 1a10 	vmov	s18, r1
 80049d8:	46ee      	mov	lr, sp
 80049da:	2800      	cmp	r0, #0
 80049dc:	f001 83c9 	beq.w	8006172 <forward_lstm+0x184a>
 80049e0:	6945      	ldr	r5, [r0, #20]
 80049e2:	6901      	ldr	r1, [r0, #16]
 80049e4:	ee09 5a90 	vmov	s19, r5
 80049e8:	6985      	ldr	r5, [r0, #24]
 80049ea:	ee0a 1a90 	vmov	s21, r1
 80049ee:	e9d0 9007 	ldrd	r9, r0, [r0, #28]
 80049f2:	ee0a 5a10 	vmov	s20, r5
 80049f6:	b119      	cbz	r1, 8004a00 <forward_lstm+0xd8>
 80049f8:	6989      	ldr	r1, [r1, #24]
 80049fa:	6889      	ldr	r1, [r1, #8]
 80049fc:	ee0a 1a90 	vmov	s21, r1
 8004a00:	ee19 1a90 	vmov	r1, s19
 8004a04:	b119      	cbz	r1, 8004a0e <forward_lstm+0xe6>
 8004a06:	6989      	ldr	r1, [r1, #24]
 8004a08:	6889      	ldr	r1, [r1, #8]
 8004a0a:	ee09 1a90 	vmov	s19, r1
 8004a0e:	ee1a 1a10 	vmov	r1, s20
 8004a12:	b119      	cbz	r1, 8004a1c <forward_lstm+0xf4>
 8004a14:	6989      	ldr	r1, [r1, #24]
 8004a16:	6889      	ldr	r1, [r1, #8]
 8004a18:	ee0a 1a10 	vmov	s20, r1
 8004a1c:	f1b9 0f00 	cmp.w	r9, #0
 8004a20:	d003      	beq.n	8004a2a <forward_lstm+0x102>
 8004a22:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8004a26:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8004a2a:	b108      	cbz	r0, 8004a30 <forward_lstm+0x108>
 8004a2c:	6981      	ldr	r1, [r0, #24]
 8004a2e:	6888      	ldr	r0, [r1, #8]
 8004a30:	2a03      	cmp	r2, #3
 8004a32:	f001 83b0 	beq.w	8006196 <forward_lstm+0x186e>
 8004a36:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004a3a:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 8004a3e:	f1ba 0f00 	cmp.w	sl, #0
 8004a42:	d001      	beq.n	8004a48 <forward_lstm+0x120>
 8004a44:	f8da a000 	ldr.w	sl, [sl]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	f8c7 90fc 	str.w	r9, [r7, #252]	; 0xfc
 8004a4e:	4423      	add	r3, r4
 8004a50:	4621      	mov	r1, r4
 8004a52:	f1ae 0404 	sub.w	r4, lr, #4
 8004a56:	f8d7 c090 	ldr.w	ip, [r7, #144]	; 0x90
 8004a5a:	60fc      	str	r4, [r7, #12]
 8004a5c:	3e04      	subs	r6, #4
 8004a5e:	f1ce 0e04 	rsb	lr, lr, #4
 8004a62:	1f15      	subs	r5, r2, #4
 8004a64:	4699      	mov	r9, r3
 8004a66:	e016      	b.n	8004a96 <forward_lstm+0x16e>
 8004a68:	4423      	add	r3, r4
 8004a6a:	f853 200e 	ldr.w	r2, [r3, lr]
 8004a6e:	b1c2      	cbz	r2, 8004aa2 <forward_lstm+0x17a>
 8004a70:	68d3      	ldr	r3, [r2, #12]
 8004a72:	f846 2f04 	str.w	r2, [r6, #4]!
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	6992      	ldr	r2, [r2, #24]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	6893      	ldr	r3, [r2, #8]
 8004a7e:	f845 3f04 	str.w	r3, [r5, #4]!
 8004a82:	bf8c      	ite	hi
 8004a84:	2301      	movhi	r3, #1
 8004a86:	2300      	movls	r3, #0
 8004a88:	f801 3b01 	strb.w	r3, [r1], #1
 8004a8c:	bf8c      	ite	hi
 8004a8e:	4643      	movhi	r3, r8
 8004a90:	2300      	movls	r3, #0
 8004a92:	f844 3f04 	str.w	r3, [r4, #4]!
 8004a96:	4549      	cmp	r1, r9
 8004a98:	d003      	beq.n	8004aa2 <forward_lstm+0x17a>
 8004a9a:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e2      	bne.n	8004a68 <forward_lstm+0x140>
 8004aa2:	f8da 3018 	ldr.w	r3, [sl, #24]
 8004aa6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004aaa:	689d      	ldr	r5, [r3, #8]
 8004aac:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8004ab0:	f8db 3018 	ldr.w	r3, [fp, #24]
 8004ab4:	6989      	ldr	r1, [r1, #24]
 8004ab6:	69a4      	ldr	r4, [r4, #24]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	667b      	str	r3, [r7, #100]	; 0x64
 8004abc:	688b      	ldr	r3, [r1, #8]
 8004abe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ac4:	68a3      	ldr	r3, [r4, #8]
 8004ac6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6992      	ldr	r2, [r2, #24]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	6892      	ldr	r2, [r2, #8]
 8004ad0:	66ba      	str	r2, [r7, #104]	; 0x68
 8004ad2:	ee19 1a10 	vmov	r1, s18
 8004ad6:	eb05 0441 	add.w	r4, r5, r1, lsl #1
 8004ada:	186a      	adds	r2, r5, r1
 8004adc:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8004ae0:	4421      	add	r1, r4
 8004ae2:	f8d7 90fc 	ldr.w	r9, [r7, #252]	; 0xfc
 8004ae6:	673d      	str	r5, [r7, #112]	; 0x70
 8004ae8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8004aec:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8004af0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004af4:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004af8:	607b      	str	r3, [r7, #4]
 8004afa:	f041 8264 	bne.w	8005fc6 <forward_lstm+0x169e>
 8004afe:	4629      	mov	r1, r5
 8004b00:	2800      	cmp	r0, #0
 8004b02:	f001 826e 	beq.w	8005fe2 <forward_lstm+0x16ba>
 8004b06:	ee19 2a10 	vmov	r2, s18
 8004b0a:	f001 fcc7 	bl	800649c <st_int8_copy>
 8004b0e:	ee19 2a10 	vmov	r2, s18
 8004b12:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8004b16:	4648      	mov	r0, r9
 8004b18:	f1b9 0f00 	cmp.w	r9, #0
 8004b1c:	f001 826f 	beq.w	8005ffe <forward_lstm+0x16d6>
 8004b20:	f001 fcbc 	bl	800649c <st_int8_copy>
 8004b24:	ee19 2a10 	vmov	r2, s18
 8004b28:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	f001 fc59 	bl	80063e4 <st_int8_fill>
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	4bab      	ldr	r3, [pc, #684]	; (8004de4 <forward_lstm+0x4bc>)
 8004b36:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004b38:	edd2 8a10 	vldr	s17, [r2, #64]	; 0x40
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	bf08      	it	eq
 8004b40:	4619      	moveq	r1, r3
 8004b42:	6479      	str	r1, [r7, #68]	; 0x44
 8004b44:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004b46:	2900      	cmp	r1, #0
 8004b48:	bf08      	it	eq
 8004b4a:	4619      	moveq	r1, r3
 8004b4c:	67f9      	str	r1, [r7, #124]	; 0x7c
 8004b4e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004b50:	2900      	cmp	r1, #0
 8004b52:	bf08      	it	eq
 8004b54:	4619      	moveq	r1, r3
 8004b56:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8004b5a:	6439      	str	r1, [r7, #64]	; 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f001 8301 	beq.w	8006164 <forward_lstm+0x183c>
 8004b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b64:	3b01      	subs	r3, #1
 8004b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b70:	4613      	mov	r3, r2
 8004b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b76:	b1b3      	cbz	r3, 8004ba6 <forward_lstm+0x27e>
 8004b78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b7c:	899d      	ldrh	r5, [r3, #12]
 8004b7e:	b195      	cbz	r5, 8004ba6 <forward_lstm+0x27e>
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8004b8a:	1e5e      	subs	r6, r3, #1
 8004b8c:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8004b90:	6811      	ldr	r1, [r2, #0]
 8004b92:	fb03 f406 	mul.w	r4, r3, r6
 8004b96:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004b9a:	f842 1b04 	str.w	r1, [r2], #4
 8004b9e:	425b      	negs	r3, r3
 8004ba0:	4295      	cmp	r5, r2
 8004ba2:	6003      	str	r3, [r0, #0]
 8004ba4:	d1f2      	bne.n	8004b8c <forward_lstm+0x264>
 8004ba6:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8004ba8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8004baa:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004bae:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 8004dec <forward_lstm+0x4c4>
 8004bb2:	b2a9      	uxth	r1, r5
 8004bb4:	fa1f f288 	uxth.w	r2, r8
 8004bb8:	f1a1 0310 	sub.w	r3, r1, #16
 8004bbc:	0096      	lsls	r6, r2, #2
 8004bbe:	091b      	lsrs	r3, r3, #4
 8004bc0:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	fb06 f101 	mul.w	r1, r6, r1
 8004bca:	eb04 0c41 	add.w	ip, r4, r1, lsl #1
 8004bce:	019b      	lsls	r3, r3, #6
 8004bd0:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8004bd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bda:	f1a2 0310 	sub.w	r3, r2, #16
 8004bde:	fb02 f202 	mul.w	r2, r2, r2
 8004be2:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 8004be6:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
 8004bea:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8004bec:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 8004bf0:	091b      	lsrs	r3, r3, #4
 8004bf2:	eb04 0c46 	add.w	ip, r4, r6, lsl #1
 8004bf6:	1c5c      	adds	r4, r3, #1
 8004bf8:	019b      	lsls	r3, r3, #6
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	01a3      	lsls	r3, r4, #6
 8004bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004c02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c04:	f8c7 60b0 	str.w	r6, [r7, #176]	; 0xb0
 8004c08:	440b      	add	r3, r1
 8004c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c0e:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8004c12:	f8c7 c04c 	str.w	ip, [r7, #76]	; 0x4c
 8004c16:	440b      	add	r3, r1
 8004c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c1c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004c20:	637b      	str	r3, [r7, #52]	; 0x34
 8004c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c2c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004c30:	4633      	mov	r3, r6
 8004c32:	1996      	adds	r6, r2, r6
 8004c34:	62fe      	str	r6, [r7, #44]	; 0x2c
 8004c36:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 8004c38:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8004c3c:	441e      	add	r6, r3
 8004c3e:	62be      	str	r6, [r7, #40]	; 0x28
 8004c40:	18e6      	adds	r6, r4, r3
 8004c42:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8004c44:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 8004c48:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 8004c4c:	ea04 0600 	and.w	r6, r4, r0
 8004c50:	f8c7 60f4 	str.w	r6, [r7, #244]	; 0xf4
 8004c54:	ea08 0600 	and.w	r6, r8, r0
 8004c58:	f8c7 60f8 	str.w	r6, [r7, #248]	; 0xf8
 8004c5c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004c60:	0089      	lsls	r1, r1, #2
 8004c62:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8004c66:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004c68:	00ad      	lsls	r5, r5, #2
 8004c6a:	fb05 f101 	mul.w	r1, r5, r1
 8004c6e:	61b9      	str	r1, [r7, #24]
 8004c70:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8004c74:	fb05 f501 	mul.w	r5, r5, r1
 8004c78:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
 8004c7c:	4661      	mov	r1, ip
 8004c7e:	eb02 0543 	add.w	r5, r2, r3, lsl #1
 8004c82:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004c86:	61fd      	str	r5, [r7, #28]
 8004c88:	4419      	add	r1, r3
 8004c8a:	6279      	str	r1, [r7, #36]	; 0x24
 8004c8c:	18d1      	adds	r1, r2, r3
 8004c8e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8004c92:	f008 060f 	and.w	r6, r8, #15
 8004c96:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ca0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ca2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8004ca6:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8004caa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8004cae:	4413      	add	r3, r2
 8004cb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004cb4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cb8:	4b4b      	ldr	r3, [pc, #300]	; (8004de8 <forward_lstm+0x4c0>)
 8004cba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cbe:	e9c7 3244 	strd	r3, r2, [r7, #272]	; 0x110
 8004cc2:	e9c7 3248 	strd	r3, r2, [r7, #288]	; 0x120
 8004cc6:	e9c7 324c 	strd	r3, r2, [r7, #304]	; 0x130
 8004cca:	e9c7 3250 	strd	r3, r2, [r7, #320]	; 0x140
 8004cce:	e9c7 3254 	strd	r3, r2, [r7, #336]	; 0x150
 8004cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8004ce0:	4403      	add	r3, r0
 8004ce2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ce6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cee:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8004cf2:	e9c7 4446 	strd	r4, r4, [r7, #280]	; 0x118
 8004cf6:	e9c7 334a 	strd	r3, r3, [r7, #296]	; 0x128
 8004cfa:	e9c7 004e 	strd	r0, r0, [r7, #312]	; 0x138
 8004cfe:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004d02:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8004d04:	e9c7 0052 	strd	r0, r0, [r7, #328]	; 0x148
 8004d08:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8004d0c:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8004d10:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8004d14:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8004d18:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8004d1c:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8004d20:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d24:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
 8004d28:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8004d2c:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
 8004d30:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8004d34:	e9c7 5556 	strd	r5, r5, [r7, #344]	; 0x158
 8004d38:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
 8004d3c:	2a00      	cmp	r2, #0
 8004d3e:	f001 81a2 	beq.w	8006086 <forward_lstm+0x175e>
 8004d42:	6a38      	ldr	r0, [r7, #32]
 8004d44:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8004d48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d4c:	46a9      	mov	r9, r5
 8004d4e:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8004d50:	f8c7 50c0 	str.w	r5, [r7, #192]	; 0xc0
 8004d54:	3080      	adds	r0, #128	; 0x80
 8004d56:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8004d58:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
 8004d5c:	4410      	add	r0, r2
 8004d5e:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8004d60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d62:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8004d66:	f8c7 50c8 	str.w	r5, [r7, #200]	; 0xc8
 8004d6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d6e:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8004d72:	f8c7 9078 	str.w	r9, [r7, #120]	; 0x78
 8004d76:	1955      	adds	r5, r2, r5
 8004d78:	469e      	mov	lr, r3
 8004d7a:	e9d7 b314 	ldrd	fp, r3, [r7, #80]	; 0x50
 8004d7e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8004d82:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
 8004d86:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
 8004d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d8e:	442a      	add	r2, r5
 8004d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d92:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8004d96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004da2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004da6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004daa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004db0:	f002 020f 	and.w	r2, r2, #15
 8004db4:	46a0      	mov	r8, r4
 8004db6:	468c      	mov	ip, r1
 8004db8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8004dbc:	469a      	mov	sl, r3
 8004dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004dec <forward_lstm+0x4c4>
 8004dc6:	ecac 8a01 	vstmia	ip!, {s16}
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f001 8154 	beq.w	8006078 <forward_lstm+0x1750>
 8004dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004dd8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004ddc:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 8004de0:	e006      	b.n	8004df0 <forward_lstm+0x4c8>
 8004de2:	bf00      	nop
 8004de4:	08004915 	.word	0x08004915
 8004de8:	01821040 	.word	0x01821040
 8004dec:	00000000 	.word	0x00000000
 8004df0:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8004df4:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8004df8:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8004dfc:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8004e00:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8004e04:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8004e08:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8004e0c:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8004e10:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8004e14:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8004e18:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8004e1c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8004e20:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8004e24:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004e28:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8004e2c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004e30:	3910      	subs	r1, #16
 8004e32:	290f      	cmp	r1, #15
 8004e34:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8004e38:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8004e3c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004e40:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8004e44:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8004e48:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8004e4c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8004e50:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8004e54:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8004e58:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8004e5c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004e60:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8004e64:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8004e68:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004e6c:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8004e70:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8004e74:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004e78:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8004e7c:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8004e80:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004e84:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8004e88:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8004e8c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004e90:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8004e94:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8004e98:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004e9c:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8004ea0:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8004ea4:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004ea8:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004eac:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004eb0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004eb4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004eb8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ec0:	d896      	bhi.n	8004df0 <forward_lstm+0x4c8>
 8004ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ec6:	e9d7 5426 	ldrd	r5, r4, [r7, #152]	; 0x98
 8004eca:	4453      	add	r3, sl
 8004ecc:	2d00      	cmp	r5, #0
 8004ece:	d076      	beq.n	8004fbe <forward_lstm+0x696>
 8004ed0:	edd4 6a00 	vldr	s13, [r4]
 8004ed4:	edd3 7a00 	vldr	s15, [r3]
 8004ed8:	2d01      	cmp	r5, #1
 8004eda:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004ede:	d06e      	beq.n	8004fbe <forward_lstm+0x696>
 8004ee0:	edd3 6a01 	vldr	s13, [r3, #4]
 8004ee4:	edd4 7a01 	vldr	s15, [r4, #4]
 8004ee8:	2d02      	cmp	r5, #2
 8004eea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004eee:	d066      	beq.n	8004fbe <forward_lstm+0x696>
 8004ef0:	edd3 6a02 	vldr	s13, [r3, #8]
 8004ef4:	edd4 7a02 	vldr	s15, [r4, #8]
 8004ef8:	2d03      	cmp	r5, #3
 8004efa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004efe:	d05e      	beq.n	8004fbe <forward_lstm+0x696>
 8004f00:	edd3 6a03 	vldr	s13, [r3, #12]
 8004f04:	edd4 7a03 	vldr	s15, [r4, #12]
 8004f08:	2d04      	cmp	r5, #4
 8004f0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004f0e:	d056      	beq.n	8004fbe <forward_lstm+0x696>
 8004f10:	edd3 6a04 	vldr	s13, [r3, #16]
 8004f14:	edd4 7a04 	vldr	s15, [r4, #16]
 8004f18:	2d05      	cmp	r5, #5
 8004f1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004f1e:	d04e      	beq.n	8004fbe <forward_lstm+0x696>
 8004f20:	edd3 6a05 	vldr	s13, [r3, #20]
 8004f24:	edd4 7a05 	vldr	s15, [r4, #20]
 8004f28:	2d06      	cmp	r5, #6
 8004f2a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004f2e:	d046      	beq.n	8004fbe <forward_lstm+0x696>
 8004f30:	edd3 6a06 	vldr	s13, [r3, #24]
 8004f34:	edd4 7a06 	vldr	s15, [r4, #24]
 8004f38:	2d07      	cmp	r5, #7
 8004f3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004f3e:	d03e      	beq.n	8004fbe <forward_lstm+0x696>
 8004f40:	edd3 6a07 	vldr	s13, [r3, #28]
 8004f44:	edd4 7a07 	vldr	s15, [r4, #28]
 8004f48:	2d08      	cmp	r5, #8
 8004f4a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004f4e:	d036      	beq.n	8004fbe <forward_lstm+0x696>
 8004f50:	edd3 6a08 	vldr	s13, [r3, #32]
 8004f54:	edd4 7a08 	vldr	s15, [r4, #32]
 8004f58:	2d09      	cmp	r5, #9
 8004f5a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004f5e:	d02e      	beq.n	8004fbe <forward_lstm+0x696>
 8004f60:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004f64:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8004f68:	2d0a      	cmp	r5, #10
 8004f6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004f6e:	d026      	beq.n	8004fbe <forward_lstm+0x696>
 8004f70:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8004f74:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8004f78:	2d0b      	cmp	r5, #11
 8004f7a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004f7e:	d01e      	beq.n	8004fbe <forward_lstm+0x696>
 8004f80:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8004f84:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8004f88:	2d0c      	cmp	r5, #12
 8004f8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004f8e:	d016      	beq.n	8004fbe <forward_lstm+0x696>
 8004f90:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8004f94:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8004f98:	f1b5 020d 	subs.w	r2, r5, #13
 8004f9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004fa0:	d00d      	beq.n	8004fbe <forward_lstm+0x696>
 8004fa2:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8004fa6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8004faa:	2a01      	cmp	r2, #1
 8004fac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004fb0:	d005      	beq.n	8004fbe <forward_lstm+0x696>
 8004fb2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004fb6:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8004fba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004fbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fc2:	ed5f 6a76 	vldr	s13, [pc, #-472]	; 8004dec <forward_lstm+0x4c4>
 8004fc6:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f001 804c 	beq.w	8006068 <forward_lstm+0x1740>
 8004fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fd4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8004fd8:	3340      	adds	r3, #64	; 0x40
 8004fda:	3240      	adds	r2, #64	; 0x40
 8004fdc:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8004fe0:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8004fe4:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8004fe8:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8004fec:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8004ff0:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8004ff4:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8004ff8:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8004ffc:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8005000:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8005004:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8005008:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 800500c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8005010:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005014:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8005018:	eee5 7a86 	vfma.f32	s15, s11, s12
 800501c:	3340      	adds	r3, #64	; 0x40
 800501e:	3240      	adds	r2, #64	; 0x40
 8005020:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8005024:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8005028:	eee5 7a25 	vfma.f32	s15, s10, s11
 800502c:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8005030:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8005034:	eee4 7a06 	vfma.f32	s15, s8, s12
 8005038:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800503c:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8005040:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005044:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8005048:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 800504c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005050:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8005054:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8005058:	eee2 7a83 	vfma.f32	s15, s5, s6
 800505c:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8005060:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8005064:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005068:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 800506c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8005070:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005074:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8005078:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800507c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005080:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8005084:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8005088:	eee0 7a81 	vfma.f32	s15, s1, s2
 800508c:	4298      	cmp	r0, r3
 800508e:	eee1 7a82 	vfma.f32	s15, s3, s4
 8005092:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005096:	eee3 7a84 	vfma.f32	s15, s7, s8
 800509a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800509e:	eee5 7a86 	vfma.f32	s15, s11, s12
 80050a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80050a6:	d199      	bne.n	8004fdc <forward_lstm+0x6b4>
 80050a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050ac:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80050b0:	189a      	adds	r2, r3, r2
 80050b2:	2e00      	cmp	r6, #0
 80050b4:	d078      	beq.n	80051a8 <forward_lstm+0x880>
 80050b6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80050ba:	4633      	mov	r3, r6
 80050bc:	ed91 6a00 	vldr	s12, [r1]
 80050c0:	edd2 7a00 	vldr	s15, [r2]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80050ca:	d06d      	beq.n	80051a8 <forward_lstm+0x880>
 80050cc:	ed91 6a01 	vldr	s12, [r1, #4]
 80050d0:	edd2 7a01 	vldr	s15, [r2, #4]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80050da:	d065      	beq.n	80051a8 <forward_lstm+0x880>
 80050dc:	ed91 6a02 	vldr	s12, [r1, #8]
 80050e0:	edd2 7a02 	vldr	s15, [r2, #8]
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80050ea:	d05d      	beq.n	80051a8 <forward_lstm+0x880>
 80050ec:	ed91 6a03 	vldr	s12, [r1, #12]
 80050f0:	edd2 7a03 	vldr	s15, [r2, #12]
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80050fa:	d055      	beq.n	80051a8 <forward_lstm+0x880>
 80050fc:	ed91 6a04 	vldr	s12, [r1, #16]
 8005100:	edd2 7a04 	vldr	s15, [r2, #16]
 8005104:	2b05      	cmp	r3, #5
 8005106:	eee6 6a27 	vfma.f32	s13, s12, s15
 800510a:	d04d      	beq.n	80051a8 <forward_lstm+0x880>
 800510c:	ed91 6a05 	vldr	s12, [r1, #20]
 8005110:	edd2 7a05 	vldr	s15, [r2, #20]
 8005114:	2b06      	cmp	r3, #6
 8005116:	eee6 6a27 	vfma.f32	s13, s12, s15
 800511a:	d045      	beq.n	80051a8 <forward_lstm+0x880>
 800511c:	ed91 6a06 	vldr	s12, [r1, #24]
 8005120:	edd2 7a06 	vldr	s15, [r2, #24]
 8005124:	2b07      	cmp	r3, #7
 8005126:	eee6 6a27 	vfma.f32	s13, s12, s15
 800512a:	d03d      	beq.n	80051a8 <forward_lstm+0x880>
 800512c:	ed91 6a07 	vldr	s12, [r1, #28]
 8005130:	edd2 7a07 	vldr	s15, [r2, #28]
 8005134:	2b08      	cmp	r3, #8
 8005136:	eee6 6a27 	vfma.f32	s13, s12, s15
 800513a:	d035      	beq.n	80051a8 <forward_lstm+0x880>
 800513c:	ed91 6a08 	vldr	s12, [r1, #32]
 8005140:	edd2 7a08 	vldr	s15, [r2, #32]
 8005144:	2b09      	cmp	r3, #9
 8005146:	eee6 6a27 	vfma.f32	s13, s12, s15
 800514a:	d02d      	beq.n	80051a8 <forward_lstm+0x880>
 800514c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8005150:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8005154:	2b0a      	cmp	r3, #10
 8005156:	eee6 6a27 	vfma.f32	s13, s12, s15
 800515a:	d025      	beq.n	80051a8 <forward_lstm+0x880>
 800515c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8005160:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8005164:	2b0b      	cmp	r3, #11
 8005166:	eee6 6a27 	vfma.f32	s13, s12, s15
 800516a:	d01d      	beq.n	80051a8 <forward_lstm+0x880>
 800516c:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8005170:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8005174:	2b0c      	cmp	r3, #12
 8005176:	eee6 6a27 	vfma.f32	s13, s12, s15
 800517a:	d015      	beq.n	80051a8 <forward_lstm+0x880>
 800517c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8005180:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8005184:	3b0d      	subs	r3, #13
 8005186:	eee6 6a27 	vfma.f32	s13, s12, s15
 800518a:	d00d      	beq.n	80051a8 <forward_lstm+0x880>
 800518c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8005190:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8005194:	2b01      	cmp	r3, #1
 8005196:	eee6 6a27 	vfma.f32	s13, s12, s15
 800519a:	d005      	beq.n	80051a8 <forward_lstm+0x880>
 800519c:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 80051a0:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80051a4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80051a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051ac:	f8c7 90ac 	str.w	r9, [r7, #172]	; 0xac
 80051b0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80051b4:	ed0c 7a01 	vstr	s14, [ip, #-4]
 80051b8:	ecb3 6a01 	vldmia	r3!, {s12}
 80051bc:	edd9 6a00 	vldr	s13, [r9]
 80051c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051c8:	ecf3 7a01 	vldmia	r3!, {s15}
 80051cc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80051d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051dc:	ed0c 7a01 	vstr	s14, [ip, #-4]
 80051e0:	ed9f 7abb 	vldr	s14, [pc, #748]	; 80054d0 <forward_lstm+0xba8>
 80051e4:	ed88 8a00 	vstr	s16, [r8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8739 	beq.w	8006060 <forward_lstm+0x1738>
 80051ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80051f6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80051fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80051fe:	3340      	adds	r3, #64	; 0x40
 8005200:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8005204:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005208:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 800520c:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8005210:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8005214:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8005218:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800521c:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8005220:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8005224:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8005228:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800522c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8005230:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8005234:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005238:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800523c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005240:	3910      	subs	r1, #16
 8005242:	290f      	cmp	r1, #15
 8005244:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8005248:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 800524c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005250:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005254:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005258:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 800525c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8005260:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005264:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8005268:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 800526c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005270:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8005274:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8005278:	eee6 7a26 	vfma.f32	s15, s12, s13
 800527c:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8005280:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8005284:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005288:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800528c:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8005290:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005294:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8005298:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800529c:	eee5 7a25 	vfma.f32	s15, s10, s11
 80052a0:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80052a4:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80052a8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80052ac:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80052b0:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80052b4:	eee1 7a21 	vfma.f32	s15, s2, s3
 80052b8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80052bc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80052c0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80052c4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80052c8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80052cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052d0:	d896      	bhi.n	8005200 <forward_lstm+0x8d8>
 80052d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80052d6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80052da:	4413      	add	r3, r2
 80052dc:	2d00      	cmp	r5, #0
 80052de:	d076      	beq.n	80053ce <forward_lstm+0xaa6>
 80052e0:	edd4 6a00 	vldr	s13, [r4]
 80052e4:	edd3 7a00 	vldr	s15, [r3]
 80052e8:	2d01      	cmp	r5, #1
 80052ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80052ee:	d06e      	beq.n	80053ce <forward_lstm+0xaa6>
 80052f0:	edd4 6a01 	vldr	s13, [r4, #4]
 80052f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80052f8:	2d02      	cmp	r5, #2
 80052fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80052fe:	d066      	beq.n	80053ce <forward_lstm+0xaa6>
 8005300:	edd4 6a02 	vldr	s13, [r4, #8]
 8005304:	edd3 7a02 	vldr	s15, [r3, #8]
 8005308:	2d03      	cmp	r5, #3
 800530a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800530e:	d05e      	beq.n	80053ce <forward_lstm+0xaa6>
 8005310:	edd4 6a03 	vldr	s13, [r4, #12]
 8005314:	edd3 7a03 	vldr	s15, [r3, #12]
 8005318:	2d04      	cmp	r5, #4
 800531a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800531e:	d056      	beq.n	80053ce <forward_lstm+0xaa6>
 8005320:	edd4 6a04 	vldr	s13, [r4, #16]
 8005324:	edd3 7a04 	vldr	s15, [r3, #16]
 8005328:	2d05      	cmp	r5, #5
 800532a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800532e:	d04e      	beq.n	80053ce <forward_lstm+0xaa6>
 8005330:	edd4 6a05 	vldr	s13, [r4, #20]
 8005334:	edd3 7a05 	vldr	s15, [r3, #20]
 8005338:	2d06      	cmp	r5, #6
 800533a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800533e:	d046      	beq.n	80053ce <forward_lstm+0xaa6>
 8005340:	edd4 6a06 	vldr	s13, [r4, #24]
 8005344:	edd3 7a06 	vldr	s15, [r3, #24]
 8005348:	2d07      	cmp	r5, #7
 800534a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800534e:	d03e      	beq.n	80053ce <forward_lstm+0xaa6>
 8005350:	edd4 6a07 	vldr	s13, [r4, #28]
 8005354:	edd3 7a07 	vldr	s15, [r3, #28]
 8005358:	2d08      	cmp	r5, #8
 800535a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800535e:	d036      	beq.n	80053ce <forward_lstm+0xaa6>
 8005360:	edd4 6a08 	vldr	s13, [r4, #32]
 8005364:	edd3 7a08 	vldr	s15, [r3, #32]
 8005368:	2d09      	cmp	r5, #9
 800536a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800536e:	d02e      	beq.n	80053ce <forward_lstm+0xaa6>
 8005370:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8005374:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005378:	2d0a      	cmp	r5, #10
 800537a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800537e:	d026      	beq.n	80053ce <forward_lstm+0xaa6>
 8005380:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8005384:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005388:	2d0b      	cmp	r5, #11
 800538a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800538e:	d01e      	beq.n	80053ce <forward_lstm+0xaa6>
 8005390:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8005394:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005398:	2d0c      	cmp	r5, #12
 800539a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800539e:	d016      	beq.n	80053ce <forward_lstm+0xaa6>
 80053a0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80053a4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80053a8:	f1b5 020d 	subs.w	r2, r5, #13
 80053ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053b0:	d00d      	beq.n	80053ce <forward_lstm+0xaa6>
 80053b2:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 80053b6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80053ba:	2a01      	cmp	r2, #1
 80053bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053c0:	d005      	beq.n	80053ce <forward_lstm+0xaa6>
 80053c2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80053c6:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80053ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053d2:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80054d0 <forward_lstm+0xba8>
 80053d6:	ed88 7a00 	vstr	s14, [r8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8638 	beq.w	8006050 <forward_lstm+0x1728>
 80053e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80053e8:	3340      	adds	r3, #64	; 0x40
 80053ea:	3240      	adds	r2, #64	; 0x40
 80053ec:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80053f0:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 80053f4:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 80053f8:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80053fc:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8005400:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8005404:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8005408:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800540c:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8005410:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8005414:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8005418:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 800541c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8005420:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005424:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8005428:	eee5 7a86 	vfma.f32	s15, s11, s12
 800542c:	3340      	adds	r3, #64	; 0x40
 800542e:	3240      	adds	r2, #64	; 0x40
 8005430:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8005434:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8005438:	eee5 7a25 	vfma.f32	s15, s10, s11
 800543c:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8005440:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8005444:	eee4 7a06 	vfma.f32	s15, s8, s12
 8005448:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800544c:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8005450:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005454:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8005458:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 800545c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005460:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8005464:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8005468:	eee2 7a83 	vfma.f32	s15, s5, s6
 800546c:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8005470:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8005474:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005478:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 800547c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8005480:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005484:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8005488:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800548c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005490:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8005494:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8005498:	eee0 7a81 	vfma.f32	s15, s1, s2
 800549c:	4283      	cmp	r3, r0
 800549e:	eee1 7a82 	vfma.f32	s15, s3, s4
 80054a2:	eee2 7a83 	vfma.f32	s15, s5, s6
 80054a6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80054aa:	eee4 7a85 	vfma.f32	s15, s9, s10
 80054ae:	eee5 7a86 	vfma.f32	s15, s11, s12
 80054b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80054b6:	d199      	bne.n	80053ec <forward_lstm+0xac4>
 80054b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054bc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80054c0:	189a      	adds	r2, r3, r2
 80054c2:	2e00      	cmp	r6, #0
 80054c4:	d07c      	beq.n	80055c0 <forward_lstm+0xc98>
 80054c6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80054ca:	4633      	mov	r3, r6
 80054cc:	e002      	b.n	80054d4 <forward_lstm+0xbac>
 80054ce:	bf00      	nop
 80054d0:	00000000 	.word	0x00000000
 80054d4:	ed91 6a00 	vldr	s12, [r1]
 80054d8:	edd2 7a00 	vldr	s15, [r2]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	eee6 6a27 	vfma.f32	s13, s12, s15
 80054e2:	d06d      	beq.n	80055c0 <forward_lstm+0xc98>
 80054e4:	ed91 6a01 	vldr	s12, [r1, #4]
 80054e8:	edd2 7a01 	vldr	s15, [r2, #4]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	eee6 6a27 	vfma.f32	s13, s12, s15
 80054f2:	d065      	beq.n	80055c0 <forward_lstm+0xc98>
 80054f4:	ed91 6a02 	vldr	s12, [r1, #8]
 80054f8:	edd2 7a02 	vldr	s15, [r2, #8]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005502:	d05d      	beq.n	80055c0 <forward_lstm+0xc98>
 8005504:	ed91 6a03 	vldr	s12, [r1, #12]
 8005508:	edd2 7a03 	vldr	s15, [r2, #12]
 800550c:	2b04      	cmp	r3, #4
 800550e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005512:	d055      	beq.n	80055c0 <forward_lstm+0xc98>
 8005514:	ed91 6a04 	vldr	s12, [r1, #16]
 8005518:	edd2 7a04 	vldr	s15, [r2, #16]
 800551c:	2b05      	cmp	r3, #5
 800551e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005522:	d04d      	beq.n	80055c0 <forward_lstm+0xc98>
 8005524:	ed91 6a05 	vldr	s12, [r1, #20]
 8005528:	edd2 7a05 	vldr	s15, [r2, #20]
 800552c:	2b06      	cmp	r3, #6
 800552e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005532:	d045      	beq.n	80055c0 <forward_lstm+0xc98>
 8005534:	ed91 6a06 	vldr	s12, [r1, #24]
 8005538:	edd2 7a06 	vldr	s15, [r2, #24]
 800553c:	2b07      	cmp	r3, #7
 800553e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005542:	d03d      	beq.n	80055c0 <forward_lstm+0xc98>
 8005544:	ed91 6a07 	vldr	s12, [r1, #28]
 8005548:	edd2 7a07 	vldr	s15, [r2, #28]
 800554c:	2b08      	cmp	r3, #8
 800554e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005552:	d035      	beq.n	80055c0 <forward_lstm+0xc98>
 8005554:	ed91 6a08 	vldr	s12, [r1, #32]
 8005558:	edd2 7a08 	vldr	s15, [r2, #32]
 800555c:	2b09      	cmp	r3, #9
 800555e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005562:	d02d      	beq.n	80055c0 <forward_lstm+0xc98>
 8005564:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8005568:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800556c:	2b0a      	cmp	r3, #10
 800556e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005572:	d025      	beq.n	80055c0 <forward_lstm+0xc98>
 8005574:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8005578:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800557c:	2b0b      	cmp	r3, #11
 800557e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005582:	d01d      	beq.n	80055c0 <forward_lstm+0xc98>
 8005584:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8005588:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800558c:	2b0c      	cmp	r3, #12
 800558e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005592:	d015      	beq.n	80055c0 <forward_lstm+0xc98>
 8005594:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8005598:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800559c:	3b0d      	subs	r3, #13
 800559e:	eee6 6a27 	vfma.f32	s13, s12, s15
 80055a2:	d00d      	beq.n	80055c0 <forward_lstm+0xc98>
 80055a4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80055a8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	eee6 6a27 	vfma.f32	s13, s12, s15
 80055b2:	d005      	beq.n	80055c0 <forward_lstm+0xc98>
 80055b4:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 80055b8:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80055bc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80055c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055c4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80055c8:	f109 0904 	add.w	r9, r9, #4
 80055cc:	ed88 7a00 	vstr	s14, [r8]
 80055d0:	edd3 7a00 	vldr	s15, [r3]
 80055d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055d8:	ecb3 6a01 	vldmia	r3!, {s12}
 80055dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80055e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055e4:	ecf3 6a01 	vldmia	r3!, {s13}
 80055e8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80055ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80055f8:	eca8 7a01 	vstmia	r8!, {s14}
 80055fc:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 80054d0 <forward_lstm+0xba8>
 8005600:	ed8e 8a00 	vstr	s16, [lr]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 851f 	beq.w	8006048 <forward_lstm+0x1720>
 800560a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800560e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005612:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561a:	3340      	adds	r3, #64	; 0x40
 800561c:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8005620:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005624:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8005628:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 800562c:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8005630:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8005634:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8005638:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 800563c:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8005640:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8005644:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8005648:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 800564c:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8005650:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005654:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8005658:	eee6 7a26 	vfma.f32	s15, s12, s13
 800565c:	3910      	subs	r1, #16
 800565e:	290f      	cmp	r1, #15
 8005660:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8005664:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8005668:	eee5 7a86 	vfma.f32	s15, s11, s12
 800566c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005670:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005674:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8005678:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800567c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005680:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8005684:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8005688:	eee5 7a25 	vfma.f32	s15, s10, s11
 800568c:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8005690:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8005694:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005698:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 800569c:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 80056a0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80056a4:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80056a8:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80056ac:	eee4 7a24 	vfma.f32	s15, s8, s9
 80056b0:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80056b4:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80056b8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80056bc:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80056c0:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80056c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80056c8:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80056cc:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80056d0:	eee1 7a21 	vfma.f32	s15, s2, s3
 80056d4:	eee2 7a22 	vfma.f32	s15, s4, s5
 80056d8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80056dc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80056e0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80056e4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80056e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056ec:	d896      	bhi.n	800561c <forward_lstm+0xcf4>
 80056ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80056f6:	4413      	add	r3, r2
 80056f8:	2d00      	cmp	r5, #0
 80056fa:	d076      	beq.n	80057ea <forward_lstm+0xec2>
 80056fc:	edd4 6a00 	vldr	s13, [r4]
 8005700:	edd3 7a00 	vldr	s15, [r3]
 8005704:	2d01      	cmp	r5, #1
 8005706:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800570a:	d06e      	beq.n	80057ea <forward_lstm+0xec2>
 800570c:	edd4 6a01 	vldr	s13, [r4, #4]
 8005710:	edd3 7a01 	vldr	s15, [r3, #4]
 8005714:	2d02      	cmp	r5, #2
 8005716:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800571a:	d066      	beq.n	80057ea <forward_lstm+0xec2>
 800571c:	edd4 6a02 	vldr	s13, [r4, #8]
 8005720:	edd3 7a02 	vldr	s15, [r3, #8]
 8005724:	2d03      	cmp	r5, #3
 8005726:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800572a:	d05e      	beq.n	80057ea <forward_lstm+0xec2>
 800572c:	edd4 6a03 	vldr	s13, [r4, #12]
 8005730:	edd3 7a03 	vldr	s15, [r3, #12]
 8005734:	2d04      	cmp	r5, #4
 8005736:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800573a:	d056      	beq.n	80057ea <forward_lstm+0xec2>
 800573c:	edd4 6a04 	vldr	s13, [r4, #16]
 8005740:	edd3 7a04 	vldr	s15, [r3, #16]
 8005744:	2d05      	cmp	r5, #5
 8005746:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800574a:	d04e      	beq.n	80057ea <forward_lstm+0xec2>
 800574c:	edd4 6a05 	vldr	s13, [r4, #20]
 8005750:	edd3 7a05 	vldr	s15, [r3, #20]
 8005754:	2d06      	cmp	r5, #6
 8005756:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800575a:	d046      	beq.n	80057ea <forward_lstm+0xec2>
 800575c:	edd4 6a06 	vldr	s13, [r4, #24]
 8005760:	edd3 7a06 	vldr	s15, [r3, #24]
 8005764:	2d07      	cmp	r5, #7
 8005766:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800576a:	d03e      	beq.n	80057ea <forward_lstm+0xec2>
 800576c:	edd4 6a07 	vldr	s13, [r4, #28]
 8005770:	edd3 7a07 	vldr	s15, [r3, #28]
 8005774:	2d08      	cmp	r5, #8
 8005776:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800577a:	d036      	beq.n	80057ea <forward_lstm+0xec2>
 800577c:	edd4 6a08 	vldr	s13, [r4, #32]
 8005780:	edd3 7a08 	vldr	s15, [r3, #32]
 8005784:	2d09      	cmp	r5, #9
 8005786:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800578a:	d02e      	beq.n	80057ea <forward_lstm+0xec2>
 800578c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8005790:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005794:	2d0a      	cmp	r5, #10
 8005796:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800579a:	d026      	beq.n	80057ea <forward_lstm+0xec2>
 800579c:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 80057a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80057a4:	2d0b      	cmp	r5, #11
 80057a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057aa:	d01e      	beq.n	80057ea <forward_lstm+0xec2>
 80057ac:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80057b0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80057b4:	2d0c      	cmp	r5, #12
 80057b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057ba:	d016      	beq.n	80057ea <forward_lstm+0xec2>
 80057bc:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80057c0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80057c4:	f1b5 020d 	subs.w	r2, r5, #13
 80057c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057cc:	d00d      	beq.n	80057ea <forward_lstm+0xec2>
 80057ce:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 80057d2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80057d6:	2a01      	cmp	r2, #1
 80057d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057dc:	d005      	beq.n	80057ea <forward_lstm+0xec2>
 80057de:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80057e2:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80057e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057ee:	ed5f 6ac8 	vldr	s13, [pc, #-800]	; 80054d0 <forward_lstm+0xba8>
 80057f2:	ed8e 7a00 	vstr	s14, [lr]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8420 	beq.w	800603c <forward_lstm+0x1714>
 80057fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005800:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 8005804:	3340      	adds	r3, #64	; 0x40
 8005806:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800580a:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 800580e:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8005812:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8005816:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 800581a:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 800581e:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8005822:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8005826:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 800582a:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 800582e:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8005832:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8005836:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 800583a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800583e:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8005842:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005846:	3340      	adds	r3, #64	; 0x40
 8005848:	3240      	adds	r2, #64	; 0x40
 800584a:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 800584e:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8005852:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005856:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 800585a:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800585e:	eee4 7a06 	vfma.f32	s15, s8, s12
 8005862:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8005866:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 800586a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800586e:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8005872:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8005876:	eee5 7a86 	vfma.f32	s15, s11, s12
 800587a:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 800587e:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8005882:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005886:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 800588a:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800588e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005892:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8005896:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800589a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800589e:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 80058a2:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80058a6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80058aa:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 80058ae:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80058b2:	eee0 7a81 	vfma.f32	s15, s1, s2
 80058b6:	4283      	cmp	r3, r0
 80058b8:	eee1 7a82 	vfma.f32	s15, s3, s4
 80058bc:	eee2 7a83 	vfma.f32	s15, s5, s6
 80058c0:	eee3 7a84 	vfma.f32	s15, s7, s8
 80058c4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80058c8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80058cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80058d0:	d199      	bne.n	8005806 <forward_lstm+0xede>
 80058d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058d6:	eb0b 0203 	add.w	r2, fp, r3
 80058da:	2e00      	cmp	r6, #0
 80058dc:	d078      	beq.n	80059d0 <forward_lstm+0x10a8>
 80058de:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80058e2:	4633      	mov	r3, r6
 80058e4:	ed91 6a00 	vldr	s12, [r1]
 80058e8:	edd2 7a00 	vldr	s15, [r2]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	eee6 6a27 	vfma.f32	s13, s12, s15
 80058f2:	d06d      	beq.n	80059d0 <forward_lstm+0x10a8>
 80058f4:	ed91 6a01 	vldr	s12, [r1, #4]
 80058f8:	edd2 7a01 	vldr	s15, [r2, #4]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005902:	d065      	beq.n	80059d0 <forward_lstm+0x10a8>
 8005904:	ed91 6a02 	vldr	s12, [r1, #8]
 8005908:	edd2 7a02 	vldr	s15, [r2, #8]
 800590c:	2b03      	cmp	r3, #3
 800590e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005912:	d05d      	beq.n	80059d0 <forward_lstm+0x10a8>
 8005914:	ed91 6a03 	vldr	s12, [r1, #12]
 8005918:	edd2 7a03 	vldr	s15, [r2, #12]
 800591c:	2b04      	cmp	r3, #4
 800591e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005922:	d055      	beq.n	80059d0 <forward_lstm+0x10a8>
 8005924:	ed91 6a04 	vldr	s12, [r1, #16]
 8005928:	edd2 7a04 	vldr	s15, [r2, #16]
 800592c:	2b05      	cmp	r3, #5
 800592e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005932:	d04d      	beq.n	80059d0 <forward_lstm+0x10a8>
 8005934:	ed91 6a05 	vldr	s12, [r1, #20]
 8005938:	edd2 7a05 	vldr	s15, [r2, #20]
 800593c:	2b06      	cmp	r3, #6
 800593e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005942:	d045      	beq.n	80059d0 <forward_lstm+0x10a8>
 8005944:	ed91 6a06 	vldr	s12, [r1, #24]
 8005948:	edd2 7a06 	vldr	s15, [r2, #24]
 800594c:	2b07      	cmp	r3, #7
 800594e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005952:	d03d      	beq.n	80059d0 <forward_lstm+0x10a8>
 8005954:	ed91 6a07 	vldr	s12, [r1, #28]
 8005958:	edd2 7a07 	vldr	s15, [r2, #28]
 800595c:	2b08      	cmp	r3, #8
 800595e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005962:	d035      	beq.n	80059d0 <forward_lstm+0x10a8>
 8005964:	ed91 6a08 	vldr	s12, [r1, #32]
 8005968:	edd2 7a08 	vldr	s15, [r2, #32]
 800596c:	2b09      	cmp	r3, #9
 800596e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005972:	d02d      	beq.n	80059d0 <forward_lstm+0x10a8>
 8005974:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8005978:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800597c:	2b0a      	cmp	r3, #10
 800597e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005982:	d025      	beq.n	80059d0 <forward_lstm+0x10a8>
 8005984:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8005988:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800598c:	2b0b      	cmp	r3, #11
 800598e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005992:	d01d      	beq.n	80059d0 <forward_lstm+0x10a8>
 8005994:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8005998:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800599c:	2b0c      	cmp	r3, #12
 800599e:	eee6 6a27 	vfma.f32	s13, s12, s15
 80059a2:	d015      	beq.n	80059d0 <forward_lstm+0x10a8>
 80059a4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80059a8:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80059ac:	3b0d      	subs	r3, #13
 80059ae:	eee6 6a27 	vfma.f32	s13, s12, s15
 80059b2:	d00d      	beq.n	80059d0 <forward_lstm+0x10a8>
 80059b4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80059b8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80059bc:	2b01      	cmp	r3, #1
 80059be:	eee6 6a27 	vfma.f32	s13, s12, s15
 80059c2:	d005      	beq.n	80059d0 <forward_lstm+0x10a8>
 80059c4:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 80059c8:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80059cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80059d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059d4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80059d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80059dc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80059e0:	449a      	add	sl, r3
 80059e2:	ed8e 7a00 	vstr	s14, [lr]
 80059e6:	ecf2 7a01 	vldmia	r2!, {s15}
 80059ea:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80059ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059f2:	4411      	add	r1, r2
 80059f4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80059f8:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80059fc:	4419      	add	r1, r3
 80059fe:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8005a02:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8005a06:	4411      	add	r1, r2
 8005a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a0c:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8005a10:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8005a14:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8005a18:	4419      	add	r1, r3
 8005a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a1e:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8005a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a26:	bf88      	it	hi
 8005a28:	eeb0 7a68 	vmovhi.f32	s14, s17
 8005a2c:	4563      	cmp	r3, ip
 8005a2e:	ecae 7a01 	vstmia	lr!, {s14}
 8005a32:	4493      	add	fp, r2
 8005a34:	f47f a9c3 	bne.w	8004dbe <forward_lstm+0x496>
 8005a38:	f8d7 80a8 	ldr.w	r8, [r7, #168]	; 0xa8
 8005a3c:	f8d7 a078 	ldr.w	sl, [r7, #120]	; 0x78
 8005a40:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8005a44:	4642      	mov	r2, r8
 8005a46:	4608      	mov	r0, r1
 8005a48:	ee19 3a90 	vmov	r3, s19
 8005a4c:	46a3      	mov	fp, r4
 8005a4e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8005a50:	47a0      	blx	r4
 8005a52:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8005a56:	4642      	mov	r2, r8
 8005a58:	4608      	mov	r0, r1
 8005a5a:	ee19 3a90 	vmov	r3, s19
 8005a5e:	47a0      	blx	r4
 8005a60:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8005a64:	4642      	mov	r2, r8
 8005a66:	4608      	mov	r0, r1
 8005a68:	ee1a 3a90 	vmov	r3, s21
 8005a6c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8005a6e:	47a0      	blx	r4
 8005a70:	1e6a      	subs	r2, r5, #1
 8005a72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a76:	1eaa      	subs	r2, r5, #2
 8005a78:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8005a7c:	1eea      	subs	r2, r5, #3
 8005a7e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005a82:	1f2a      	subs	r2, r5, #4
 8005a84:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8005a88:	1f6a      	subs	r2, r5, #5
 8005a8a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a8e:	1faa      	subs	r2, r5, #6
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8005a96:	e9d7 8120 	ldrd	r8, r1, [r7, #128]	; 0x80
 8005a9a:	1fea      	subs	r2, r5, #7
 8005a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005aa0:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 8005aa4:	f8d7 e0a4 	ldr.w	lr, [r7, #164]	; 0xa4
 8005aa8:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 8005aac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005aae:	f8c7 60f0 	str.w	r6, [r7, #240]	; 0xf0
 8005ab2:	f1a5 0208 	sub.w	r2, r5, #8
 8005ab6:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8005aba:	465c      	mov	r4, fp
 8005abc:	461e      	mov	r6, r3
 8005abe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ac2:	ecf8 7a01 	vldmia	r8!, {s15}
 8005ac6:	ecb3 6a01 	vldmia	r3!, {s12}
 8005aca:	ed9a 7a00 	vldr	s14, [sl]
 8005ace:	ecfe 6a01 	vldmia	lr!, {s13}
 8005ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ad6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ade:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005ae2:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8005e00 <forward_lstm+0x14d8>
 8005ae6:	ecea 7a01 	vstmia	sl!, {s15}
 8005aea:	eca1 8a01 	vstmia	r1!, {s16}
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 82a2 	beq.w	8006038 <forward_lstm+0x1710>
 8005af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af8:	f8d7 b0dc 	ldr.w	fp, [r7, #220]	; 0xdc
 8005afc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005b00:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8005b04:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8005b08:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005b0c:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8005b10:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8005b14:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8005b18:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8005b1c:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8005b20:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8005b24:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8005b28:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8005b2c:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8005b30:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8005b34:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8005b38:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005b3c:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8005b40:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005b44:	f1ab 0b10 	sub.w	fp, fp, #16
 8005b48:	f1bb 0f0f 	cmp.w	fp, #15
 8005b4c:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8005b50:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8005b54:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005b58:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005b5c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005b60:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8005b64:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8005b68:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005b6c:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8005b70:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8005b74:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005b78:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8005b7c:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8005b80:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005b84:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8005b88:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8005b8c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005b90:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8005b94:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8005b98:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005b9c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8005ba0:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8005ba4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005ba8:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8005bac:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8005bb0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005bb4:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8005bb8:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8005bbc:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005bc0:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005bc4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005bc8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005bcc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005bd0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bd8:	d894      	bhi.n	8005b04 <forward_lstm+0x11dc>
 8005bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bde:	18c3      	adds	r3, r0, r3
 8005be0:	2d00      	cmp	r5, #0
 8005be2:	f000 8085 	beq.w	8005cf0 <forward_lstm+0x13c8>
 8005be6:	edd4 6a00 	vldr	s13, [r4]
 8005bea:	edd3 7a00 	vldr	s15, [r3]
 8005bee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005bf2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005bf6:	2a00      	cmp	r2, #0
 8005bf8:	d07a      	beq.n	8005cf0 <forward_lstm+0x13c8>
 8005bfa:	edd4 6a01 	vldr	s13, [r4, #4]
 8005bfe:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c02:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005c06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c0a:	2a00      	cmp	r2, #0
 8005c0c:	d070      	beq.n	8005cf0 <forward_lstm+0x13c8>
 8005c0e:	edd4 6a02 	vldr	s13, [r4, #8]
 8005c12:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c1e:	2a00      	cmp	r2, #0
 8005c20:	d066      	beq.n	8005cf0 <forward_lstm+0x13c8>
 8005c22:	edd4 6a03 	vldr	s13, [r4, #12]
 8005c26:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	d05c      	beq.n	8005cf0 <forward_lstm+0x13c8>
 8005c36:	edd4 6a04 	vldr	s13, [r4, #16]
 8005c3a:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c42:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c46:	2a00      	cmp	r2, #0
 8005c48:	d052      	beq.n	8005cf0 <forward_lstm+0x13c8>
 8005c4a:	edd4 6a05 	vldr	s13, [r4, #20]
 8005c4e:	edd3 7a05 	vldr	s15, [r3, #20]
 8005c52:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c56:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	d048      	beq.n	8005cf0 <forward_lstm+0x13c8>
 8005c5e:	edd4 6a06 	vldr	s13, [r4, #24]
 8005c62:	edd3 7a06 	vldr	s15, [r3, #24]
 8005c66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c6e:	b3fa      	cbz	r2, 8005cf0 <forward_lstm+0x13c8>
 8005c70:	edd4 6a07 	vldr	s13, [r4, #28]
 8005c74:	edd3 7a07 	vldr	s15, [r3, #28]
 8005c78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c80:	b3b2      	cbz	r2, 8005cf0 <forward_lstm+0x13c8>
 8005c82:	edd4 6a08 	vldr	s13, [r4, #32]
 8005c86:	edd3 7a08 	vldr	s15, [r3, #32]
 8005c8a:	2d09      	cmp	r5, #9
 8005c8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c90:	d02e      	beq.n	8005cf0 <forward_lstm+0x13c8>
 8005c92:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8005c96:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005c9a:	2d0a      	cmp	r5, #10
 8005c9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005ca0:	d026      	beq.n	8005cf0 <forward_lstm+0x13c8>
 8005ca2:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8005ca6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005caa:	2d0b      	cmp	r5, #11
 8005cac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005cb0:	d01e      	beq.n	8005cf0 <forward_lstm+0x13c8>
 8005cb2:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8005cb6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005cba:	2d0c      	cmp	r5, #12
 8005cbc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005cc0:	d016      	beq.n	8005cf0 <forward_lstm+0x13c8>
 8005cc2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8005cc6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005cca:	f1b5 020d 	subs.w	r2, r5, #13
 8005cce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005cd2:	d00d      	beq.n	8005cf0 <forward_lstm+0x13c8>
 8005cd4:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8005cd8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005cdc:	2a01      	cmp	r2, #1
 8005cde:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005ce2:	d005      	beq.n	8005cf0 <forward_lstm+0x13c8>
 8005ce4:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005ce8:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8005cec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005cf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cf4:	eddf 6a42 	vldr	s13, [pc, #264]	; 8005e00 <forward_lstm+0x14d8>
 8005cf8:	ed01 7a01 	vstr	s14, [r1, #-4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8195 	beq.w	800602c <forward_lstm+0x1704>
 8005d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d06:	f8d7 b0a8 	ldr.w	fp, [r7, #168]	; 0xa8
 8005d0a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005d0e:	f10c 0340 	add.w	r3, ip, #64	; 0x40
 8005d12:	ed13 5a0f 	vldr	s10, [r3, #-60]	; 0xffffffc4
 8005d16:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005d1a:	ed52 5a10 	vldr	s11, [r2, #-64]	; 0xffffffc0
 8005d1e:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8005d22:	ed12 4a0d 	vldr	s8, [r2, #-52]	; 0xffffffcc
 8005d26:	ed52 4a0c 	vldr	s9, [r2, #-48]	; 0xffffffd0
 8005d2a:	ed52 2a0a 	vldr	s5, [r2, #-40]	; 0xffffffd8
 8005d2e:	ed13 3a0a 	vldr	s6, [r3, #-40]	; 0xffffffd8
 8005d32:	ed52 3a09 	vldr	s7, [r2, #-36]	; 0xffffffdc
 8005d36:	ed52 0a06 	vldr	s1, [r2, #-24]	; 0xffffffe8
 8005d3a:	ed13 1a06 	vldr	s2, [r3, #-24]	; 0xffffffe8
 8005d3e:	ed52 1a05 	vldr	s3, [r2, #-20]	; 0xffffffec
 8005d42:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8005d46:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005d4a:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 8005d4e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005d52:	f1ab 0b10 	sub.w	fp, fp, #16
 8005d56:	f1bb 0f0f 	cmp.w	fp, #15
 8005d5a:	ed53 5a0e 	vldr	s11, [r3, #-56]	; 0xffffffc8
 8005d5e:	ed13 6a0d 	vldr	s12, [r3, #-52]	; 0xffffffcc
 8005d62:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005d66:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005d6a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005d6e:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8005d72:	ed52 5a1b 	vldr	s11, [r2, #-108]	; 0xffffff94
 8005d76:	eee4 7a06 	vfma.f32	s15, s8, s12
 8005d7a:	ed13 6a1b 	vldr	s12, [r3, #-108]	; 0xffffff94
 8005d7e:	ed13 4a19 	vldr	s8, [r3, #-100]	; 0xffffff9c
 8005d82:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005d86:	ed52 4a18 	vldr	s9, [r2, #-96]	; 0xffffffa0
 8005d8a:	ed13 5a18 	vldr	s10, [r3, #-96]	; 0xffffffa0
 8005d8e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005d92:	ed52 5a17 	vldr	s11, [r2, #-92]	; 0xffffffa4
 8005d96:	ed13 6a17 	vldr	s12, [r3, #-92]	; 0xffffffa4
 8005d9a:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005d9e:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 8005da2:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 8005da6:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005daa:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8005dae:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8005db2:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005db6:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 8005dba:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 8005dbe:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005dc2:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 8005dc6:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 8005dca:	eee0 7a81 	vfma.f32	s15, s1, s2
 8005dce:	eee1 7a82 	vfma.f32	s15, s3, s4
 8005dd2:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005dd6:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005dda:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005dde:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005de2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005de6:	d894      	bhi.n	8005d12 <forward_lstm+0x13ea>
 8005de8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dec:	eb0c 0203 	add.w	r2, ip, r3
 8005df0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d07b      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005df8:	f8d7 b0d0 	ldr.w	fp, [r7, #208]	; 0xd0
 8005dfc:	e002      	b.n	8005e04 <forward_lstm+0x14dc>
 8005dfe:	bf00      	nop
 8005e00:	00000000 	.word	0x00000000
 8005e04:	ed9b 6a00 	vldr	s12, [fp]
 8005e08:	edd2 7a00 	vldr	s15, [r2]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005e12:	d06d      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005e14:	ed9b 6a01 	vldr	s12, [fp, #4]
 8005e18:	edd2 7a01 	vldr	s15, [r2, #4]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005e22:	d065      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005e24:	ed9b 6a02 	vldr	s12, [fp, #8]
 8005e28:	edd2 7a02 	vldr	s15, [r2, #8]
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005e32:	d05d      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005e34:	ed9b 6a03 	vldr	s12, [fp, #12]
 8005e38:	edd2 7a03 	vldr	s15, [r2, #12]
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005e42:	d055      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005e44:	ed9b 6a04 	vldr	s12, [fp, #16]
 8005e48:	edd2 7a04 	vldr	s15, [r2, #16]
 8005e4c:	2b05      	cmp	r3, #5
 8005e4e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005e52:	d04d      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005e54:	ed9b 6a05 	vldr	s12, [fp, #20]
 8005e58:	edd2 7a05 	vldr	s15, [r2, #20]
 8005e5c:	2b06      	cmp	r3, #6
 8005e5e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005e62:	d045      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005e64:	ed9b 6a06 	vldr	s12, [fp, #24]
 8005e68:	edd2 7a06 	vldr	s15, [r2, #24]
 8005e6c:	2b07      	cmp	r3, #7
 8005e6e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005e72:	d03d      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005e74:	ed9b 6a07 	vldr	s12, [fp, #28]
 8005e78:	edd2 7a07 	vldr	s15, [r2, #28]
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005e82:	d035      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005e84:	ed9b 6a08 	vldr	s12, [fp, #32]
 8005e88:	edd2 7a08 	vldr	s15, [r2, #32]
 8005e8c:	2b09      	cmp	r3, #9
 8005e8e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005e92:	d02d      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005e94:	ed9b 6a09 	vldr	s12, [fp, #36]	; 0x24
 8005e98:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8005e9c:	2b0a      	cmp	r3, #10
 8005e9e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005ea2:	d025      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005ea4:	ed9b 6a0a 	vldr	s12, [fp, #40]	; 0x28
 8005ea8:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8005eac:	2b0b      	cmp	r3, #11
 8005eae:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005eb2:	d01d      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005eb4:	ed9b 6a0b 	vldr	s12, [fp, #44]	; 0x2c
 8005eb8:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8005ebc:	2b0c      	cmp	r3, #12
 8005ebe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005ec2:	d015      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005ec4:	ed9b 6a0c 	vldr	s12, [fp, #48]	; 0x30
 8005ec8:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8005ecc:	3b0d      	subs	r3, #13
 8005ece:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005ed2:	d00d      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005ed4:	ed9b 6a0d 	vldr	s12, [fp, #52]	; 0x34
 8005ed8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005ee2:	d005      	beq.n	8005ef0 <forward_lstm+0x15c8>
 8005ee4:	ed9b 6a0e 	vldr	s12, [fp, #56]	; 0x38
 8005ee8:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005eec:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005ef0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ef4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005ef8:	4418      	add	r0, r3
 8005efa:	ed01 7a01 	vstr	s14, [r1, #-4]
 8005efe:	ecb6 6a01 	vldmia	r6!, {s12}
 8005f02:	ecf9 7a01 	vldmia	r9!, {s15}
 8005f06:	ed5a 6a01 	vldr	s13, [sl, #-4]
 8005f0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f0e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005f12:	449c      	add	ip, r3
 8005f14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f1c:	459e      	cmp	lr, r3
 8005f1e:	ed01 7a01 	vstr	s14, [r1, #-4]
 8005f22:	f47f adcc 	bne.w	8005abe <forward_lstm+0x1196>
 8005f26:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8005f2a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8005f2c:	f8d7 60f0 	ldr.w	r6, [r7, #240]	; 0xf0
 8005f30:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8005f34:	4608      	mov	r0, r1
 8005f36:	ee19 3a90 	vmov	r3, s19
 8005f3a:	462a      	mov	r2, r5
 8005f3c:	47a0      	blx	r4
 8005f3e:	ee1a 3a10 	vmov	r3, s20
 8005f42:	462a      	mov	r2, r5
 8005f44:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8005f48:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8005f4a:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8005f4e:	47a0      	blx	r4
 8005f50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f58:	6979      	ldr	r1, [r7, #20]
 8005f5a:	ecf3 7a01 	vldmia	r3!, {s15}
 8005f5e:	ed92 7a00 	vldr	s14, [r2]
 8005f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f66:	428b      	cmp	r3, r1
 8005f68:	ece2 7a01 	vstmia	r2!, {s15}
 8005f6c:	d1f5      	bne.n	8005f5a <forward_lstm+0x1632>
 8005f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f72:	899b      	ldrh	r3, [r3, #12]
 8005f74:	b163      	cbz	r3, 8005f90 <forward_lstm+0x1668>
 8005f76:	e9d7 9503 	ldrd	r9, r5, [r7, #12]
 8005f7a:	2400      	movs	r4, #0
 8005f7c:	46a8      	mov	r8, r5
 8005f7e:	f859 5f04 	ldr.w	r5, [r9, #4]!
 8005f82:	3401      	adds	r4, #1
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	d13e      	bne.n	8006006 <forward_lstm+0x16de>
 8005f88:	42a3      	cmp	r3, r4
 8005f8a:	f108 0804 	add.w	r8, r8, #4
 8005f8e:	dcf6      	bgt.n	8005f7e <forward_lstm+0x1656>
 8005f90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f92:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005f96:	428a      	cmp	r2, r1
 8005f98:	f340 809d 	ble.w	80060d6 <forward_lstm+0x17ae>
 8005f9c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005fa0:	69b9      	ldr	r1, [r7, #24]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005fa8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005fac:	2a00      	cmp	r2, #0
 8005fae:	f2c0 8092 	blt.w	80060d6 <forward_lstm+0x17ae>
 8005fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fba:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8005fbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fc2:	f7fe be6b 	b.w	8004c9c <forward_lstm+0x374>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	4629      	mov	r1, r5
 8005fca:	69d8      	ldr	r0, [r3, #28]
 8005fcc:	f000 fa66 	bl	800649c <st_int8_copy>
 8005fd0:	ee19 2a10 	vmov	r2, s18
 8005fd4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8005fd8:	2000      	movs	r0, #0
 8005fda:	f000 fa03 	bl	80063e4 <st_int8_fill>
 8005fde:	f7fe bda8 	b.w	8004b32 <forward_lstm+0x20a>
 8005fe2:	ee19 2a10 	vmov	r2, s18
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f9fc 	bl	80063e4 <st_int8_fill>
 8005fec:	ee19 2a10 	vmov	r2, s18
 8005ff0:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8005ff4:	4648      	mov	r0, r9
 8005ff6:	f1b9 0f00 	cmp.w	r9, #0
 8005ffa:	f47e ad91 	bne.w	8004b20 <forward_lstm+0x1f8>
 8005ffe:	f000 f9f1 	bl	80063e4 <st_int8_fill>
 8006002:	f7fe bd8f 	b.w	8004b24 <forward_lstm+0x1fc>
 8006006:	f8d8 a000 	ldr.w	sl, [r8]
 800600a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800600e:	ee19 2a10 	vmov	r2, s18
 8006012:	4651      	mov	r1, sl
 8006014:	f000 fa42 	bl	800649c <st_int8_copy>
 8006018:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800601c:	899b      	ldrh	r3, [r3, #12]
 800601e:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 8006022:	42a3      	cmp	r3, r4
 8006024:	f848 5b04 	str.w	r5, [r8], #4
 8006028:	dca9      	bgt.n	8005f7e <forward_lstm+0x1656>
 800602a:	e7b1      	b.n	8005f90 <forward_lstm+0x1668>
 800602c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006030:	f8d7 b0fc 	ldr.w	fp, [r7, #252]	; 0xfc
 8006034:	4662      	mov	r2, ip
 8006036:	e6e5      	b.n	8005e04 <forward_lstm+0x14dc>
 8006038:	4603      	mov	r3, r0
 800603a:	e5d1      	b.n	8005be0 <forward_lstm+0x12b8>
 800603c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006040:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8006044:	465a      	mov	r2, fp
 8006046:	e44d      	b.n	80058e4 <forward_lstm+0xfbc>
 8006048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604c:	f7ff bb54 	b.w	80056f8 <forward_lstm+0xdd0>
 8006050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006054:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8006058:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800605c:	f7ff ba3a 	b.w	80054d4 <forward_lstm+0xbac>
 8006060:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006064:	f7ff b93a 	b.w	80052dc <forward_lstm+0x9b4>
 8006068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800606c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8006070:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8006074:	f7ff b822 	b.w	80050bc <forward_lstm+0x794>
 8006078:	f8d7 50dc 	ldr.w	r5, [r7, #220]	; 0xdc
 800607c:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8006080:	4653      	mov	r3, sl
 8006082:	f7fe bf23 	b.w	8004ecc <forward_lstm+0x5a4>
 8006086:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 800608a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800608c:	ee19 3a90 	vmov	r3, s19
 8006090:	4608      	mov	r0, r1
 8006092:	4690      	mov	r8, r2
 8006094:	47a0      	blx	r4
 8006096:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 800609a:	ee19 3a90 	vmov	r3, s19
 800609e:	4642      	mov	r2, r8
 80060a0:	4608      	mov	r0, r1
 80060a2:	47a0      	blx	r4
 80060a4:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80060a8:	ee1a 3a90 	vmov	r3, s21
 80060ac:	4642      	mov	r2, r8
 80060ae:	4608      	mov	r0, r1
 80060b0:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 80060b2:	47a8      	blx	r5
 80060b4:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 80060b8:	ee19 3a90 	vmov	r3, s19
 80060bc:	4642      	mov	r2, r8
 80060be:	4608      	mov	r0, r1
 80060c0:	47a0      	blx	r4
 80060c2:	ee1a 3a10 	vmov	r3, s20
 80060c6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80060c8:	4642      	mov	r2, r8
 80060ca:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 80060ce:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 80060d2:	47a0      	blx	r4
 80060d4:	e74b      	b.n	8005f6e <forward_lstm+0x1646>
 80060d6:	b353      	cbz	r3, 800612e <forward_lstm+0x1806>
 80060d8:	e9d7 5403 	ldrd	r5, r4, [r7, #12]
 80060dc:	f8d7 8090 	ldr.w	r8, [r7, #144]	; 0x90
 80060e0:	f8d7 9094 	ldr.w	r9, [r7, #148]	; 0x94
 80060e4:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80060e8:	ee19 ba10 	vmov	fp, s18
 80060ec:	2600      	movs	r6, #0
 80060ee:	e00b      	b.n	8006108 <forward_lstm+0x17e0>
 80060f0:	6821      	ldr	r1, [r4, #0]
 80060f2:	465a      	mov	r2, fp
 80060f4:	4648      	mov	r0, r9
 80060f6:	f000 f9d1 	bl	800649c <st_int8_copy>
 80060fa:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80060fe:	3601      	adds	r6, #1
 8006100:	42b3      	cmp	r3, r6
 8006102:	f104 0404 	add.w	r4, r4, #4
 8006106:	dd12      	ble.n	800612e <forward_lstm+0x1806>
 8006108:	f855 2f04 	ldr.w	r2, [r5, #4]!
 800610c:	2a00      	cmp	r2, #0
 800610e:	d1f6      	bne.n	80060fe <forward_lstm+0x17d6>
 8006110:	3b01      	subs	r3, #1
 8006112:	42b3      	cmp	r3, r6
 8006114:	d1ec      	bne.n	80060f0 <forward_lstm+0x17c8>
 8006116:	f89a 303d 	ldrb.w	r3, [sl, #61]	; 0x3d
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0e8      	beq.n	80060f0 <forward_lstm+0x17c8>
 800611e:	6821      	ldr	r1, [r4, #0]
 8006120:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006122:	465a      	mov	r2, fp
 8006124:	f000 f9ba 	bl	800649c <st_int8_copy>
 8006128:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800612c:	e7e7      	b.n	80060fe <forward_lstm+0x17d6>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	b18b      	cbz	r3, 8006156 <forward_lstm+0x182e>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	69dc      	ldr	r4, [r3, #28]
 8006136:	b174      	cbz	r4, 8006156 <forward_lstm+0x182e>
 8006138:	ee19 5a10 	vmov	r5, s18
 800613c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800613e:	ee19 2a10 	vmov	r2, s18
 8006142:	4621      	mov	r1, r4
 8006144:	f000 f9aa 	bl	800649c <st_int8_copy>
 8006148:	ee19 2a10 	vmov	r2, s18
 800614c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006150:	1961      	adds	r1, r4, r5
 8006152:	f000 f9a3 	bl	800649c <st_int8_copy>
 8006156:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 800615a:	46bd      	mov	sp, r7
 800615c:	ecbd 8b06 	vpop	{d8-d10}
 8006160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006168:	2301      	movs	r3, #1
 800616a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800616c:	4613      	mov	r3, r2
 800616e:	f7fe bd00 	b.w	8004b72 <forward_lstm+0x24a>
 8006172:	ee0a 0a10 	vmov	s20, r0
 8006176:	ee09 0a90 	vmov	s19, r0
 800617a:	ee0a 0a90 	vmov	s21, r0
 800617e:	4681      	mov	r9, r0
 8006180:	f7fe bc56 	b.w	8004a30 <forward_lstm+0x108>
 8006184:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8006188:	4683      	mov	fp, r0
 800618a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800618e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8006192:	f7fe bbf4 	b.w	800497e <forward_lstm+0x56>
 8006196:	2300      	movs	r3, #0
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	deff      	udf	#255	; 0xff

0800619c <forward_lite_dense_if32of32wf32>:
 800619c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a0:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 80061a4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80061a8:	4287      	cmp	r7, r0
 80061aa:	f240 8106 	bls.w	80063ba <forward_lite_dense_if32of32wf32+0x21e>
 80061ae:	f1a6 0810 	sub.w	r8, r6, #16
 80061b2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80061b6:	f108 0801 	add.w	r8, r8, #1
 80061ba:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 80061be:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80061c2:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80061c6:	4605      	mov	r5, r0
 80061c8:	f006 0a0f 	and.w	sl, r6, #15
 80061cc:	2e0f      	cmp	r6, #15
 80061ce:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80063e0 <forward_lite_dense_if32of32wf32+0x244>
 80061d2:	f240 8101 	bls.w	80063d8 <forward_lite_dense_if32of32wf32+0x23c>
 80061d6:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80061da:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80061de:	46b6      	mov	lr, r6
 80061e0:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 80061e4:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 80061e8:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 80061ec:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 80061f0:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 80061f4:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 80061f8:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 80061fc:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8006200:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8006204:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8006208:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800620c:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8006210:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8006214:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006218:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800621c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006220:	f1ae 0e10 	sub.w	lr, lr, #16
 8006224:	f1be 0f0f 	cmp.w	lr, #15
 8006228:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800622c:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8006230:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006234:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8006238:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800623c:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8006240:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8006244:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8006248:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800624c:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8006250:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006254:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8006258:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800625c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006260:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8006264:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8006268:	eee3 7a23 	vfma.f32	s15, s6, s7
 800626c:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8006270:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8006274:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006278:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800627c:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8006280:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006284:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8006288:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800628c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006290:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8006294:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8006298:	eee1 7a21 	vfma.f32	s15, s2, s3
 800629c:	eee2 7a22 	vfma.f32	s15, s4, s5
 80062a0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80062a4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80062a8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80062ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 80062b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062b4:	d894      	bhi.n	80061e0 <forward_lite_dense_if32of32wf32+0x44>
 80062b6:	eb02 0e0b 	add.w	lr, r2, fp
 80062ba:	4654      	mov	r4, sl
 80062bc:	46c4      	mov	ip, r8
 80062be:	2c00      	cmp	r4, #0
 80062c0:	d075      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 80062c2:	eddc 6a00 	vldr	s13, [ip]
 80062c6:	edde 7a00 	vldr	s15, [lr]
 80062ca:	2c01      	cmp	r4, #1
 80062cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062d0:	d06d      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 80062d2:	eddc 6a01 	vldr	s13, [ip, #4]
 80062d6:	edde 7a01 	vldr	s15, [lr, #4]
 80062da:	2c02      	cmp	r4, #2
 80062dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062e0:	d065      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 80062e2:	eddc 6a02 	vldr	s13, [ip, #8]
 80062e6:	edde 7a02 	vldr	s15, [lr, #8]
 80062ea:	2c03      	cmp	r4, #3
 80062ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062f0:	d05d      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 80062f2:	eddc 6a03 	vldr	s13, [ip, #12]
 80062f6:	edde 7a03 	vldr	s15, [lr, #12]
 80062fa:	2c04      	cmp	r4, #4
 80062fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006300:	d055      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 8006302:	eddc 6a04 	vldr	s13, [ip, #16]
 8006306:	edde 7a04 	vldr	s15, [lr, #16]
 800630a:	2c05      	cmp	r4, #5
 800630c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006310:	d04d      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 8006312:	eddc 6a05 	vldr	s13, [ip, #20]
 8006316:	edde 7a05 	vldr	s15, [lr, #20]
 800631a:	2c06      	cmp	r4, #6
 800631c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006320:	d045      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 8006322:	eddc 6a06 	vldr	s13, [ip, #24]
 8006326:	edde 7a06 	vldr	s15, [lr, #24]
 800632a:	2c07      	cmp	r4, #7
 800632c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006330:	d03d      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 8006332:	eddc 6a07 	vldr	s13, [ip, #28]
 8006336:	edde 7a07 	vldr	s15, [lr, #28]
 800633a:	2c08      	cmp	r4, #8
 800633c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006340:	d035      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 8006342:	eddc 6a08 	vldr	s13, [ip, #32]
 8006346:	edde 7a08 	vldr	s15, [lr, #32]
 800634a:	2c09      	cmp	r4, #9
 800634c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006350:	d02d      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 8006352:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8006356:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800635a:	2c0a      	cmp	r4, #10
 800635c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006360:	d025      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 8006362:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8006366:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800636a:	2c0b      	cmp	r4, #11
 800636c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006370:	d01d      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 8006372:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8006376:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800637a:	2c0c      	cmp	r4, #12
 800637c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006380:	d015      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 8006382:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8006386:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800638a:	3c0d      	subs	r4, #13
 800638c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006390:	d00d      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 8006392:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8006396:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800639a:	2c01      	cmp	r4, #1
 800639c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063a0:	d005      	beq.n	80063ae <forward_lite_dense_if32of32wf32+0x212>
 80063a2:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80063a6:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80063aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063ae:	444a      	add	r2, r9
 80063b0:	eca5 7a01 	vstmia	r5!, {s14}
 80063b4:	42af      	cmp	r7, r5
 80063b6:	f63f af09 	bhi.w	80061cc <forward_lite_dense_if32of32wf32+0x30>
 80063ba:	b15b      	cbz	r3, 80063d4 <forward_lite_dense_if32of32wf32+0x238>
 80063bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063be:	b14a      	cbz	r2, 80063d4 <forward_lite_dense_if32of32wf32+0x238>
 80063c0:	edd0 7a00 	vldr	s15, [r0]
 80063c4:	ecb3 7a01 	vldmia	r3!, {s14}
 80063c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063cc:	ece0 7a01 	vstmia	r0!, {s15}
 80063d0:	4287      	cmp	r7, r0
 80063d2:	d1f5      	bne.n	80063c0 <forward_lite_dense_if32of32wf32+0x224>
 80063d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d8:	4634      	mov	r4, r6
 80063da:	4696      	mov	lr, r2
 80063dc:	468c      	mov	ip, r1
 80063de:	e76e      	b.n	80062be <forward_lite_dense_if32of32wf32+0x122>
 80063e0:	00000000 	.word	0x00000000

080063e4 <st_int8_fill>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	b2c3      	uxtb	r3, r0
 80063e8:	0204      	lsls	r4, r0, #8
 80063ea:	b2a4      	uxth	r4, r4
 80063ec:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80063f0:	4323      	orrs	r3, r4
 80063f2:	0404      	lsls	r4, r0, #16
 80063f4:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 80063f8:	431c      	orrs	r4, r3
 80063fa:	078b      	lsls	r3, r1, #30
 80063fc:	468c      	mov	ip, r1
 80063fe:	d007      	beq.n	8006410 <st_int8_fill+0x2c>
 8006400:	b3a2      	cbz	r2, 800646c <st_int8_fill+0x88>
 8006402:	f80c 0b01 	strb.w	r0, [ip], #1
 8006406:	f01c 0f03 	tst.w	ip, #3
 800640a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800640e:	d1f7      	bne.n	8006400 <st_int8_fill+0x1c>
 8006410:	0911      	lsrs	r1, r2, #4
 8006412:	d03e      	beq.n	8006492 <st_int8_fill+0xae>
 8006414:	1e4b      	subs	r3, r1, #1
 8006416:	2b04      	cmp	r3, #4
 8006418:	d929      	bls.n	800646e <st_int8_fill+0x8a>
 800641a:	f01c 0f07 	tst.w	ip, #7
 800641e:	d126      	bne.n	800646e <st_int8_fill+0x8a>
 8006420:	f10c 0310 	add.w	r3, ip, #16
 8006424:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8006428:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800642c:	e943 4404 	strd	r4, r4, [r3, #-16]
 8006430:	e943 4402 	strd	r4, r4, [r3, #-8]
 8006434:	3310      	adds	r3, #16
 8006436:	428b      	cmp	r3, r1
 8006438:	d1f8      	bne.n	800642c <st_int8_fill+0x48>
 800643a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800643e:	44f4      	add	ip, lr
 8006440:	f002 0203 	and.w	r2, r2, #3
 8006444:	b15b      	cbz	r3, 800645e <st_int8_fill+0x7a>
 8006446:	1e59      	subs	r1, r3, #1
 8006448:	f8cc 4000 	str.w	r4, [ip]
 800644c:	d005      	beq.n	800645a <st_int8_fill+0x76>
 800644e:	2901      	cmp	r1, #1
 8006450:	f8cc 4004 	str.w	r4, [ip, #4]
 8006454:	bf18      	it	ne
 8006456:	f8cc 4008 	strne.w	r4, [ip, #8]
 800645a:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800645e:	b12a      	cbz	r2, 800646c <st_int8_fill+0x88>
 8006460:	4601      	mov	r1, r0
 8006462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006466:	4660      	mov	r0, ip
 8006468:	f000 bb25 	b.w	8006ab6 <memset>
 800646c:	bd10      	pop	{r4, pc}
 800646e:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8006472:	4663      	mov	r3, ip
 8006474:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8006478:	601c      	str	r4, [r3, #0]
 800647a:	605c      	str	r4, [r3, #4]
 800647c:	609c      	str	r4, [r3, #8]
 800647e:	60dc      	str	r4, [r3, #12]
 8006480:	3310      	adds	r3, #16
 8006482:	4299      	cmp	r1, r3
 8006484:	d1f8      	bne.n	8006478 <st_int8_fill+0x94>
 8006486:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800648a:	44f4      	add	ip, lr
 800648c:	f002 0203 	and.w	r2, r2, #3
 8006490:	e7d8      	b.n	8006444 <st_int8_fill+0x60>
 8006492:	0893      	lsrs	r3, r2, #2
 8006494:	f002 0203 	and.w	r2, r2, #3
 8006498:	e7d4      	b.n	8006444 <st_int8_fill+0x60>
 800649a:	bf00      	nop

0800649c <st_int8_copy>:
 800649c:	4288      	cmp	r0, r1
 800649e:	d057      	beq.n	8006550 <st_int8_copy+0xb4>
 80064a0:	2a00      	cmp	r2, #0
 80064a2:	d055      	beq.n	8006550 <st_int8_copy+0xb4>
 80064a4:	4288      	cmp	r0, r1
 80064a6:	d354      	bcc.n	8006552 <st_int8_copy+0xb6>
 80064a8:	078b      	lsls	r3, r1, #30
 80064aa:	d102      	bne.n	80064b2 <st_int8_copy+0x16>
 80064ac:	e009      	b.n	80064c2 <st_int8_copy+0x26>
 80064ae:	2a00      	cmp	r2, #0
 80064b0:	d05c      	beq.n	800656c <st_int8_copy+0xd0>
 80064b2:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80064b6:	f801 3b01 	strb.w	r3, [r1], #1
 80064ba:	078b      	lsls	r3, r1, #30
 80064bc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80064c0:	d1f5      	bne.n	80064ae <st_int8_copy+0x12>
 80064c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c6:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80064ca:	d069      	beq.n	80065a0 <st_int8_copy+0x104>
 80064cc:	ea41 0300 	orr.w	r3, r1, r0
 80064d0:	075b      	lsls	r3, r3, #29
 80064d2:	d14c      	bne.n	800656e <st_int8_copy+0xd2>
 80064d4:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d948      	bls.n	800656e <st_int8_copy+0xd2>
 80064dc:	f100 0310 	add.w	r3, r0, #16
 80064e0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80064e4:	f101 0c10 	add.w	ip, r1, #16
 80064e8:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80064ec:	ed13 6b04 	vldr	d6, [r3, #-16]
 80064f0:	ed13 7b02 	vldr	d7, [r3, #-8]
 80064f4:	3310      	adds	r3, #16
 80064f6:	4573      	cmp	r3, lr
 80064f8:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80064fc:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8006500:	f10c 0c10 	add.w	ip, ip, #16
 8006504:	d1f2      	bne.n	80064ec <st_int8_copy+0x50>
 8006506:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800650a:	4421      	add	r1, r4
 800650c:	4420      	add	r0, r4
 800650e:	f002 0203 	and.w	r2, r2, #3
 8006512:	b16b      	cbz	r3, 8006530 <st_int8_copy+0x94>
 8006514:	6804      	ldr	r4, [r0, #0]
 8006516:	600c      	str	r4, [r1, #0]
 8006518:	1e5c      	subs	r4, r3, #1
 800651a:	d005      	beq.n	8006528 <st_int8_copy+0x8c>
 800651c:	6845      	ldr	r5, [r0, #4]
 800651e:	604d      	str	r5, [r1, #4]
 8006520:	2c01      	cmp	r4, #1
 8006522:	bf1c      	itt	ne
 8006524:	6884      	ldrne	r4, [r0, #8]
 8006526:	608c      	strne	r4, [r1, #8]
 8006528:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800652c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006530:	b162      	cbz	r2, 800654c <st_int8_copy+0xb0>
 8006532:	f990 3000 	ldrsb.w	r3, [r0]
 8006536:	700b      	strb	r3, [r1, #0]
 8006538:	3a01      	subs	r2, #1
 800653a:	d007      	beq.n	800654c <st_int8_copy+0xb0>
 800653c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8006540:	704b      	strb	r3, [r1, #1]
 8006542:	2a01      	cmp	r2, #1
 8006544:	bf1c      	itt	ne
 8006546:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800654a:	708b      	strbne	r3, [r1, #2]
 800654c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006550:	4770      	bx	lr
 8006552:	1883      	adds	r3, r0, r2
 8006554:	428b      	cmp	r3, r1
 8006556:	d9a7      	bls.n	80064a8 <st_int8_copy+0xc>
 8006558:	4283      	cmp	r3, r0
 800655a:	440a      	add	r2, r1
 800655c:	d9f8      	bls.n	8006550 <st_int8_copy+0xb4>
 800655e:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8006562:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006566:	4283      	cmp	r3, r0
 8006568:	d1f9      	bne.n	800655e <st_int8_copy+0xc2>
 800656a:	4770      	bx	lr
 800656c:	4770      	bx	lr
 800656e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006572:	460b      	mov	r3, r1
 8006574:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8006578:	4684      	mov	ip, r0
 800657a:	f8dc 7000 	ldr.w	r7, [ip]
 800657e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006582:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8006586:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800658a:	f8c3 800c 	str.w	r8, [r3, #12]
 800658e:	601f      	str	r7, [r3, #0]
 8006590:	605e      	str	r6, [r3, #4]
 8006592:	609d      	str	r5, [r3, #8]
 8006594:	3310      	adds	r3, #16
 8006596:	459e      	cmp	lr, r3
 8006598:	f10c 0c10 	add.w	ip, ip, #16
 800659c:	d1ed      	bne.n	800657a <st_int8_copy+0xde>
 800659e:	e7b2      	b.n	8006506 <st_int8_copy+0x6a>
 80065a0:	0893      	lsrs	r3, r2, #2
 80065a2:	f002 0203 	and.w	r2, r2, #3
 80065a6:	e7b4      	b.n	8006512 <st_int8_copy+0x76>

080065a8 <ai_array_to_buffer_fmt>:
 80065a8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d050      	beq.n	8006652 <ai_array_to_buffer_fmt+0xaa>
 80065b0:	4b2a      	ldr	r3, [pc, #168]	; (800665c <ai_array_to_buffer_fmt+0xb4>)
 80065b2:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d00b      	beq.n	80065d2 <ai_array_to_buffer_fmt+0x2a>
 80065ba:	dc1c      	bgt.n	80065f6 <ai_array_to_buffer_fmt+0x4e>
 80065bc:	4b28      	ldr	r3, [pc, #160]	; (8006660 <ai_array_to_buffer_fmt+0xb8>)
 80065be:	429a      	cmp	r2, r3
 80065c0:	d007      	beq.n	80065d2 <ai_array_to_buffer_fmt+0x2a>
 80065c2:	dd0b      	ble.n	80065dc <ai_array_to_buffer_fmt+0x34>
 80065c4:	4b27      	ldr	r3, [pc, #156]	; (8006664 <ai_array_to_buffer_fmt+0xbc>)
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d003      	beq.n	80065d2 <ai_array_to_buffer_fmt+0x2a>
 80065ca:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d131      	bne.n	8006636 <ai_array_to_buffer_fmt+0x8e>
 80065d2:	4613      	mov	r3, r2
 80065d4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80065d8:	4318      	orrs	r0, r3
 80065da:	4770      	bx	lr
 80065dc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d0f6      	beq.n	80065d2 <ai_array_to_buffer_fmt+0x2a>
 80065e4:	dd2c      	ble.n	8006640 <ai_array_to_buffer_fmt+0x98>
 80065e6:	4b20      	ldr	r3, [pc, #128]	; (8006668 <ai_array_to_buffer_fmt+0xc0>)
 80065e8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80065ec:	429a      	cmp	r2, r3
 80065ee:	bf18      	it	ne
 80065f0:	2340      	movne	r3, #64	; 0x40
 80065f2:	4318      	orrs	r0, r3
 80065f4:	4770      	bx	lr
 80065f6:	4b1d      	ldr	r3, [pc, #116]	; (800666c <ai_array_to_buffer_fmt+0xc4>)
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d0ea      	beq.n	80065d2 <ai_array_to_buffer_fmt+0x2a>
 80065fc:	dd0e      	ble.n	800661c <ai_array_to_buffer_fmt+0x74>
 80065fe:	4b1c      	ldr	r3, [pc, #112]	; (8006670 <ai_array_to_buffer_fmt+0xc8>)
 8006600:	429a      	cmp	r2, r3
 8006602:	d0e6      	beq.n	80065d2 <ai_array_to_buffer_fmt+0x2a>
 8006604:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8006608:	429a      	cmp	r2, r3
 800660a:	d0e2      	beq.n	80065d2 <ai_array_to_buffer_fmt+0x2a>
 800660c:	4b19      	ldr	r3, [pc, #100]	; (8006674 <ai_array_to_buffer_fmt+0xcc>)
 800660e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006612:	429a      	cmp	r2, r3
 8006614:	bf18      	it	ne
 8006616:	2340      	movne	r3, #64	; 0x40
 8006618:	4318      	orrs	r0, r3
 800661a:	4770      	bx	lr
 800661c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006620:	429a      	cmp	r2, r3
 8006622:	d0d6      	beq.n	80065d2 <ai_array_to_buffer_fmt+0x2a>
 8006624:	3307      	adds	r3, #7
 8006626:	429a      	cmp	r2, r3
 8006628:	d0d3      	beq.n	80065d2 <ai_array_to_buffer_fmt+0x2a>
 800662a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800662e:	429a      	cmp	r2, r3
 8006630:	bf18      	it	ne
 8006632:	2340      	movne	r3, #64	; 0x40
 8006634:	e7ce      	b.n	80065d4 <ai_array_to_buffer_fmt+0x2c>
 8006636:	4b10      	ldr	r3, [pc, #64]	; (8006678 <ai_array_to_buffer_fmt+0xd0>)
 8006638:	429a      	cmp	r2, r3
 800663a:	bf18      	it	ne
 800663c:	2340      	movne	r3, #64	; 0x40
 800663e:	e7c9      	b.n	80065d4 <ai_array_to_buffer_fmt+0x2c>
 8006640:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006644:	429a      	cmp	r2, r3
 8006646:	d0c4      	beq.n	80065d2 <ai_array_to_buffer_fmt+0x2a>
 8006648:	3380      	adds	r3, #128	; 0x80
 800664a:	429a      	cmp	r2, r3
 800664c:	bf18      	it	ne
 800664e:	2340      	movne	r3, #64	; 0x40
 8006650:	e7c0      	b.n	80065d4 <ai_array_to_buffer_fmt+0x2c>
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <ai_array_to_buffer_fmt+0xd4>)
 8006654:	4003      	ands	r3, r0
 8006656:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800665a:	e7bb      	b.n	80065d4 <ai_array_to_buffer_fmt+0x2c>
 800665c:	00840040 	.word	0x00840040
 8006660:	00040840 	.word	0x00040840
 8006664:	00041040 	.word	0x00041040
 8006668:	00040447 	.word	0x00040447
 800666c:	00840840 	.word	0x00840840
 8006670:	00841040 	.word	0x00841040
 8006674:	0084084f 	.word	0x0084084f
 8006678:	0004084f 	.word	0x0004084f
 800667c:	00803fff 	.word	0x00803fff

08006680 <ai_array_get_byte_size>:
 8006680:	b319      	cbz	r1, 80066ca <ai_array_get_byte_size+0x4a>
 8006682:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006686:	fb03 f101 	mul.w	r1, r3, r1
 800668a:	3107      	adds	r1, #7
 800668c:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8006690:	f021 0307 	bic.w	r3, r1, #7
 8006694:	2a04      	cmp	r2, #4
 8006696:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800669a:	fa23 f101 	lsr.w	r1, r3, r1
 800669e:	ea4f 10e0 	mov.w	r0, r0, asr #7
 80066a2:	d00b      	beq.n	80066bc <ai_array_get_byte_size+0x3c>
 80066a4:	2a08      	cmp	r2, #8
 80066a6:	d002      	beq.n	80066ae <ai_array_get_byte_size+0x2e>
 80066a8:	3107      	adds	r1, #7
 80066aa:	08c8      	lsrs	r0, r1, #3
 80066ac:	4770      	bx	lr
 80066ae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80066b2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80066b6:	3107      	adds	r1, #7
 80066b8:	08c8      	lsrs	r0, r1, #3
 80066ba:	4770      	bx	lr
 80066bc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80066c0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80066c4:	3107      	adds	r1, #7
 80066c6:	08c8      	lsrs	r0, r1, #3
 80066c8:	4770      	bx	lr
 80066ca:	4608      	mov	r0, r1
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop

080066d0 <ai_array_get_data_byte_size>:
 80066d0:	b169      	cbz	r1, 80066ee <ai_array_get_data_byte_size+0x1e>
 80066d2:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80066d6:	fb02 f101 	mul.w	r1, r2, r1
 80066da:	1dcb      	adds	r3, r1, #7
 80066dc:	f023 0307 	bic.w	r3, r3, #7
 80066e0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80066e4:	fa23 f000 	lsr.w	r0, r3, r0
 80066e8:	3007      	adds	r0, #7
 80066ea:	08c0      	lsrs	r0, r0, #3
 80066ec:	4770      	bx	lr
 80066ee:	4608      	mov	r0, r1
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop

080066f4 <ai_version_get>:
 80066f4:	0212      	lsls	r2, r2, #8
 80066f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80066fa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80066fe:	4770      	bx	lr

08006700 <get_tensor_byte_size>:
 8006700:	b410      	push	{r4}
 8006702:	6983      	ldr	r3, [r0, #24]
 8006704:	68c4      	ldr	r4, [r0, #12]
 8006706:	6941      	ldr	r1, [r0, #20]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68e0      	ldr	r0, [r4, #12]
 800670c:	4a07      	ldr	r2, [pc, #28]	; (800672c <get_tensor_byte_size+0x2c>)
 800670e:	68c9      	ldr	r1, [r1, #12]
 8006710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006714:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006718:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800671c:	fb01 f000 	mul.w	r0, r1, r0
 8006720:	4293      	cmp	r3, r2
 8006722:	bf04      	itt	eq
 8006724:	3007      	addeq	r0, #7
 8006726:	08c0      	lsreq	r0, r0, #3
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	000400c0 	.word	0x000400c0

08006730 <sbrk_aligned>:
 8006730:	b570      	push	{r4, r5, r6, lr}
 8006732:	4e0e      	ldr	r6, [pc, #56]	; (800676c <sbrk_aligned+0x3c>)
 8006734:	460c      	mov	r4, r1
 8006736:	6831      	ldr	r1, [r6, #0]
 8006738:	4605      	mov	r5, r0
 800673a:	b911      	cbnz	r1, 8006742 <sbrk_aligned+0x12>
 800673c:	f000 f9f8 	bl	8006b30 <_sbrk_r>
 8006740:	6030      	str	r0, [r6, #0]
 8006742:	4621      	mov	r1, r4
 8006744:	4628      	mov	r0, r5
 8006746:	f000 f9f3 	bl	8006b30 <_sbrk_r>
 800674a:	1c43      	adds	r3, r0, #1
 800674c:	d00a      	beq.n	8006764 <sbrk_aligned+0x34>
 800674e:	1cc4      	adds	r4, r0, #3
 8006750:	f024 0403 	bic.w	r4, r4, #3
 8006754:	42a0      	cmp	r0, r4
 8006756:	d007      	beq.n	8006768 <sbrk_aligned+0x38>
 8006758:	1a21      	subs	r1, r4, r0
 800675a:	4628      	mov	r0, r5
 800675c:	f000 f9e8 	bl	8006b30 <_sbrk_r>
 8006760:	3001      	adds	r0, #1
 8006762:	d101      	bne.n	8006768 <sbrk_aligned+0x38>
 8006764:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006768:	4620      	mov	r0, r4
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	20001020 	.word	0x20001020

08006770 <_malloc_r>:
 8006770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006774:	1ccd      	adds	r5, r1, #3
 8006776:	f025 0503 	bic.w	r5, r5, #3
 800677a:	3508      	adds	r5, #8
 800677c:	2d0c      	cmp	r5, #12
 800677e:	bf38      	it	cc
 8006780:	250c      	movcc	r5, #12
 8006782:	2d00      	cmp	r5, #0
 8006784:	4607      	mov	r7, r0
 8006786:	db01      	blt.n	800678c <_malloc_r+0x1c>
 8006788:	42a9      	cmp	r1, r5
 800678a:	d905      	bls.n	8006798 <_malloc_r+0x28>
 800678c:	230c      	movs	r3, #12
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	2600      	movs	r6, #0
 8006792:	4630      	mov	r0, r6
 8006794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006798:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800686c <_malloc_r+0xfc>
 800679c:	f000 f868 	bl	8006870 <__malloc_lock>
 80067a0:	f8d8 3000 	ldr.w	r3, [r8]
 80067a4:	461c      	mov	r4, r3
 80067a6:	bb5c      	cbnz	r4, 8006800 <_malloc_r+0x90>
 80067a8:	4629      	mov	r1, r5
 80067aa:	4638      	mov	r0, r7
 80067ac:	f7ff ffc0 	bl	8006730 <sbrk_aligned>
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	4604      	mov	r4, r0
 80067b4:	d155      	bne.n	8006862 <_malloc_r+0xf2>
 80067b6:	f8d8 4000 	ldr.w	r4, [r8]
 80067ba:	4626      	mov	r6, r4
 80067bc:	2e00      	cmp	r6, #0
 80067be:	d145      	bne.n	800684c <_malloc_r+0xdc>
 80067c0:	2c00      	cmp	r4, #0
 80067c2:	d048      	beq.n	8006856 <_malloc_r+0xe6>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	4631      	mov	r1, r6
 80067c8:	4638      	mov	r0, r7
 80067ca:	eb04 0903 	add.w	r9, r4, r3
 80067ce:	f000 f9af 	bl	8006b30 <_sbrk_r>
 80067d2:	4581      	cmp	r9, r0
 80067d4:	d13f      	bne.n	8006856 <_malloc_r+0xe6>
 80067d6:	6821      	ldr	r1, [r4, #0]
 80067d8:	1a6d      	subs	r5, r5, r1
 80067da:	4629      	mov	r1, r5
 80067dc:	4638      	mov	r0, r7
 80067de:	f7ff ffa7 	bl	8006730 <sbrk_aligned>
 80067e2:	3001      	adds	r0, #1
 80067e4:	d037      	beq.n	8006856 <_malloc_r+0xe6>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	442b      	add	r3, r5
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	f8d8 3000 	ldr.w	r3, [r8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d038      	beq.n	8006866 <_malloc_r+0xf6>
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	42a2      	cmp	r2, r4
 80067f8:	d12b      	bne.n	8006852 <_malloc_r+0xe2>
 80067fa:	2200      	movs	r2, #0
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	e00f      	b.n	8006820 <_malloc_r+0xb0>
 8006800:	6822      	ldr	r2, [r4, #0]
 8006802:	1b52      	subs	r2, r2, r5
 8006804:	d41f      	bmi.n	8006846 <_malloc_r+0xd6>
 8006806:	2a0b      	cmp	r2, #11
 8006808:	d917      	bls.n	800683a <_malloc_r+0xca>
 800680a:	1961      	adds	r1, r4, r5
 800680c:	42a3      	cmp	r3, r4
 800680e:	6025      	str	r5, [r4, #0]
 8006810:	bf18      	it	ne
 8006812:	6059      	strne	r1, [r3, #4]
 8006814:	6863      	ldr	r3, [r4, #4]
 8006816:	bf08      	it	eq
 8006818:	f8c8 1000 	streq.w	r1, [r8]
 800681c:	5162      	str	r2, [r4, r5]
 800681e:	604b      	str	r3, [r1, #4]
 8006820:	4638      	mov	r0, r7
 8006822:	f104 060b 	add.w	r6, r4, #11
 8006826:	f000 f829 	bl	800687c <__malloc_unlock>
 800682a:	f026 0607 	bic.w	r6, r6, #7
 800682e:	1d23      	adds	r3, r4, #4
 8006830:	1af2      	subs	r2, r6, r3
 8006832:	d0ae      	beq.n	8006792 <_malloc_r+0x22>
 8006834:	1b9b      	subs	r3, r3, r6
 8006836:	50a3      	str	r3, [r4, r2]
 8006838:	e7ab      	b.n	8006792 <_malloc_r+0x22>
 800683a:	42a3      	cmp	r3, r4
 800683c:	6862      	ldr	r2, [r4, #4]
 800683e:	d1dd      	bne.n	80067fc <_malloc_r+0x8c>
 8006840:	f8c8 2000 	str.w	r2, [r8]
 8006844:	e7ec      	b.n	8006820 <_malloc_r+0xb0>
 8006846:	4623      	mov	r3, r4
 8006848:	6864      	ldr	r4, [r4, #4]
 800684a:	e7ac      	b.n	80067a6 <_malloc_r+0x36>
 800684c:	4634      	mov	r4, r6
 800684e:	6876      	ldr	r6, [r6, #4]
 8006850:	e7b4      	b.n	80067bc <_malloc_r+0x4c>
 8006852:	4613      	mov	r3, r2
 8006854:	e7cc      	b.n	80067f0 <_malloc_r+0x80>
 8006856:	230c      	movs	r3, #12
 8006858:	603b      	str	r3, [r7, #0]
 800685a:	4638      	mov	r0, r7
 800685c:	f000 f80e 	bl	800687c <__malloc_unlock>
 8006860:	e797      	b.n	8006792 <_malloc_r+0x22>
 8006862:	6025      	str	r5, [r4, #0]
 8006864:	e7dc      	b.n	8006820 <_malloc_r+0xb0>
 8006866:	605b      	str	r3, [r3, #4]
 8006868:	deff      	udf	#255	; 0xff
 800686a:	bf00      	nop
 800686c:	2000101c 	.word	0x2000101c

08006870 <__malloc_lock>:
 8006870:	4801      	ldr	r0, [pc, #4]	; (8006878 <__malloc_lock+0x8>)
 8006872:	f000 b9aa 	b.w	8006bca <__retarget_lock_acquire_recursive>
 8006876:	bf00      	nop
 8006878:	20001164 	.word	0x20001164

0800687c <__malloc_unlock>:
 800687c:	4801      	ldr	r0, [pc, #4]	; (8006884 <__malloc_unlock+0x8>)
 800687e:	f000 b9a5 	b.w	8006bcc <__retarget_lock_release_recursive>
 8006882:	bf00      	nop
 8006884:	20001164 	.word	0x20001164

08006888 <std>:
 8006888:	2300      	movs	r3, #0
 800688a:	b510      	push	{r4, lr}
 800688c:	4604      	mov	r4, r0
 800688e:	e9c0 3300 	strd	r3, r3, [r0]
 8006892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006896:	6083      	str	r3, [r0, #8]
 8006898:	8181      	strh	r1, [r0, #12]
 800689a:	6643      	str	r3, [r0, #100]	; 0x64
 800689c:	81c2      	strh	r2, [r0, #14]
 800689e:	6183      	str	r3, [r0, #24]
 80068a0:	4619      	mov	r1, r3
 80068a2:	2208      	movs	r2, #8
 80068a4:	305c      	adds	r0, #92	; 0x5c
 80068a6:	f000 f906 	bl	8006ab6 <memset>
 80068aa:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <std+0x58>)
 80068ac:	6263      	str	r3, [r4, #36]	; 0x24
 80068ae:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <std+0x5c>)
 80068b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80068b2:	4b0d      	ldr	r3, [pc, #52]	; (80068e8 <std+0x60>)
 80068b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068b6:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <std+0x64>)
 80068b8:	6323      	str	r3, [r4, #48]	; 0x30
 80068ba:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <std+0x68>)
 80068bc:	6224      	str	r4, [r4, #32]
 80068be:	429c      	cmp	r4, r3
 80068c0:	d006      	beq.n	80068d0 <std+0x48>
 80068c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80068c6:	4294      	cmp	r4, r2
 80068c8:	d002      	beq.n	80068d0 <std+0x48>
 80068ca:	33d0      	adds	r3, #208	; 0xd0
 80068cc:	429c      	cmp	r4, r3
 80068ce:	d105      	bne.n	80068dc <std+0x54>
 80068d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d8:	f000 b976 	b.w	8006bc8 <__retarget_lock_init_recursive>
 80068dc:	bd10      	pop	{r4, pc}
 80068de:	bf00      	nop
 80068e0:	08006a31 	.word	0x08006a31
 80068e4:	08006a53 	.word	0x08006a53
 80068e8:	08006a8b 	.word	0x08006a8b
 80068ec:	08006aaf 	.word	0x08006aaf
 80068f0:	20001024 	.word	0x20001024

080068f4 <stdio_exit_handler>:
 80068f4:	4a02      	ldr	r2, [pc, #8]	; (8006900 <stdio_exit_handler+0xc>)
 80068f6:	4903      	ldr	r1, [pc, #12]	; (8006904 <stdio_exit_handler+0x10>)
 80068f8:	4803      	ldr	r0, [pc, #12]	; (8006908 <stdio_exit_handler+0x14>)
 80068fa:	f000 b869 	b.w	80069d0 <_fwalk_sglue>
 80068fe:	bf00      	nop
 8006900:	200005dc 	.word	0x200005dc
 8006904:	0800731d 	.word	0x0800731d
 8006908:	200005e8 	.word	0x200005e8

0800690c <cleanup_stdio>:
 800690c:	6841      	ldr	r1, [r0, #4]
 800690e:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <cleanup_stdio+0x34>)
 8006910:	4299      	cmp	r1, r3
 8006912:	b510      	push	{r4, lr}
 8006914:	4604      	mov	r4, r0
 8006916:	d001      	beq.n	800691c <cleanup_stdio+0x10>
 8006918:	f000 fd00 	bl	800731c <_fflush_r>
 800691c:	68a1      	ldr	r1, [r4, #8]
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <cleanup_stdio+0x38>)
 8006920:	4299      	cmp	r1, r3
 8006922:	d002      	beq.n	800692a <cleanup_stdio+0x1e>
 8006924:	4620      	mov	r0, r4
 8006926:	f000 fcf9 	bl	800731c <_fflush_r>
 800692a:	68e1      	ldr	r1, [r4, #12]
 800692c:	4b06      	ldr	r3, [pc, #24]	; (8006948 <cleanup_stdio+0x3c>)
 800692e:	4299      	cmp	r1, r3
 8006930:	d004      	beq.n	800693c <cleanup_stdio+0x30>
 8006932:	4620      	mov	r0, r4
 8006934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006938:	f000 bcf0 	b.w	800731c <_fflush_r>
 800693c:	bd10      	pop	{r4, pc}
 800693e:	bf00      	nop
 8006940:	20001024 	.word	0x20001024
 8006944:	2000108c 	.word	0x2000108c
 8006948:	200010f4 	.word	0x200010f4

0800694c <global_stdio_init.part.0>:
 800694c:	b510      	push	{r4, lr}
 800694e:	4b0b      	ldr	r3, [pc, #44]	; (800697c <global_stdio_init.part.0+0x30>)
 8006950:	4c0b      	ldr	r4, [pc, #44]	; (8006980 <global_stdio_init.part.0+0x34>)
 8006952:	4a0c      	ldr	r2, [pc, #48]	; (8006984 <global_stdio_init.part.0+0x38>)
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	4620      	mov	r0, r4
 8006958:	2200      	movs	r2, #0
 800695a:	2104      	movs	r1, #4
 800695c:	f7ff ff94 	bl	8006888 <std>
 8006960:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006964:	2201      	movs	r2, #1
 8006966:	2109      	movs	r1, #9
 8006968:	f7ff ff8e 	bl	8006888 <std>
 800696c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006970:	2202      	movs	r2, #2
 8006972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006976:	2112      	movs	r1, #18
 8006978:	f7ff bf86 	b.w	8006888 <std>
 800697c:	2000115c 	.word	0x2000115c
 8006980:	20001024 	.word	0x20001024
 8006984:	080068f5 	.word	0x080068f5

08006988 <__sfp_lock_acquire>:
 8006988:	4801      	ldr	r0, [pc, #4]	; (8006990 <__sfp_lock_acquire+0x8>)
 800698a:	f000 b91e 	b.w	8006bca <__retarget_lock_acquire_recursive>
 800698e:	bf00      	nop
 8006990:	20001165 	.word	0x20001165

08006994 <__sfp_lock_release>:
 8006994:	4801      	ldr	r0, [pc, #4]	; (800699c <__sfp_lock_release+0x8>)
 8006996:	f000 b919 	b.w	8006bcc <__retarget_lock_release_recursive>
 800699a:	bf00      	nop
 800699c:	20001165 	.word	0x20001165

080069a0 <__sinit>:
 80069a0:	b510      	push	{r4, lr}
 80069a2:	4604      	mov	r4, r0
 80069a4:	f7ff fff0 	bl	8006988 <__sfp_lock_acquire>
 80069a8:	6a23      	ldr	r3, [r4, #32]
 80069aa:	b11b      	cbz	r3, 80069b4 <__sinit+0x14>
 80069ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069b0:	f7ff bff0 	b.w	8006994 <__sfp_lock_release>
 80069b4:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <__sinit+0x28>)
 80069b6:	6223      	str	r3, [r4, #32]
 80069b8:	4b04      	ldr	r3, [pc, #16]	; (80069cc <__sinit+0x2c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1f5      	bne.n	80069ac <__sinit+0xc>
 80069c0:	f7ff ffc4 	bl	800694c <global_stdio_init.part.0>
 80069c4:	e7f2      	b.n	80069ac <__sinit+0xc>
 80069c6:	bf00      	nop
 80069c8:	0800690d 	.word	0x0800690d
 80069cc:	2000115c 	.word	0x2000115c

080069d0 <_fwalk_sglue>:
 80069d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d4:	4607      	mov	r7, r0
 80069d6:	4688      	mov	r8, r1
 80069d8:	4614      	mov	r4, r2
 80069da:	2600      	movs	r6, #0
 80069dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069e0:	f1b9 0901 	subs.w	r9, r9, #1
 80069e4:	d505      	bpl.n	80069f2 <_fwalk_sglue+0x22>
 80069e6:	6824      	ldr	r4, [r4, #0]
 80069e8:	2c00      	cmp	r4, #0
 80069ea:	d1f7      	bne.n	80069dc <_fwalk_sglue+0xc>
 80069ec:	4630      	mov	r0, r6
 80069ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f2:	89ab      	ldrh	r3, [r5, #12]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d907      	bls.n	8006a08 <_fwalk_sglue+0x38>
 80069f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069fc:	3301      	adds	r3, #1
 80069fe:	d003      	beq.n	8006a08 <_fwalk_sglue+0x38>
 8006a00:	4629      	mov	r1, r5
 8006a02:	4638      	mov	r0, r7
 8006a04:	47c0      	blx	r8
 8006a06:	4306      	orrs	r6, r0
 8006a08:	3568      	adds	r5, #104	; 0x68
 8006a0a:	e7e9      	b.n	80069e0 <_fwalk_sglue+0x10>

08006a0c <iprintf>:
 8006a0c:	b40f      	push	{r0, r1, r2, r3}
 8006a0e:	b507      	push	{r0, r1, r2, lr}
 8006a10:	4906      	ldr	r1, [pc, #24]	; (8006a2c <iprintf+0x20>)
 8006a12:	ab04      	add	r3, sp, #16
 8006a14:	6808      	ldr	r0, [r1, #0]
 8006a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a1a:	6881      	ldr	r1, [r0, #8]
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	f000 f94d 	bl	8006cbc <_vfiprintf_r>
 8006a22:	b003      	add	sp, #12
 8006a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a28:	b004      	add	sp, #16
 8006a2a:	4770      	bx	lr
 8006a2c:	20000634 	.word	0x20000634

08006a30 <__sread>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	460c      	mov	r4, r1
 8006a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a38:	f000 f868 	bl	8006b0c <_read_r>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	bfab      	itete	ge
 8006a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a42:	89a3      	ldrhlt	r3, [r4, #12]
 8006a44:	181b      	addge	r3, r3, r0
 8006a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a4a:	bfac      	ite	ge
 8006a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a4e:	81a3      	strhlt	r3, [r4, #12]
 8006a50:	bd10      	pop	{r4, pc}

08006a52 <__swrite>:
 8006a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a56:	461f      	mov	r7, r3
 8006a58:	898b      	ldrh	r3, [r1, #12]
 8006a5a:	05db      	lsls	r3, r3, #23
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	4616      	mov	r6, r2
 8006a62:	d505      	bpl.n	8006a70 <__swrite+0x1e>
 8006a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a68:	2302      	movs	r3, #2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f000 f83c 	bl	8006ae8 <_lseek_r>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	463b      	mov	r3, r7
 8006a80:	4628      	mov	r0, r5
 8006a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a86:	f000 b863 	b.w	8006b50 <_write_r>

08006a8a <__sseek>:
 8006a8a:	b510      	push	{r4, lr}
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a92:	f000 f829 	bl	8006ae8 <_lseek_r>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	bf15      	itete	ne
 8006a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aa6:	81a3      	strheq	r3, [r4, #12]
 8006aa8:	bf18      	it	ne
 8006aaa:	81a3      	strhne	r3, [r4, #12]
 8006aac:	bd10      	pop	{r4, pc}

08006aae <__sclose>:
 8006aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab2:	f000 b809 	b.w	8006ac8 <_close_r>

08006ab6 <memset>:
 8006ab6:	4402      	add	r2, r0
 8006ab8:	4603      	mov	r3, r0
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d100      	bne.n	8006ac0 <memset+0xa>
 8006abe:	4770      	bx	lr
 8006ac0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac4:	e7f9      	b.n	8006aba <memset+0x4>
	...

08006ac8 <_close_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	4d06      	ldr	r5, [pc, #24]	; (8006ae4 <_close_r+0x1c>)
 8006acc:	2300      	movs	r3, #0
 8006ace:	4604      	mov	r4, r0
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	602b      	str	r3, [r5, #0]
 8006ad4:	f7f9 fe69 	bl	80007aa <_close>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d102      	bne.n	8006ae2 <_close_r+0x1a>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b103      	cbz	r3, 8006ae2 <_close_r+0x1a>
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	20001160 	.word	0x20001160

08006ae8 <_lseek_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4d07      	ldr	r5, [pc, #28]	; (8006b08 <_lseek_r+0x20>)
 8006aec:	4604      	mov	r4, r0
 8006aee:	4608      	mov	r0, r1
 8006af0:	4611      	mov	r1, r2
 8006af2:	2200      	movs	r2, #0
 8006af4:	602a      	str	r2, [r5, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	f7f9 fe7e 	bl	80007f8 <_lseek>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d102      	bne.n	8006b06 <_lseek_r+0x1e>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	b103      	cbz	r3, 8006b06 <_lseek_r+0x1e>
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	20001160 	.word	0x20001160

08006b0c <_read_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	4d07      	ldr	r5, [pc, #28]	; (8006b2c <_read_r+0x20>)
 8006b10:	4604      	mov	r4, r0
 8006b12:	4608      	mov	r0, r1
 8006b14:	4611      	mov	r1, r2
 8006b16:	2200      	movs	r2, #0
 8006b18:	602a      	str	r2, [r5, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f7f9 fe0c 	bl	8000738 <_read>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d102      	bne.n	8006b2a <_read_r+0x1e>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	b103      	cbz	r3, 8006b2a <_read_r+0x1e>
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	20001160 	.word	0x20001160

08006b30 <_sbrk_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	4d06      	ldr	r5, [pc, #24]	; (8006b4c <_sbrk_r+0x1c>)
 8006b34:	2300      	movs	r3, #0
 8006b36:	4604      	mov	r4, r0
 8006b38:	4608      	mov	r0, r1
 8006b3a:	602b      	str	r3, [r5, #0]
 8006b3c:	f7f9 fe6a 	bl	8000814 <_sbrk>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_sbrk_r+0x1a>
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_sbrk_r+0x1a>
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	20001160 	.word	0x20001160

08006b50 <_write_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	4d07      	ldr	r5, [pc, #28]	; (8006b70 <_write_r+0x20>)
 8006b54:	4604      	mov	r4, r0
 8006b56:	4608      	mov	r0, r1
 8006b58:	4611      	mov	r1, r2
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	602a      	str	r2, [r5, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f7f9 fe07 	bl	8000772 <_write>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d102      	bne.n	8006b6e <_write_r+0x1e>
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	b103      	cbz	r3, 8006b6e <_write_r+0x1e>
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	20001160 	.word	0x20001160

08006b74 <__errno>:
 8006b74:	4b01      	ldr	r3, [pc, #4]	; (8006b7c <__errno+0x8>)
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	20000634 	.word	0x20000634

08006b80 <__libc_init_array>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	4d0d      	ldr	r5, [pc, #52]	; (8006bb8 <__libc_init_array+0x38>)
 8006b84:	4c0d      	ldr	r4, [pc, #52]	; (8006bbc <__libc_init_array+0x3c>)
 8006b86:	1b64      	subs	r4, r4, r5
 8006b88:	10a4      	asrs	r4, r4, #2
 8006b8a:	2600      	movs	r6, #0
 8006b8c:	42a6      	cmp	r6, r4
 8006b8e:	d109      	bne.n	8006ba4 <__libc_init_array+0x24>
 8006b90:	4d0b      	ldr	r5, [pc, #44]	; (8006bc0 <__libc_init_array+0x40>)
 8006b92:	4c0c      	ldr	r4, [pc, #48]	; (8006bc4 <__libc_init_array+0x44>)
 8006b94:	f000 ffc6 	bl	8007b24 <_init>
 8006b98:	1b64      	subs	r4, r4, r5
 8006b9a:	10a4      	asrs	r4, r4, #2
 8006b9c:	2600      	movs	r6, #0
 8006b9e:	42a6      	cmp	r6, r4
 8006ba0:	d105      	bne.n	8006bae <__libc_init_array+0x2e>
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba8:	4798      	blx	r3
 8006baa:	3601      	adds	r6, #1
 8006bac:	e7ee      	b.n	8006b8c <__libc_init_array+0xc>
 8006bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb2:	4798      	blx	r3
 8006bb4:	3601      	adds	r6, #1
 8006bb6:	e7f2      	b.n	8006b9e <__libc_init_array+0x1e>
 8006bb8:	0800c2b4 	.word	0x0800c2b4
 8006bbc:	0800c2b4 	.word	0x0800c2b4
 8006bc0:	0800c2b4 	.word	0x0800c2b4
 8006bc4:	0800c2b8 	.word	0x0800c2b8

08006bc8 <__retarget_lock_init_recursive>:
 8006bc8:	4770      	bx	lr

08006bca <__retarget_lock_acquire_recursive>:
 8006bca:	4770      	bx	lr

08006bcc <__retarget_lock_release_recursive>:
 8006bcc:	4770      	bx	lr
	...

08006bd0 <_free_r>:
 8006bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bd2:	2900      	cmp	r1, #0
 8006bd4:	d044      	beq.n	8006c60 <_free_r+0x90>
 8006bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bda:	9001      	str	r0, [sp, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f1a1 0404 	sub.w	r4, r1, #4
 8006be2:	bfb8      	it	lt
 8006be4:	18e4      	addlt	r4, r4, r3
 8006be6:	f7ff fe43 	bl	8006870 <__malloc_lock>
 8006bea:	4a1e      	ldr	r2, [pc, #120]	; (8006c64 <_free_r+0x94>)
 8006bec:	9801      	ldr	r0, [sp, #4]
 8006bee:	6813      	ldr	r3, [r2, #0]
 8006bf0:	b933      	cbnz	r3, 8006c00 <_free_r+0x30>
 8006bf2:	6063      	str	r3, [r4, #4]
 8006bf4:	6014      	str	r4, [r2, #0]
 8006bf6:	b003      	add	sp, #12
 8006bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bfc:	f7ff be3e 	b.w	800687c <__malloc_unlock>
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	d908      	bls.n	8006c16 <_free_r+0x46>
 8006c04:	6825      	ldr	r5, [r4, #0]
 8006c06:	1961      	adds	r1, r4, r5
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	bf01      	itttt	eq
 8006c0c:	6819      	ldreq	r1, [r3, #0]
 8006c0e:	685b      	ldreq	r3, [r3, #4]
 8006c10:	1949      	addeq	r1, r1, r5
 8006c12:	6021      	streq	r1, [r4, #0]
 8006c14:	e7ed      	b.n	8006bf2 <_free_r+0x22>
 8006c16:	461a      	mov	r2, r3
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	b10b      	cbz	r3, 8006c20 <_free_r+0x50>
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	d9fa      	bls.n	8006c16 <_free_r+0x46>
 8006c20:	6811      	ldr	r1, [r2, #0]
 8006c22:	1855      	adds	r5, r2, r1
 8006c24:	42a5      	cmp	r5, r4
 8006c26:	d10b      	bne.n	8006c40 <_free_r+0x70>
 8006c28:	6824      	ldr	r4, [r4, #0]
 8006c2a:	4421      	add	r1, r4
 8006c2c:	1854      	adds	r4, r2, r1
 8006c2e:	42a3      	cmp	r3, r4
 8006c30:	6011      	str	r1, [r2, #0]
 8006c32:	d1e0      	bne.n	8006bf6 <_free_r+0x26>
 8006c34:	681c      	ldr	r4, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	6053      	str	r3, [r2, #4]
 8006c3a:	440c      	add	r4, r1
 8006c3c:	6014      	str	r4, [r2, #0]
 8006c3e:	e7da      	b.n	8006bf6 <_free_r+0x26>
 8006c40:	d902      	bls.n	8006c48 <_free_r+0x78>
 8006c42:	230c      	movs	r3, #12
 8006c44:	6003      	str	r3, [r0, #0]
 8006c46:	e7d6      	b.n	8006bf6 <_free_r+0x26>
 8006c48:	6825      	ldr	r5, [r4, #0]
 8006c4a:	1961      	adds	r1, r4, r5
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	bf04      	itt	eq
 8006c50:	6819      	ldreq	r1, [r3, #0]
 8006c52:	685b      	ldreq	r3, [r3, #4]
 8006c54:	6063      	str	r3, [r4, #4]
 8006c56:	bf04      	itt	eq
 8006c58:	1949      	addeq	r1, r1, r5
 8006c5a:	6021      	streq	r1, [r4, #0]
 8006c5c:	6054      	str	r4, [r2, #4]
 8006c5e:	e7ca      	b.n	8006bf6 <_free_r+0x26>
 8006c60:	b003      	add	sp, #12
 8006c62:	bd30      	pop	{r4, r5, pc}
 8006c64:	2000101c 	.word	0x2000101c

08006c68 <__sfputc_r>:
 8006c68:	6893      	ldr	r3, [r2, #8]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	b410      	push	{r4}
 8006c70:	6093      	str	r3, [r2, #8]
 8006c72:	da08      	bge.n	8006c86 <__sfputc_r+0x1e>
 8006c74:	6994      	ldr	r4, [r2, #24]
 8006c76:	42a3      	cmp	r3, r4
 8006c78:	db01      	blt.n	8006c7e <__sfputc_r+0x16>
 8006c7a:	290a      	cmp	r1, #10
 8006c7c:	d103      	bne.n	8006c86 <__sfputc_r+0x1e>
 8006c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c82:	f000 bb73 	b.w	800736c <__swbuf_r>
 8006c86:	6813      	ldr	r3, [r2, #0]
 8006c88:	1c58      	adds	r0, r3, #1
 8006c8a:	6010      	str	r0, [r2, #0]
 8006c8c:	7019      	strb	r1, [r3, #0]
 8006c8e:	4608      	mov	r0, r1
 8006c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <__sfputs_r>:
 8006c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c98:	4606      	mov	r6, r0
 8006c9a:	460f      	mov	r7, r1
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	18d5      	adds	r5, r2, r3
 8006ca0:	42ac      	cmp	r4, r5
 8006ca2:	d101      	bne.n	8006ca8 <__sfputs_r+0x12>
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	e007      	b.n	8006cb8 <__sfputs_r+0x22>
 8006ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cac:	463a      	mov	r2, r7
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f7ff ffda 	bl	8006c68 <__sfputc_r>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	d1f3      	bne.n	8006ca0 <__sfputs_r+0xa>
 8006cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cbc <_vfiprintf_r>:
 8006cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc0:	460d      	mov	r5, r1
 8006cc2:	b09d      	sub	sp, #116	; 0x74
 8006cc4:	4614      	mov	r4, r2
 8006cc6:	4698      	mov	r8, r3
 8006cc8:	4606      	mov	r6, r0
 8006cca:	b118      	cbz	r0, 8006cd4 <_vfiprintf_r+0x18>
 8006ccc:	6a03      	ldr	r3, [r0, #32]
 8006cce:	b90b      	cbnz	r3, 8006cd4 <_vfiprintf_r+0x18>
 8006cd0:	f7ff fe66 	bl	80069a0 <__sinit>
 8006cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cd6:	07d9      	lsls	r1, r3, #31
 8006cd8:	d405      	bmi.n	8006ce6 <_vfiprintf_r+0x2a>
 8006cda:	89ab      	ldrh	r3, [r5, #12]
 8006cdc:	059a      	lsls	r2, r3, #22
 8006cde:	d402      	bmi.n	8006ce6 <_vfiprintf_r+0x2a>
 8006ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ce2:	f7ff ff72 	bl	8006bca <__retarget_lock_acquire_recursive>
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	071b      	lsls	r3, r3, #28
 8006cea:	d501      	bpl.n	8006cf0 <_vfiprintf_r+0x34>
 8006cec:	692b      	ldr	r3, [r5, #16]
 8006cee:	b99b      	cbnz	r3, 8006d18 <_vfiprintf_r+0x5c>
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f000 fb78 	bl	80073e8 <__swsetup_r>
 8006cf8:	b170      	cbz	r0, 8006d18 <_vfiprintf_r+0x5c>
 8006cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cfc:	07dc      	lsls	r4, r3, #31
 8006cfe:	d504      	bpl.n	8006d0a <_vfiprintf_r+0x4e>
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d04:	b01d      	add	sp, #116	; 0x74
 8006d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0a:	89ab      	ldrh	r3, [r5, #12]
 8006d0c:	0598      	lsls	r0, r3, #22
 8006d0e:	d4f7      	bmi.n	8006d00 <_vfiprintf_r+0x44>
 8006d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d12:	f7ff ff5b 	bl	8006bcc <__retarget_lock_release_recursive>
 8006d16:	e7f3      	b.n	8006d00 <_vfiprintf_r+0x44>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d1c:	2320      	movs	r3, #32
 8006d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d22:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d26:	2330      	movs	r3, #48	; 0x30
 8006d28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006edc <_vfiprintf_r+0x220>
 8006d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d30:	f04f 0901 	mov.w	r9, #1
 8006d34:	4623      	mov	r3, r4
 8006d36:	469a      	mov	sl, r3
 8006d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d3c:	b10a      	cbz	r2, 8006d42 <_vfiprintf_r+0x86>
 8006d3e:	2a25      	cmp	r2, #37	; 0x25
 8006d40:	d1f9      	bne.n	8006d36 <_vfiprintf_r+0x7a>
 8006d42:	ebba 0b04 	subs.w	fp, sl, r4
 8006d46:	d00b      	beq.n	8006d60 <_vfiprintf_r+0xa4>
 8006d48:	465b      	mov	r3, fp
 8006d4a:	4622      	mov	r2, r4
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f7ff ffa1 	bl	8006c96 <__sfputs_r>
 8006d54:	3001      	adds	r0, #1
 8006d56:	f000 80a9 	beq.w	8006eac <_vfiprintf_r+0x1f0>
 8006d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d5c:	445a      	add	r2, fp
 8006d5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d60:	f89a 3000 	ldrb.w	r3, [sl]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 80a1 	beq.w	8006eac <_vfiprintf_r+0x1f0>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d74:	f10a 0a01 	add.w	sl, sl, #1
 8006d78:	9304      	str	r3, [sp, #16]
 8006d7a:	9307      	str	r3, [sp, #28]
 8006d7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d80:	931a      	str	r3, [sp, #104]	; 0x68
 8006d82:	4654      	mov	r4, sl
 8006d84:	2205      	movs	r2, #5
 8006d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d8a:	4854      	ldr	r0, [pc, #336]	; (8006edc <_vfiprintf_r+0x220>)
 8006d8c:	f7f9 fa20 	bl	80001d0 <memchr>
 8006d90:	9a04      	ldr	r2, [sp, #16]
 8006d92:	b9d8      	cbnz	r0, 8006dcc <_vfiprintf_r+0x110>
 8006d94:	06d1      	lsls	r1, r2, #27
 8006d96:	bf44      	itt	mi
 8006d98:	2320      	movmi	r3, #32
 8006d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d9e:	0713      	lsls	r3, r2, #28
 8006da0:	bf44      	itt	mi
 8006da2:	232b      	movmi	r3, #43	; 0x2b
 8006da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006da8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dac:	2b2a      	cmp	r3, #42	; 0x2a
 8006dae:	d015      	beq.n	8006ddc <_vfiprintf_r+0x120>
 8006db0:	9a07      	ldr	r2, [sp, #28]
 8006db2:	4654      	mov	r4, sl
 8006db4:	2000      	movs	r0, #0
 8006db6:	f04f 0c0a 	mov.w	ip, #10
 8006dba:	4621      	mov	r1, r4
 8006dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dc0:	3b30      	subs	r3, #48	; 0x30
 8006dc2:	2b09      	cmp	r3, #9
 8006dc4:	d94d      	bls.n	8006e62 <_vfiprintf_r+0x1a6>
 8006dc6:	b1b0      	cbz	r0, 8006df6 <_vfiprintf_r+0x13a>
 8006dc8:	9207      	str	r2, [sp, #28]
 8006dca:	e014      	b.n	8006df6 <_vfiprintf_r+0x13a>
 8006dcc:	eba0 0308 	sub.w	r3, r0, r8
 8006dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	9304      	str	r3, [sp, #16]
 8006dd8:	46a2      	mov	sl, r4
 8006dda:	e7d2      	b.n	8006d82 <_vfiprintf_r+0xc6>
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	1d19      	adds	r1, r3, #4
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	9103      	str	r1, [sp, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bfbb      	ittet	lt
 8006de8:	425b      	neglt	r3, r3
 8006dea:	f042 0202 	orrlt.w	r2, r2, #2
 8006dee:	9307      	strge	r3, [sp, #28]
 8006df0:	9307      	strlt	r3, [sp, #28]
 8006df2:	bfb8      	it	lt
 8006df4:	9204      	strlt	r2, [sp, #16]
 8006df6:	7823      	ldrb	r3, [r4, #0]
 8006df8:	2b2e      	cmp	r3, #46	; 0x2e
 8006dfa:	d10c      	bne.n	8006e16 <_vfiprintf_r+0x15a>
 8006dfc:	7863      	ldrb	r3, [r4, #1]
 8006dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8006e00:	d134      	bne.n	8006e6c <_vfiprintf_r+0x1b0>
 8006e02:	9b03      	ldr	r3, [sp, #12]
 8006e04:	1d1a      	adds	r2, r3, #4
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	9203      	str	r2, [sp, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	bfb8      	it	lt
 8006e0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e12:	3402      	adds	r4, #2
 8006e14:	9305      	str	r3, [sp, #20]
 8006e16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006eec <_vfiprintf_r+0x230>
 8006e1a:	7821      	ldrb	r1, [r4, #0]
 8006e1c:	2203      	movs	r2, #3
 8006e1e:	4650      	mov	r0, sl
 8006e20:	f7f9 f9d6 	bl	80001d0 <memchr>
 8006e24:	b138      	cbz	r0, 8006e36 <_vfiprintf_r+0x17a>
 8006e26:	9b04      	ldr	r3, [sp, #16]
 8006e28:	eba0 000a 	sub.w	r0, r0, sl
 8006e2c:	2240      	movs	r2, #64	; 0x40
 8006e2e:	4082      	lsls	r2, r0
 8006e30:	4313      	orrs	r3, r2
 8006e32:	3401      	adds	r4, #1
 8006e34:	9304      	str	r3, [sp, #16]
 8006e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e3a:	4829      	ldr	r0, [pc, #164]	; (8006ee0 <_vfiprintf_r+0x224>)
 8006e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e40:	2206      	movs	r2, #6
 8006e42:	f7f9 f9c5 	bl	80001d0 <memchr>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d03f      	beq.n	8006eca <_vfiprintf_r+0x20e>
 8006e4a:	4b26      	ldr	r3, [pc, #152]	; (8006ee4 <_vfiprintf_r+0x228>)
 8006e4c:	bb1b      	cbnz	r3, 8006e96 <_vfiprintf_r+0x1da>
 8006e4e:	9b03      	ldr	r3, [sp, #12]
 8006e50:	3307      	adds	r3, #7
 8006e52:	f023 0307 	bic.w	r3, r3, #7
 8006e56:	3308      	adds	r3, #8
 8006e58:	9303      	str	r3, [sp, #12]
 8006e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5c:	443b      	add	r3, r7
 8006e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e60:	e768      	b.n	8006d34 <_vfiprintf_r+0x78>
 8006e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e66:	460c      	mov	r4, r1
 8006e68:	2001      	movs	r0, #1
 8006e6a:	e7a6      	b.n	8006dba <_vfiprintf_r+0xfe>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	3401      	adds	r4, #1
 8006e70:	9305      	str	r3, [sp, #20]
 8006e72:	4619      	mov	r1, r3
 8006e74:	f04f 0c0a 	mov.w	ip, #10
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e7e:	3a30      	subs	r2, #48	; 0x30
 8006e80:	2a09      	cmp	r2, #9
 8006e82:	d903      	bls.n	8006e8c <_vfiprintf_r+0x1d0>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0c6      	beq.n	8006e16 <_vfiprintf_r+0x15a>
 8006e88:	9105      	str	r1, [sp, #20]
 8006e8a:	e7c4      	b.n	8006e16 <_vfiprintf_r+0x15a>
 8006e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e90:	4604      	mov	r4, r0
 8006e92:	2301      	movs	r3, #1
 8006e94:	e7f0      	b.n	8006e78 <_vfiprintf_r+0x1bc>
 8006e96:	ab03      	add	r3, sp, #12
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	462a      	mov	r2, r5
 8006e9c:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <_vfiprintf_r+0x22c>)
 8006e9e:	a904      	add	r1, sp, #16
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	f3af 8000 	nop.w
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	1c78      	adds	r0, r7, #1
 8006eaa:	d1d6      	bne.n	8006e5a <_vfiprintf_r+0x19e>
 8006eac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eae:	07d9      	lsls	r1, r3, #31
 8006eb0:	d405      	bmi.n	8006ebe <_vfiprintf_r+0x202>
 8006eb2:	89ab      	ldrh	r3, [r5, #12]
 8006eb4:	059a      	lsls	r2, r3, #22
 8006eb6:	d402      	bmi.n	8006ebe <_vfiprintf_r+0x202>
 8006eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eba:	f7ff fe87 	bl	8006bcc <__retarget_lock_release_recursive>
 8006ebe:	89ab      	ldrh	r3, [r5, #12]
 8006ec0:	065b      	lsls	r3, r3, #25
 8006ec2:	f53f af1d 	bmi.w	8006d00 <_vfiprintf_r+0x44>
 8006ec6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ec8:	e71c      	b.n	8006d04 <_vfiprintf_r+0x48>
 8006eca:	ab03      	add	r3, sp, #12
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	462a      	mov	r2, r5
 8006ed0:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <_vfiprintf_r+0x22c>)
 8006ed2:	a904      	add	r1, sp, #16
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f000 f879 	bl	8006fcc <_printf_i>
 8006eda:	e7e4      	b.n	8006ea6 <_vfiprintf_r+0x1ea>
 8006edc:	0800c268 	.word	0x0800c268
 8006ee0:	0800c272 	.word	0x0800c272
 8006ee4:	00000000 	.word	0x00000000
 8006ee8:	08006c97 	.word	0x08006c97
 8006eec:	0800c26e 	.word	0x0800c26e

08006ef0 <_printf_common>:
 8006ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	4616      	mov	r6, r2
 8006ef6:	4699      	mov	r9, r3
 8006ef8:	688a      	ldr	r2, [r1, #8]
 8006efa:	690b      	ldr	r3, [r1, #16]
 8006efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f00:	4293      	cmp	r3, r2
 8006f02:	bfb8      	it	lt
 8006f04:	4613      	movlt	r3, r2
 8006f06:	6033      	str	r3, [r6, #0]
 8006f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	b10a      	cbz	r2, 8006f16 <_printf_common+0x26>
 8006f12:	3301      	adds	r3, #1
 8006f14:	6033      	str	r3, [r6, #0]
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	0699      	lsls	r1, r3, #26
 8006f1a:	bf42      	ittt	mi
 8006f1c:	6833      	ldrmi	r3, [r6, #0]
 8006f1e:	3302      	addmi	r3, #2
 8006f20:	6033      	strmi	r3, [r6, #0]
 8006f22:	6825      	ldr	r5, [r4, #0]
 8006f24:	f015 0506 	ands.w	r5, r5, #6
 8006f28:	d106      	bne.n	8006f38 <_printf_common+0x48>
 8006f2a:	f104 0a19 	add.w	sl, r4, #25
 8006f2e:	68e3      	ldr	r3, [r4, #12]
 8006f30:	6832      	ldr	r2, [r6, #0]
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	42ab      	cmp	r3, r5
 8006f36:	dc26      	bgt.n	8006f86 <_printf_common+0x96>
 8006f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f3c:	1e13      	subs	r3, r2, #0
 8006f3e:	6822      	ldr	r2, [r4, #0]
 8006f40:	bf18      	it	ne
 8006f42:	2301      	movne	r3, #1
 8006f44:	0692      	lsls	r2, r2, #26
 8006f46:	d42b      	bmi.n	8006fa0 <_printf_common+0xb0>
 8006f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	4638      	mov	r0, r7
 8006f50:	47c0      	blx	r8
 8006f52:	3001      	adds	r0, #1
 8006f54:	d01e      	beq.n	8006f94 <_printf_common+0xa4>
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	6922      	ldr	r2, [r4, #16]
 8006f5a:	f003 0306 	and.w	r3, r3, #6
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	bf02      	ittt	eq
 8006f62:	68e5      	ldreq	r5, [r4, #12]
 8006f64:	6833      	ldreq	r3, [r6, #0]
 8006f66:	1aed      	subeq	r5, r5, r3
 8006f68:	68a3      	ldr	r3, [r4, #8]
 8006f6a:	bf0c      	ite	eq
 8006f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f70:	2500      	movne	r5, #0
 8006f72:	4293      	cmp	r3, r2
 8006f74:	bfc4      	itt	gt
 8006f76:	1a9b      	subgt	r3, r3, r2
 8006f78:	18ed      	addgt	r5, r5, r3
 8006f7a:	2600      	movs	r6, #0
 8006f7c:	341a      	adds	r4, #26
 8006f7e:	42b5      	cmp	r5, r6
 8006f80:	d11a      	bne.n	8006fb8 <_printf_common+0xc8>
 8006f82:	2000      	movs	r0, #0
 8006f84:	e008      	b.n	8006f98 <_printf_common+0xa8>
 8006f86:	2301      	movs	r3, #1
 8006f88:	4652      	mov	r2, sl
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	47c0      	blx	r8
 8006f90:	3001      	adds	r0, #1
 8006f92:	d103      	bne.n	8006f9c <_printf_common+0xac>
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9c:	3501      	adds	r5, #1
 8006f9e:	e7c6      	b.n	8006f2e <_printf_common+0x3e>
 8006fa0:	18e1      	adds	r1, r4, r3
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	2030      	movs	r0, #48	; 0x30
 8006fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006faa:	4422      	add	r2, r4
 8006fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fb4:	3302      	adds	r3, #2
 8006fb6:	e7c7      	b.n	8006f48 <_printf_common+0x58>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	4622      	mov	r2, r4
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	47c0      	blx	r8
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	d0e6      	beq.n	8006f94 <_printf_common+0xa4>
 8006fc6:	3601      	adds	r6, #1
 8006fc8:	e7d9      	b.n	8006f7e <_printf_common+0x8e>
	...

08006fcc <_printf_i>:
 8006fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd0:	7e0f      	ldrb	r7, [r1, #24]
 8006fd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fd4:	2f78      	cmp	r7, #120	; 0x78
 8006fd6:	4691      	mov	r9, r2
 8006fd8:	4680      	mov	r8, r0
 8006fda:	460c      	mov	r4, r1
 8006fdc:	469a      	mov	sl, r3
 8006fde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fe2:	d807      	bhi.n	8006ff4 <_printf_i+0x28>
 8006fe4:	2f62      	cmp	r7, #98	; 0x62
 8006fe6:	d80a      	bhi.n	8006ffe <_printf_i+0x32>
 8006fe8:	2f00      	cmp	r7, #0
 8006fea:	f000 80d4 	beq.w	8007196 <_printf_i+0x1ca>
 8006fee:	2f58      	cmp	r7, #88	; 0x58
 8006ff0:	f000 80c0 	beq.w	8007174 <_printf_i+0x1a8>
 8006ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ffc:	e03a      	b.n	8007074 <_printf_i+0xa8>
 8006ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007002:	2b15      	cmp	r3, #21
 8007004:	d8f6      	bhi.n	8006ff4 <_printf_i+0x28>
 8007006:	a101      	add	r1, pc, #4	; (adr r1, 800700c <_printf_i+0x40>)
 8007008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800700c:	08007065 	.word	0x08007065
 8007010:	08007079 	.word	0x08007079
 8007014:	08006ff5 	.word	0x08006ff5
 8007018:	08006ff5 	.word	0x08006ff5
 800701c:	08006ff5 	.word	0x08006ff5
 8007020:	08006ff5 	.word	0x08006ff5
 8007024:	08007079 	.word	0x08007079
 8007028:	08006ff5 	.word	0x08006ff5
 800702c:	08006ff5 	.word	0x08006ff5
 8007030:	08006ff5 	.word	0x08006ff5
 8007034:	08006ff5 	.word	0x08006ff5
 8007038:	0800717d 	.word	0x0800717d
 800703c:	080070a5 	.word	0x080070a5
 8007040:	08007137 	.word	0x08007137
 8007044:	08006ff5 	.word	0x08006ff5
 8007048:	08006ff5 	.word	0x08006ff5
 800704c:	0800719f 	.word	0x0800719f
 8007050:	08006ff5 	.word	0x08006ff5
 8007054:	080070a5 	.word	0x080070a5
 8007058:	08006ff5 	.word	0x08006ff5
 800705c:	08006ff5 	.word	0x08006ff5
 8007060:	0800713f 	.word	0x0800713f
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	1d1a      	adds	r2, r3, #4
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	602a      	str	r2, [r5, #0]
 800706c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007074:	2301      	movs	r3, #1
 8007076:	e09f      	b.n	80071b8 <_printf_i+0x1ec>
 8007078:	6820      	ldr	r0, [r4, #0]
 800707a:	682b      	ldr	r3, [r5, #0]
 800707c:	0607      	lsls	r7, r0, #24
 800707e:	f103 0104 	add.w	r1, r3, #4
 8007082:	6029      	str	r1, [r5, #0]
 8007084:	d501      	bpl.n	800708a <_printf_i+0xbe>
 8007086:	681e      	ldr	r6, [r3, #0]
 8007088:	e003      	b.n	8007092 <_printf_i+0xc6>
 800708a:	0646      	lsls	r6, r0, #25
 800708c:	d5fb      	bpl.n	8007086 <_printf_i+0xba>
 800708e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007092:	2e00      	cmp	r6, #0
 8007094:	da03      	bge.n	800709e <_printf_i+0xd2>
 8007096:	232d      	movs	r3, #45	; 0x2d
 8007098:	4276      	negs	r6, r6
 800709a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800709e:	485a      	ldr	r0, [pc, #360]	; (8007208 <_printf_i+0x23c>)
 80070a0:	230a      	movs	r3, #10
 80070a2:	e012      	b.n	80070ca <_printf_i+0xfe>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	6820      	ldr	r0, [r4, #0]
 80070a8:	1d19      	adds	r1, r3, #4
 80070aa:	6029      	str	r1, [r5, #0]
 80070ac:	0605      	lsls	r5, r0, #24
 80070ae:	d501      	bpl.n	80070b4 <_printf_i+0xe8>
 80070b0:	681e      	ldr	r6, [r3, #0]
 80070b2:	e002      	b.n	80070ba <_printf_i+0xee>
 80070b4:	0641      	lsls	r1, r0, #25
 80070b6:	d5fb      	bpl.n	80070b0 <_printf_i+0xe4>
 80070b8:	881e      	ldrh	r6, [r3, #0]
 80070ba:	4853      	ldr	r0, [pc, #332]	; (8007208 <_printf_i+0x23c>)
 80070bc:	2f6f      	cmp	r7, #111	; 0x6f
 80070be:	bf0c      	ite	eq
 80070c0:	2308      	moveq	r3, #8
 80070c2:	230a      	movne	r3, #10
 80070c4:	2100      	movs	r1, #0
 80070c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070ca:	6865      	ldr	r5, [r4, #4]
 80070cc:	60a5      	str	r5, [r4, #8]
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	bfa2      	ittt	ge
 80070d2:	6821      	ldrge	r1, [r4, #0]
 80070d4:	f021 0104 	bicge.w	r1, r1, #4
 80070d8:	6021      	strge	r1, [r4, #0]
 80070da:	b90e      	cbnz	r6, 80070e0 <_printf_i+0x114>
 80070dc:	2d00      	cmp	r5, #0
 80070de:	d04b      	beq.n	8007178 <_printf_i+0x1ac>
 80070e0:	4615      	mov	r5, r2
 80070e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80070e6:	fb03 6711 	mls	r7, r3, r1, r6
 80070ea:	5dc7      	ldrb	r7, [r0, r7]
 80070ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070f0:	4637      	mov	r7, r6
 80070f2:	42bb      	cmp	r3, r7
 80070f4:	460e      	mov	r6, r1
 80070f6:	d9f4      	bls.n	80070e2 <_printf_i+0x116>
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d10b      	bne.n	8007114 <_printf_i+0x148>
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	07de      	lsls	r6, r3, #31
 8007100:	d508      	bpl.n	8007114 <_printf_i+0x148>
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	6861      	ldr	r1, [r4, #4]
 8007106:	4299      	cmp	r1, r3
 8007108:	bfde      	ittt	le
 800710a:	2330      	movle	r3, #48	; 0x30
 800710c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007110:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007114:	1b52      	subs	r2, r2, r5
 8007116:	6122      	str	r2, [r4, #16]
 8007118:	f8cd a000 	str.w	sl, [sp]
 800711c:	464b      	mov	r3, r9
 800711e:	aa03      	add	r2, sp, #12
 8007120:	4621      	mov	r1, r4
 8007122:	4640      	mov	r0, r8
 8007124:	f7ff fee4 	bl	8006ef0 <_printf_common>
 8007128:	3001      	adds	r0, #1
 800712a:	d14a      	bne.n	80071c2 <_printf_i+0x1f6>
 800712c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007130:	b004      	add	sp, #16
 8007132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	f043 0320 	orr.w	r3, r3, #32
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	4833      	ldr	r0, [pc, #204]	; (800720c <_printf_i+0x240>)
 8007140:	2778      	movs	r7, #120	; 0x78
 8007142:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	6829      	ldr	r1, [r5, #0]
 800714a:	061f      	lsls	r7, r3, #24
 800714c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007150:	d402      	bmi.n	8007158 <_printf_i+0x18c>
 8007152:	065f      	lsls	r7, r3, #25
 8007154:	bf48      	it	mi
 8007156:	b2b6      	uxthmi	r6, r6
 8007158:	07df      	lsls	r7, r3, #31
 800715a:	bf48      	it	mi
 800715c:	f043 0320 	orrmi.w	r3, r3, #32
 8007160:	6029      	str	r1, [r5, #0]
 8007162:	bf48      	it	mi
 8007164:	6023      	strmi	r3, [r4, #0]
 8007166:	b91e      	cbnz	r6, 8007170 <_printf_i+0x1a4>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	f023 0320 	bic.w	r3, r3, #32
 800716e:	6023      	str	r3, [r4, #0]
 8007170:	2310      	movs	r3, #16
 8007172:	e7a7      	b.n	80070c4 <_printf_i+0xf8>
 8007174:	4824      	ldr	r0, [pc, #144]	; (8007208 <_printf_i+0x23c>)
 8007176:	e7e4      	b.n	8007142 <_printf_i+0x176>
 8007178:	4615      	mov	r5, r2
 800717a:	e7bd      	b.n	80070f8 <_printf_i+0x12c>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	6826      	ldr	r6, [r4, #0]
 8007180:	6961      	ldr	r1, [r4, #20]
 8007182:	1d18      	adds	r0, r3, #4
 8007184:	6028      	str	r0, [r5, #0]
 8007186:	0635      	lsls	r5, r6, #24
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	d501      	bpl.n	8007190 <_printf_i+0x1c4>
 800718c:	6019      	str	r1, [r3, #0]
 800718e:	e002      	b.n	8007196 <_printf_i+0x1ca>
 8007190:	0670      	lsls	r0, r6, #25
 8007192:	d5fb      	bpl.n	800718c <_printf_i+0x1c0>
 8007194:	8019      	strh	r1, [r3, #0]
 8007196:	2300      	movs	r3, #0
 8007198:	6123      	str	r3, [r4, #16]
 800719a:	4615      	mov	r5, r2
 800719c:	e7bc      	b.n	8007118 <_printf_i+0x14c>
 800719e:	682b      	ldr	r3, [r5, #0]
 80071a0:	1d1a      	adds	r2, r3, #4
 80071a2:	602a      	str	r2, [r5, #0]
 80071a4:	681d      	ldr	r5, [r3, #0]
 80071a6:	6862      	ldr	r2, [r4, #4]
 80071a8:	2100      	movs	r1, #0
 80071aa:	4628      	mov	r0, r5
 80071ac:	f7f9 f810 	bl	80001d0 <memchr>
 80071b0:	b108      	cbz	r0, 80071b6 <_printf_i+0x1ea>
 80071b2:	1b40      	subs	r0, r0, r5
 80071b4:	6060      	str	r0, [r4, #4]
 80071b6:	6863      	ldr	r3, [r4, #4]
 80071b8:	6123      	str	r3, [r4, #16]
 80071ba:	2300      	movs	r3, #0
 80071bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071c0:	e7aa      	b.n	8007118 <_printf_i+0x14c>
 80071c2:	6923      	ldr	r3, [r4, #16]
 80071c4:	462a      	mov	r2, r5
 80071c6:	4649      	mov	r1, r9
 80071c8:	4640      	mov	r0, r8
 80071ca:	47d0      	blx	sl
 80071cc:	3001      	adds	r0, #1
 80071ce:	d0ad      	beq.n	800712c <_printf_i+0x160>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	079b      	lsls	r3, r3, #30
 80071d4:	d413      	bmi.n	80071fe <_printf_i+0x232>
 80071d6:	68e0      	ldr	r0, [r4, #12]
 80071d8:	9b03      	ldr	r3, [sp, #12]
 80071da:	4298      	cmp	r0, r3
 80071dc:	bfb8      	it	lt
 80071de:	4618      	movlt	r0, r3
 80071e0:	e7a6      	b.n	8007130 <_printf_i+0x164>
 80071e2:	2301      	movs	r3, #1
 80071e4:	4632      	mov	r2, r6
 80071e6:	4649      	mov	r1, r9
 80071e8:	4640      	mov	r0, r8
 80071ea:	47d0      	blx	sl
 80071ec:	3001      	adds	r0, #1
 80071ee:	d09d      	beq.n	800712c <_printf_i+0x160>
 80071f0:	3501      	adds	r5, #1
 80071f2:	68e3      	ldr	r3, [r4, #12]
 80071f4:	9903      	ldr	r1, [sp, #12]
 80071f6:	1a5b      	subs	r3, r3, r1
 80071f8:	42ab      	cmp	r3, r5
 80071fa:	dcf2      	bgt.n	80071e2 <_printf_i+0x216>
 80071fc:	e7eb      	b.n	80071d6 <_printf_i+0x20a>
 80071fe:	2500      	movs	r5, #0
 8007200:	f104 0619 	add.w	r6, r4, #25
 8007204:	e7f5      	b.n	80071f2 <_printf_i+0x226>
 8007206:	bf00      	nop
 8007208:	0800c279 	.word	0x0800c279
 800720c:	0800c28a 	.word	0x0800c28a

08007210 <__sflush_r>:
 8007210:	898a      	ldrh	r2, [r1, #12]
 8007212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007216:	4605      	mov	r5, r0
 8007218:	0710      	lsls	r0, r2, #28
 800721a:	460c      	mov	r4, r1
 800721c:	d458      	bmi.n	80072d0 <__sflush_r+0xc0>
 800721e:	684b      	ldr	r3, [r1, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	dc05      	bgt.n	8007230 <__sflush_r+0x20>
 8007224:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	dc02      	bgt.n	8007230 <__sflush_r+0x20>
 800722a:	2000      	movs	r0, #0
 800722c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007232:	2e00      	cmp	r6, #0
 8007234:	d0f9      	beq.n	800722a <__sflush_r+0x1a>
 8007236:	2300      	movs	r3, #0
 8007238:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800723c:	682f      	ldr	r7, [r5, #0]
 800723e:	6a21      	ldr	r1, [r4, #32]
 8007240:	602b      	str	r3, [r5, #0]
 8007242:	d032      	beq.n	80072aa <__sflush_r+0x9a>
 8007244:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	075a      	lsls	r2, r3, #29
 800724a:	d505      	bpl.n	8007258 <__sflush_r+0x48>
 800724c:	6863      	ldr	r3, [r4, #4]
 800724e:	1ac0      	subs	r0, r0, r3
 8007250:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007252:	b10b      	cbz	r3, 8007258 <__sflush_r+0x48>
 8007254:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007256:	1ac0      	subs	r0, r0, r3
 8007258:	2300      	movs	r3, #0
 800725a:	4602      	mov	r2, r0
 800725c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800725e:	6a21      	ldr	r1, [r4, #32]
 8007260:	4628      	mov	r0, r5
 8007262:	47b0      	blx	r6
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	d106      	bne.n	8007278 <__sflush_r+0x68>
 800726a:	6829      	ldr	r1, [r5, #0]
 800726c:	291d      	cmp	r1, #29
 800726e:	d82b      	bhi.n	80072c8 <__sflush_r+0xb8>
 8007270:	4a29      	ldr	r2, [pc, #164]	; (8007318 <__sflush_r+0x108>)
 8007272:	410a      	asrs	r2, r1
 8007274:	07d6      	lsls	r6, r2, #31
 8007276:	d427      	bmi.n	80072c8 <__sflush_r+0xb8>
 8007278:	2200      	movs	r2, #0
 800727a:	6062      	str	r2, [r4, #4]
 800727c:	04d9      	lsls	r1, r3, #19
 800727e:	6922      	ldr	r2, [r4, #16]
 8007280:	6022      	str	r2, [r4, #0]
 8007282:	d504      	bpl.n	800728e <__sflush_r+0x7e>
 8007284:	1c42      	adds	r2, r0, #1
 8007286:	d101      	bne.n	800728c <__sflush_r+0x7c>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	b903      	cbnz	r3, 800728e <__sflush_r+0x7e>
 800728c:	6560      	str	r0, [r4, #84]	; 0x54
 800728e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007290:	602f      	str	r7, [r5, #0]
 8007292:	2900      	cmp	r1, #0
 8007294:	d0c9      	beq.n	800722a <__sflush_r+0x1a>
 8007296:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800729a:	4299      	cmp	r1, r3
 800729c:	d002      	beq.n	80072a4 <__sflush_r+0x94>
 800729e:	4628      	mov	r0, r5
 80072a0:	f7ff fc96 	bl	8006bd0 <_free_r>
 80072a4:	2000      	movs	r0, #0
 80072a6:	6360      	str	r0, [r4, #52]	; 0x34
 80072a8:	e7c0      	b.n	800722c <__sflush_r+0x1c>
 80072aa:	2301      	movs	r3, #1
 80072ac:	4628      	mov	r0, r5
 80072ae:	47b0      	blx	r6
 80072b0:	1c41      	adds	r1, r0, #1
 80072b2:	d1c8      	bne.n	8007246 <__sflush_r+0x36>
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d0c5      	beq.n	8007246 <__sflush_r+0x36>
 80072ba:	2b1d      	cmp	r3, #29
 80072bc:	d001      	beq.n	80072c2 <__sflush_r+0xb2>
 80072be:	2b16      	cmp	r3, #22
 80072c0:	d101      	bne.n	80072c6 <__sflush_r+0xb6>
 80072c2:	602f      	str	r7, [r5, #0]
 80072c4:	e7b1      	b.n	800722a <__sflush_r+0x1a>
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072cc:	81a3      	strh	r3, [r4, #12]
 80072ce:	e7ad      	b.n	800722c <__sflush_r+0x1c>
 80072d0:	690f      	ldr	r7, [r1, #16]
 80072d2:	2f00      	cmp	r7, #0
 80072d4:	d0a9      	beq.n	800722a <__sflush_r+0x1a>
 80072d6:	0793      	lsls	r3, r2, #30
 80072d8:	680e      	ldr	r6, [r1, #0]
 80072da:	bf08      	it	eq
 80072dc:	694b      	ldreq	r3, [r1, #20]
 80072de:	600f      	str	r7, [r1, #0]
 80072e0:	bf18      	it	ne
 80072e2:	2300      	movne	r3, #0
 80072e4:	eba6 0807 	sub.w	r8, r6, r7
 80072e8:	608b      	str	r3, [r1, #8]
 80072ea:	f1b8 0f00 	cmp.w	r8, #0
 80072ee:	dd9c      	ble.n	800722a <__sflush_r+0x1a>
 80072f0:	6a21      	ldr	r1, [r4, #32]
 80072f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072f4:	4643      	mov	r3, r8
 80072f6:	463a      	mov	r2, r7
 80072f8:	4628      	mov	r0, r5
 80072fa:	47b0      	blx	r6
 80072fc:	2800      	cmp	r0, #0
 80072fe:	dc06      	bgt.n	800730e <__sflush_r+0xfe>
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007306:	81a3      	strh	r3, [r4, #12]
 8007308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800730c:	e78e      	b.n	800722c <__sflush_r+0x1c>
 800730e:	4407      	add	r7, r0
 8007310:	eba8 0800 	sub.w	r8, r8, r0
 8007314:	e7e9      	b.n	80072ea <__sflush_r+0xda>
 8007316:	bf00      	nop
 8007318:	dfbffffe 	.word	0xdfbffffe

0800731c <_fflush_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	690b      	ldr	r3, [r1, #16]
 8007320:	4605      	mov	r5, r0
 8007322:	460c      	mov	r4, r1
 8007324:	b913      	cbnz	r3, 800732c <_fflush_r+0x10>
 8007326:	2500      	movs	r5, #0
 8007328:	4628      	mov	r0, r5
 800732a:	bd38      	pop	{r3, r4, r5, pc}
 800732c:	b118      	cbz	r0, 8007336 <_fflush_r+0x1a>
 800732e:	6a03      	ldr	r3, [r0, #32]
 8007330:	b90b      	cbnz	r3, 8007336 <_fflush_r+0x1a>
 8007332:	f7ff fb35 	bl	80069a0 <__sinit>
 8007336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f3      	beq.n	8007326 <_fflush_r+0xa>
 800733e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007340:	07d0      	lsls	r0, r2, #31
 8007342:	d404      	bmi.n	800734e <_fflush_r+0x32>
 8007344:	0599      	lsls	r1, r3, #22
 8007346:	d402      	bmi.n	800734e <_fflush_r+0x32>
 8007348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800734a:	f7ff fc3e 	bl	8006bca <__retarget_lock_acquire_recursive>
 800734e:	4628      	mov	r0, r5
 8007350:	4621      	mov	r1, r4
 8007352:	f7ff ff5d 	bl	8007210 <__sflush_r>
 8007356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007358:	07da      	lsls	r2, r3, #31
 800735a:	4605      	mov	r5, r0
 800735c:	d4e4      	bmi.n	8007328 <_fflush_r+0xc>
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	059b      	lsls	r3, r3, #22
 8007362:	d4e1      	bmi.n	8007328 <_fflush_r+0xc>
 8007364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007366:	f7ff fc31 	bl	8006bcc <__retarget_lock_release_recursive>
 800736a:	e7dd      	b.n	8007328 <_fflush_r+0xc>

0800736c <__swbuf_r>:
 800736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736e:	460e      	mov	r6, r1
 8007370:	4614      	mov	r4, r2
 8007372:	4605      	mov	r5, r0
 8007374:	b118      	cbz	r0, 800737e <__swbuf_r+0x12>
 8007376:	6a03      	ldr	r3, [r0, #32]
 8007378:	b90b      	cbnz	r3, 800737e <__swbuf_r+0x12>
 800737a:	f7ff fb11 	bl	80069a0 <__sinit>
 800737e:	69a3      	ldr	r3, [r4, #24]
 8007380:	60a3      	str	r3, [r4, #8]
 8007382:	89a3      	ldrh	r3, [r4, #12]
 8007384:	071a      	lsls	r2, r3, #28
 8007386:	d525      	bpl.n	80073d4 <__swbuf_r+0x68>
 8007388:	6923      	ldr	r3, [r4, #16]
 800738a:	b31b      	cbz	r3, 80073d4 <__swbuf_r+0x68>
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	6922      	ldr	r2, [r4, #16]
 8007390:	1a98      	subs	r0, r3, r2
 8007392:	6963      	ldr	r3, [r4, #20]
 8007394:	b2f6      	uxtb	r6, r6
 8007396:	4283      	cmp	r3, r0
 8007398:	4637      	mov	r7, r6
 800739a:	dc04      	bgt.n	80073a6 <__swbuf_r+0x3a>
 800739c:	4621      	mov	r1, r4
 800739e:	4628      	mov	r0, r5
 80073a0:	f7ff ffbc 	bl	800731c <_fflush_r>
 80073a4:	b9e0      	cbnz	r0, 80073e0 <__swbuf_r+0x74>
 80073a6:	68a3      	ldr	r3, [r4, #8]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	60a3      	str	r3, [r4, #8]
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	6022      	str	r2, [r4, #0]
 80073b2:	701e      	strb	r6, [r3, #0]
 80073b4:	6962      	ldr	r2, [r4, #20]
 80073b6:	1c43      	adds	r3, r0, #1
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d004      	beq.n	80073c6 <__swbuf_r+0x5a>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	07db      	lsls	r3, r3, #31
 80073c0:	d506      	bpl.n	80073d0 <__swbuf_r+0x64>
 80073c2:	2e0a      	cmp	r6, #10
 80073c4:	d104      	bne.n	80073d0 <__swbuf_r+0x64>
 80073c6:	4621      	mov	r1, r4
 80073c8:	4628      	mov	r0, r5
 80073ca:	f7ff ffa7 	bl	800731c <_fflush_r>
 80073ce:	b938      	cbnz	r0, 80073e0 <__swbuf_r+0x74>
 80073d0:	4638      	mov	r0, r7
 80073d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073d4:	4621      	mov	r1, r4
 80073d6:	4628      	mov	r0, r5
 80073d8:	f000 f806 	bl	80073e8 <__swsetup_r>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d0d5      	beq.n	800738c <__swbuf_r+0x20>
 80073e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80073e4:	e7f4      	b.n	80073d0 <__swbuf_r+0x64>
	...

080073e8 <__swsetup_r>:
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	4b2a      	ldr	r3, [pc, #168]	; (8007494 <__swsetup_r+0xac>)
 80073ec:	4605      	mov	r5, r0
 80073ee:	6818      	ldr	r0, [r3, #0]
 80073f0:	460c      	mov	r4, r1
 80073f2:	b118      	cbz	r0, 80073fc <__swsetup_r+0x14>
 80073f4:	6a03      	ldr	r3, [r0, #32]
 80073f6:	b90b      	cbnz	r3, 80073fc <__swsetup_r+0x14>
 80073f8:	f7ff fad2 	bl	80069a0 <__sinit>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007402:	0718      	lsls	r0, r3, #28
 8007404:	d422      	bmi.n	800744c <__swsetup_r+0x64>
 8007406:	06d9      	lsls	r1, r3, #27
 8007408:	d407      	bmi.n	800741a <__swsetup_r+0x32>
 800740a:	2309      	movs	r3, #9
 800740c:	602b      	str	r3, [r5, #0]
 800740e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007412:	81a3      	strh	r3, [r4, #12]
 8007414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007418:	e034      	b.n	8007484 <__swsetup_r+0x9c>
 800741a:	0758      	lsls	r0, r3, #29
 800741c:	d512      	bpl.n	8007444 <__swsetup_r+0x5c>
 800741e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007420:	b141      	cbz	r1, 8007434 <__swsetup_r+0x4c>
 8007422:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007426:	4299      	cmp	r1, r3
 8007428:	d002      	beq.n	8007430 <__swsetup_r+0x48>
 800742a:	4628      	mov	r0, r5
 800742c:	f7ff fbd0 	bl	8006bd0 <_free_r>
 8007430:	2300      	movs	r3, #0
 8007432:	6363      	str	r3, [r4, #52]	; 0x34
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800743a:	81a3      	strh	r3, [r4, #12]
 800743c:	2300      	movs	r3, #0
 800743e:	6063      	str	r3, [r4, #4]
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f043 0308 	orr.w	r3, r3, #8
 800744a:	81a3      	strh	r3, [r4, #12]
 800744c:	6923      	ldr	r3, [r4, #16]
 800744e:	b94b      	cbnz	r3, 8007464 <__swsetup_r+0x7c>
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800745a:	d003      	beq.n	8007464 <__swsetup_r+0x7c>
 800745c:	4621      	mov	r1, r4
 800745e:	4628      	mov	r0, r5
 8007460:	f000 f840 	bl	80074e4 <__smakebuf_r>
 8007464:	89a0      	ldrh	r0, [r4, #12]
 8007466:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800746a:	f010 0301 	ands.w	r3, r0, #1
 800746e:	d00a      	beq.n	8007486 <__swsetup_r+0x9e>
 8007470:	2300      	movs	r3, #0
 8007472:	60a3      	str	r3, [r4, #8]
 8007474:	6963      	ldr	r3, [r4, #20]
 8007476:	425b      	negs	r3, r3
 8007478:	61a3      	str	r3, [r4, #24]
 800747a:	6923      	ldr	r3, [r4, #16]
 800747c:	b943      	cbnz	r3, 8007490 <__swsetup_r+0xa8>
 800747e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007482:	d1c4      	bne.n	800740e <__swsetup_r+0x26>
 8007484:	bd38      	pop	{r3, r4, r5, pc}
 8007486:	0781      	lsls	r1, r0, #30
 8007488:	bf58      	it	pl
 800748a:	6963      	ldrpl	r3, [r4, #20]
 800748c:	60a3      	str	r3, [r4, #8]
 800748e:	e7f4      	b.n	800747a <__swsetup_r+0x92>
 8007490:	2000      	movs	r0, #0
 8007492:	e7f7      	b.n	8007484 <__swsetup_r+0x9c>
 8007494:	20000634 	.word	0x20000634

08007498 <__swhatbuf_r>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	460c      	mov	r4, r1
 800749c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a0:	2900      	cmp	r1, #0
 80074a2:	b096      	sub	sp, #88	; 0x58
 80074a4:	4615      	mov	r5, r2
 80074a6:	461e      	mov	r6, r3
 80074a8:	da0d      	bge.n	80074c6 <__swhatbuf_r+0x2e>
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80074b0:	f04f 0100 	mov.w	r1, #0
 80074b4:	bf0c      	ite	eq
 80074b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80074ba:	2340      	movne	r3, #64	; 0x40
 80074bc:	2000      	movs	r0, #0
 80074be:	6031      	str	r1, [r6, #0]
 80074c0:	602b      	str	r3, [r5, #0]
 80074c2:	b016      	add	sp, #88	; 0x58
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
 80074c6:	466a      	mov	r2, sp
 80074c8:	f000 f848 	bl	800755c <_fstat_r>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	dbec      	blt.n	80074aa <__swhatbuf_r+0x12>
 80074d0:	9901      	ldr	r1, [sp, #4]
 80074d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80074d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80074da:	4259      	negs	r1, r3
 80074dc:	4159      	adcs	r1, r3
 80074de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074e2:	e7eb      	b.n	80074bc <__swhatbuf_r+0x24>

080074e4 <__smakebuf_r>:
 80074e4:	898b      	ldrh	r3, [r1, #12]
 80074e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074e8:	079d      	lsls	r5, r3, #30
 80074ea:	4606      	mov	r6, r0
 80074ec:	460c      	mov	r4, r1
 80074ee:	d507      	bpl.n	8007500 <__smakebuf_r+0x1c>
 80074f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	6123      	str	r3, [r4, #16]
 80074f8:	2301      	movs	r3, #1
 80074fa:	6163      	str	r3, [r4, #20]
 80074fc:	b002      	add	sp, #8
 80074fe:	bd70      	pop	{r4, r5, r6, pc}
 8007500:	ab01      	add	r3, sp, #4
 8007502:	466a      	mov	r2, sp
 8007504:	f7ff ffc8 	bl	8007498 <__swhatbuf_r>
 8007508:	9900      	ldr	r1, [sp, #0]
 800750a:	4605      	mov	r5, r0
 800750c:	4630      	mov	r0, r6
 800750e:	f7ff f92f 	bl	8006770 <_malloc_r>
 8007512:	b948      	cbnz	r0, 8007528 <__smakebuf_r+0x44>
 8007514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007518:	059a      	lsls	r2, r3, #22
 800751a:	d4ef      	bmi.n	80074fc <__smakebuf_r+0x18>
 800751c:	f023 0303 	bic.w	r3, r3, #3
 8007520:	f043 0302 	orr.w	r3, r3, #2
 8007524:	81a3      	strh	r3, [r4, #12]
 8007526:	e7e3      	b.n	80074f0 <__smakebuf_r+0xc>
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	6020      	str	r0, [r4, #0]
 800752c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	9b00      	ldr	r3, [sp, #0]
 8007534:	6163      	str	r3, [r4, #20]
 8007536:	9b01      	ldr	r3, [sp, #4]
 8007538:	6120      	str	r0, [r4, #16]
 800753a:	b15b      	cbz	r3, 8007554 <__smakebuf_r+0x70>
 800753c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007540:	4630      	mov	r0, r6
 8007542:	f000 f81d 	bl	8007580 <_isatty_r>
 8007546:	b128      	cbz	r0, 8007554 <__smakebuf_r+0x70>
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	f023 0303 	bic.w	r3, r3, #3
 800754e:	f043 0301 	orr.w	r3, r3, #1
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	431d      	orrs	r5, r3
 8007558:	81a5      	strh	r5, [r4, #12]
 800755a:	e7cf      	b.n	80074fc <__smakebuf_r+0x18>

0800755c <_fstat_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4d07      	ldr	r5, [pc, #28]	; (800757c <_fstat_r+0x20>)
 8007560:	2300      	movs	r3, #0
 8007562:	4604      	mov	r4, r0
 8007564:	4608      	mov	r0, r1
 8007566:	4611      	mov	r1, r2
 8007568:	602b      	str	r3, [r5, #0]
 800756a:	f7f9 f92a 	bl	80007c2 <_fstat>
 800756e:	1c43      	adds	r3, r0, #1
 8007570:	d102      	bne.n	8007578 <_fstat_r+0x1c>
 8007572:	682b      	ldr	r3, [r5, #0]
 8007574:	b103      	cbz	r3, 8007578 <_fstat_r+0x1c>
 8007576:	6023      	str	r3, [r4, #0]
 8007578:	bd38      	pop	{r3, r4, r5, pc}
 800757a:	bf00      	nop
 800757c:	20001160 	.word	0x20001160

08007580 <_isatty_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4d06      	ldr	r5, [pc, #24]	; (800759c <_isatty_r+0x1c>)
 8007584:	2300      	movs	r3, #0
 8007586:	4604      	mov	r4, r0
 8007588:	4608      	mov	r0, r1
 800758a:	602b      	str	r3, [r5, #0]
 800758c:	f7f9 f929 	bl	80007e2 <_isatty>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d102      	bne.n	800759a <_isatty_r+0x1a>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	b103      	cbz	r3, 800759a <_isatty_r+0x1a>
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	20001160 	.word	0x20001160

080075a0 <expf>:
 80075a0:	b508      	push	{r3, lr}
 80075a2:	ed2d 8b02 	vpush	{d8}
 80075a6:	eef0 8a40 	vmov.f32	s17, s0
 80075aa:	f000 f9ed 	bl	8007988 <__ieee754_expf>
 80075ae:	eeb0 8a40 	vmov.f32	s16, s0
 80075b2:	eeb0 0a68 	vmov.f32	s0, s17
 80075b6:	f000 f899 	bl	80076ec <finitef>
 80075ba:	b160      	cbz	r0, 80075d6 <expf+0x36>
 80075bc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80075fc <expf+0x5c>
 80075c0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80075c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c8:	dd0a      	ble.n	80075e0 <expf+0x40>
 80075ca:	f7ff fad3 	bl	8006b74 <__errno>
 80075ce:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8007600 <expf+0x60>
 80075d2:	2322      	movs	r3, #34	; 0x22
 80075d4:	6003      	str	r3, [r0, #0]
 80075d6:	eeb0 0a48 	vmov.f32	s0, s16
 80075da:	ecbd 8b02 	vpop	{d8}
 80075de:	bd08      	pop	{r3, pc}
 80075e0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007604 <expf+0x64>
 80075e4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80075e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ec:	d5f3      	bpl.n	80075d6 <expf+0x36>
 80075ee:	f7ff fac1 	bl	8006b74 <__errno>
 80075f2:	2322      	movs	r3, #34	; 0x22
 80075f4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007608 <expf+0x68>
 80075f8:	6003      	str	r3, [r0, #0]
 80075fa:	e7ec      	b.n	80075d6 <expf+0x36>
 80075fc:	42b17217 	.word	0x42b17217
 8007600:	7f800000 	.word	0x7f800000
 8007604:	c2cff1b5 	.word	0xc2cff1b5
 8007608:	00000000 	.word	0x00000000

0800760c <fabsf>:
 800760c:	ee10 3a10 	vmov	r3, s0
 8007610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007614:	ee00 3a10 	vmov	s0, r3
 8007618:	4770      	bx	lr
	...

0800761c <tanhf>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	ee10 5a10 	vmov	r5, s0
 8007622:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007626:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800762a:	ed2d 8b02 	vpush	{d8}
 800762e:	db0f      	blt.n	8007650 <tanhf+0x34>
 8007630:	4b2a      	ldr	r3, [pc, #168]	; (80076dc <tanhf+0xc0>)
 8007632:	ed93 6a00 	vldr	s12, [r3]
 8007636:	edd3 6a00 	vldr	s13, [r3]
 800763a:	eec6 7a00 	vdiv.f32	s15, s12, s0
 800763e:	2d00      	cmp	r5, #0
 8007640:	bfac      	ite	ge
 8007642:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 8007646:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 800764a:	ecbd 8b02 	vpop	{d8}
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	4a23      	ldr	r2, [pc, #140]	; (80076e0 <tanhf+0xc4>)
 8007652:	4293      	cmp	r3, r2
 8007654:	dc39      	bgt.n	80076ca <tanhf+0xae>
 8007656:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800765a:	da07      	bge.n	800766c <tanhf+0x50>
 800765c:	4b1f      	ldr	r3, [pc, #124]	; (80076dc <tanhf+0xc0>)
 800765e:	edd3 7a00 	vldr	s15, [r3]
 8007662:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007666:	ee27 0a80 	vmul.f32	s0, s15, s0
 800766a:	e7ee      	b.n	800764a <tanhf+0x2e>
 800766c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007670:	4c1c      	ldr	r4, [pc, #112]	; (80076e4 <tanhf+0xc8>)
 8007672:	db19      	blt.n	80076a8 <tanhf+0x8c>
 8007674:	f7ff ffca 	bl	800760c <fabsf>
 8007678:	edd4 7a00 	vldr	s15, [r4]
 800767c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007680:	f000 f842 	bl	8007708 <expm1f>
 8007684:	4b15      	ldr	r3, [pc, #84]	; (80076dc <tanhf+0xc0>)
 8007686:	edd3 7a00 	vldr	s15, [r3]
 800768a:	edd4 6a00 	vldr	s13, [r4]
 800768e:	ed94 7a00 	vldr	s14, [r4]
 8007692:	ee37 0a00 	vadd.f32	s0, s14, s0
 8007696:	ee86 7a80 	vdiv.f32	s14, s13, s0
 800769a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800769e:	2d00      	cmp	r5, #0
 80076a0:	bfb8      	it	lt
 80076a2:	eeb1 0a40 	vneglt.f32	s0, s0
 80076a6:	e7d0      	b.n	800764a <tanhf+0x2e>
 80076a8:	ed94 8a00 	vldr	s16, [r4]
 80076ac:	f7ff ffae 	bl	800760c <fabsf>
 80076b0:	ee28 0a40 	vnmul.f32	s0, s16, s0
 80076b4:	f000 f828 	bl	8007708 <expm1f>
 80076b8:	edd4 7a00 	vldr	s15, [r4]
 80076bc:	ee77 7a80 	vadd.f32	s15, s15, s0
 80076c0:	eeb1 7a40 	vneg.f32	s14, s0
 80076c4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80076c8:	e7e9      	b.n	800769e <tanhf+0x82>
 80076ca:	4b04      	ldr	r3, [pc, #16]	; (80076dc <tanhf+0xc0>)
 80076cc:	ed93 0a00 	vldr	s0, [r3]
 80076d0:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <tanhf+0xcc>)
 80076d2:	edd3 7a00 	vldr	s15, [r3]
 80076d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80076da:	e7e0      	b.n	800769e <tanhf+0x82>
 80076dc:	20000638 	.word	0x20000638
 80076e0:	41afffff 	.word	0x41afffff
 80076e4:	20000640 	.word	0x20000640
 80076e8:	2000063c 	.word	0x2000063c

080076ec <finitef>:
 80076ec:	b082      	sub	sp, #8
 80076ee:	ed8d 0a01 	vstr	s0, [sp, #4]
 80076f2:	9801      	ldr	r0, [sp, #4]
 80076f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80076f8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80076fc:	bfac      	ite	ge
 80076fe:	2000      	movge	r0, #0
 8007700:	2001      	movlt	r0, #1
 8007702:	b002      	add	sp, #8
 8007704:	4770      	bx	lr
	...

08007708 <expm1f>:
 8007708:	ee10 2a10 	vmov	r2, s0
 800770c:	497e      	ldr	r1, [pc, #504]	; (8007908 <expm1f+0x200>)
 800770e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007712:	428b      	cmp	r3, r1
 8007714:	d921      	bls.n	800775a <expm1f+0x52>
 8007716:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800771a:	d902      	bls.n	8007722 <expm1f+0x1a>
 800771c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007720:	4770      	bx	lr
 8007722:	d106      	bne.n	8007732 <expm1f+0x2a>
 8007724:	2a00      	cmp	r2, #0
 8007726:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800772a:	bfb8      	it	lt
 800772c:	eeb0 0a67 	vmovlt.f32	s0, s15
 8007730:	4770      	bx	lr
 8007732:	2a00      	cmp	r2, #0
 8007734:	db05      	blt.n	8007742 <expm1f+0x3a>
 8007736:	4975      	ldr	r1, [pc, #468]	; (800790c <expm1f+0x204>)
 8007738:	428b      	cmp	r3, r1
 800773a:	d95c      	bls.n	80077f6 <expm1f+0xee>
 800773c:	2000      	movs	r0, #0
 800773e:	f000 b91d 	b.w	800797c <__math_oflowf>
 8007742:	eddf 7a73 	vldr	s15, [pc, #460]	; 8007910 <expm1f+0x208>
 8007746:	ee70 7a27 	vadd.f32	s15, s0, s15
 800774a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800774e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007752:	d550      	bpl.n	80077f6 <expm1f+0xee>
 8007754:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007758:	4770      	bx	lr
 800775a:	496e      	ldr	r1, [pc, #440]	; (8007914 <expm1f+0x20c>)
 800775c:	428b      	cmp	r3, r1
 800775e:	d967      	bls.n	8007830 <expm1f+0x128>
 8007760:	496d      	ldr	r1, [pc, #436]	; (8007918 <expm1f+0x210>)
 8007762:	428b      	cmp	r3, r1
 8007764:	d847      	bhi.n	80077f6 <expm1f+0xee>
 8007766:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800791c <expm1f+0x214>
 800776a:	2a00      	cmp	r2, #0
 800776c:	bfa7      	ittee	ge
 800776e:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8007772:	eddf 6a6b 	vldrge	s13, [pc, #428]	; 8007920 <expm1f+0x218>
 8007776:	eddf 6a6b 	vldrlt	s13, [pc, #428]	; 8007924 <expm1f+0x21c>
 800777a:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800777e:	bfac      	ite	ge
 8007780:	2301      	movge	r3, #1
 8007782:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007786:	ee37 0a66 	vsub.f32	s0, s14, s13
 800778a:	ee77 7a40 	vsub.f32	s15, s14, s0
 800778e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007792:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8007796:	ee20 4a25 	vmul.f32	s8, s0, s11
 800779a:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8007928 <expm1f+0x220>
 800779e:	eddf 6a63 	vldr	s13, [pc, #396]	; 800792c <expm1f+0x224>
 80077a2:	ed9f 5a63 	vldr	s10, [pc, #396]	; 8007930 <expm1f+0x228>
 80077a6:	ee20 7a04 	vmul.f32	s14, s0, s8
 80077aa:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 80077ae:	eee7 6a06 	vfma.f32	s13, s14, s12
 80077b2:	ed9f 6a60 	vldr	s12, [pc, #384]	; 8007934 <expm1f+0x22c>
 80077b6:	eea6 6a87 	vfma.f32	s12, s13, s14
 80077ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007938 <expm1f+0x230>
 80077be:	eee6 6a07 	vfma.f32	s13, s12, s14
 80077c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80077c6:	eea6 5a87 	vfma.f32	s10, s13, s14
 80077ca:	eef0 6a46 	vmov.f32	s13, s12
 80077ce:	eee5 6a07 	vfma.f32	s13, s10, s14
 80077d2:	eee4 4a66 	vfms.f32	s9, s8, s13
 80077d6:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 80077da:	eea0 4a64 	vfms.f32	s8, s0, s9
 80077de:	ee36 5ae4 	vsub.f32	s10, s13, s9
 80077e2:	eec5 6a04 	vdiv.f32	s13, s10, s8
 80077e6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80077ea:	bb7b      	cbnz	r3, 800784c <expm1f+0x144>
 80077ec:	ee90 7a26 	vfnms.f32	s14, s0, s13
 80077f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80077f4:	4770      	bx	lr
 80077f6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80077fa:	2a00      	cmp	r2, #0
 80077fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007800:	bfb8      	it	lt
 8007802:	eef0 7a47 	vmovlt.f32	s15, s14
 8007806:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800793c <expm1f+0x234>
 800780a:	ee40 7a07 	vmla.f32	s15, s0, s14
 800780e:	eeb0 7a40 	vmov.f32	s14, s0
 8007812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007816:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800781a:	ee17 3a90 	vmov	r3, s15
 800781e:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800791c <expm1f+0x214>
 8007822:	eea6 7ae7 	vfms.f32	s14, s13, s15
 8007826:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8007920 <expm1f+0x218>
 800782a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800782e:	e7aa      	b.n	8007786 <expm1f+0x7e>
 8007830:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8007834:	d208      	bcs.n	8007848 <expm1f+0x140>
 8007836:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007940 <expm1f+0x238>
 800783a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800783e:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8007842:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007846:	4770      	bx	lr
 8007848:	2300      	movs	r3, #0
 800784a:	e7a2      	b.n	8007792 <expm1f+0x8a>
 800784c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8007856:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800785a:	d106      	bne.n	800786a <expm1f+0x162>
 800785c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007860:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8007864:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8007868:	4770      	bx	lr
 800786a:	2b01      	cmp	r3, #1
 800786c:	d118      	bne.n	80078a0 <expm1f+0x198>
 800786e:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8007872:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800787a:	bf5b      	ittet	pl
 800787c:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8007880:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8007884:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8007888:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800788c:	bf43      	ittte	mi
 800788e:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 8007892:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8007896:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800789a:	eeb0 0a46 	vmovpl.f32	s0, s12
 800789e:	4770      	bx	lr
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	2a39      	cmp	r2, #57	; 0x39
 80078a4:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 80078a8:	d90b      	bls.n	80078c2 <expm1f+0x1ba>
 80078aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80078ae:	ee76 7a67 	vsub.f32	s15, s12, s15
 80078b2:	ee17 3a90 	vmov	r3, s15
 80078b6:	4419      	add	r1, r3
 80078b8:	ee07 1a90 	vmov	s15, r1
 80078bc:	ee37 0ac6 	vsub.f32	s0, s15, s12
 80078c0:	4770      	bx	lr
 80078c2:	2b16      	cmp	r3, #22
 80078c4:	dc11      	bgt.n	80078ea <expm1f+0x1e2>
 80078c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078ca:	fa42 f303 	asr.w	r3, r2, r3
 80078ce:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 80078d2:	ee07 3a10 	vmov	s14, r3
 80078d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80078da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078de:	ee17 3a90 	vmov	r3, s15
 80078e2:	440b      	add	r3, r1
 80078e4:	ee00 3a10 	vmov	s0, r3
 80078e8:	4770      	bx	lr
 80078ea:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80078ee:	05db      	lsls	r3, r3, #23
 80078f0:	ee07 3a10 	vmov	s14, r3
 80078f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078f8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80078fc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007900:	ee17 3a90 	vmov	r3, s15
 8007904:	e7ed      	b.n	80078e2 <expm1f+0x1da>
 8007906:	bf00      	nop
 8007908:	4195b843 	.word	0x4195b843
 800790c:	42b17217 	.word	0x42b17217
 8007910:	0da24260 	.word	0x0da24260
 8007914:	3eb17218 	.word	0x3eb17218
 8007918:	3f851591 	.word	0x3f851591
 800791c:	3f317180 	.word	0x3f317180
 8007920:	3717f7d1 	.word	0x3717f7d1
 8007924:	b717f7d1 	.word	0xb717f7d1
 8007928:	b457edbb 	.word	0xb457edbb
 800792c:	36867e54 	.word	0x36867e54
 8007930:	bd088889 	.word	0xbd088889
 8007934:	b8a670cd 	.word	0xb8a670cd
 8007938:	3ad00d01 	.word	0x3ad00d01
 800793c:	3fb8aa3b 	.word	0x3fb8aa3b
 8007940:	7149f2ca 	.word	0x7149f2ca

08007944 <with_errnof>:
 8007944:	b513      	push	{r0, r1, r4, lr}
 8007946:	4604      	mov	r4, r0
 8007948:	ed8d 0a01 	vstr	s0, [sp, #4]
 800794c:	f7ff f912 	bl	8006b74 <__errno>
 8007950:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007954:	6004      	str	r4, [r0, #0]
 8007956:	b002      	add	sp, #8
 8007958:	bd10      	pop	{r4, pc}

0800795a <xflowf>:
 800795a:	b130      	cbz	r0, 800796a <xflowf+0x10>
 800795c:	eef1 7a40 	vneg.f32	s15, s0
 8007960:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007964:	2022      	movs	r0, #34	; 0x22
 8007966:	f7ff bfed 	b.w	8007944 <with_errnof>
 800796a:	eef0 7a40 	vmov.f32	s15, s0
 800796e:	e7f7      	b.n	8007960 <xflowf+0x6>

08007970 <__math_uflowf>:
 8007970:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007978 <__math_uflowf+0x8>
 8007974:	f7ff bff1 	b.w	800795a <xflowf>
 8007978:	10000000 	.word	0x10000000

0800797c <__math_oflowf>:
 800797c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007984 <__math_oflowf+0x8>
 8007980:	f7ff bfeb 	b.w	800795a <xflowf>
 8007984:	70000000 	.word	0x70000000

08007988 <__ieee754_expf>:
 8007988:	ee10 2a10 	vmov	r2, s0
 800798c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007990:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007994:	d902      	bls.n	800799c <__ieee754_expf+0x14>
 8007996:	ee30 0a00 	vadd.f32	s0, s0, s0
 800799a:	4770      	bx	lr
 800799c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80079a0:	d106      	bne.n	80079b0 <__ieee754_expf+0x28>
 80079a2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8007adc <__ieee754_expf+0x154>
 80079a6:	2900      	cmp	r1, #0
 80079a8:	bf18      	it	ne
 80079aa:	eeb0 0a67 	vmovne.f32	s0, s15
 80079ae:	4770      	bx	lr
 80079b0:	484b      	ldr	r0, [pc, #300]	; (8007ae0 <__ieee754_expf+0x158>)
 80079b2:	4282      	cmp	r2, r0
 80079b4:	dd02      	ble.n	80079bc <__ieee754_expf+0x34>
 80079b6:	2000      	movs	r0, #0
 80079b8:	f7ff bfe0 	b.w	800797c <__math_oflowf>
 80079bc:	2a00      	cmp	r2, #0
 80079be:	da05      	bge.n	80079cc <__ieee754_expf+0x44>
 80079c0:	4a48      	ldr	r2, [pc, #288]	; (8007ae4 <__ieee754_expf+0x15c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d902      	bls.n	80079cc <__ieee754_expf+0x44>
 80079c6:	2000      	movs	r0, #0
 80079c8:	f7ff bfd2 	b.w	8007970 <__math_uflowf>
 80079cc:	4a46      	ldr	r2, [pc, #280]	; (8007ae8 <__ieee754_expf+0x160>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80079d4:	d952      	bls.n	8007a7c <__ieee754_expf+0xf4>
 80079d6:	4a45      	ldr	r2, [pc, #276]	; (8007aec <__ieee754_expf+0x164>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80079de:	d834      	bhi.n	8007a4a <__ieee754_expf+0xc2>
 80079e0:	4b43      	ldr	r3, [pc, #268]	; (8007af0 <__ieee754_expf+0x168>)
 80079e2:	4413      	add	r3, r2
 80079e4:	ed93 7a00 	vldr	s14, [r3]
 80079e8:	4b42      	ldr	r3, [pc, #264]	; (8007af4 <__ieee754_expf+0x16c>)
 80079ea:	4413      	add	r3, r2
 80079ec:	ee30 7a47 	vsub.f32	s14, s0, s14
 80079f0:	f1c1 0201 	rsb	r2, r1, #1
 80079f4:	edd3 7a00 	vldr	s15, [r3]
 80079f8:	1a52      	subs	r2, r2, r1
 80079fa:	ee37 0a67 	vsub.f32	s0, s14, s15
 80079fe:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007a02:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8007af8 <__ieee754_expf+0x170>
 8007a06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007afc <__ieee754_expf+0x174>
 8007a0a:	eee6 6a05 	vfma.f32	s13, s12, s10
 8007a0e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8007b00 <__ieee754_expf+0x178>
 8007a12:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007a16:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007b04 <__ieee754_expf+0x17c>
 8007a1a:	eee5 6a06 	vfma.f32	s13, s10, s12
 8007a1e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8007b08 <__ieee754_expf+0x180>
 8007a22:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007a26:	eef0 6a40 	vmov.f32	s13, s0
 8007a2a:	eee5 6a46 	vfms.f32	s13, s10, s12
 8007a2e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8007a32:	ee20 5a26 	vmul.f32	s10, s0, s13
 8007a36:	bb92      	cbnz	r2, 8007a9e <__ieee754_expf+0x116>
 8007a38:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007a3c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007a40:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007a44:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8007a48:	4770      	bx	lr
 8007a4a:	4b30      	ldr	r3, [pc, #192]	; (8007b0c <__ieee754_expf+0x184>)
 8007a4c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007b10 <__ieee754_expf+0x188>
 8007a50:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007b14 <__ieee754_expf+0x18c>
 8007a54:	4413      	add	r3, r2
 8007a56:	edd3 7a00 	vldr	s15, [r3]
 8007a5a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007a5e:	eeb0 7a40 	vmov.f32	s14, s0
 8007a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a66:	ee17 2a90 	vmov	r2, s15
 8007a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a6e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007a72:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007b18 <__ieee754_expf+0x190>
 8007a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007a7a:	e7be      	b.n	80079fa <__ieee754_expf+0x72>
 8007a7c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8007a80:	d20b      	bcs.n	8007a9a <__ieee754_expf+0x112>
 8007a82:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007b1c <__ieee754_expf+0x194>
 8007a86:	ee70 6a26 	vadd.f32	s13, s0, s13
 8007a8a:	eef4 6ae5 	vcmpe.f32	s13, s11
 8007a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a92:	dd02      	ble.n	8007a9a <__ieee754_expf+0x112>
 8007a94:	ee30 0a25 	vadd.f32	s0, s0, s11
 8007a98:	4770      	bx	lr
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	e7af      	b.n	80079fe <__ieee754_expf+0x76>
 8007a9e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007aa2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8007aa6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8007aaa:	bfb8      	it	lt
 8007aac:	3264      	addlt	r2, #100	; 0x64
 8007aae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ab6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007aba:	ee17 3a90 	vmov	r3, s15
 8007abe:	bfab      	itete	ge
 8007ac0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007ac4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007ac8:	ee00 3a10 	vmovge	s0, r3
 8007acc:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8007b20 <__ieee754_expf+0x198>
 8007ad0:	bfbc      	itt	lt
 8007ad2:	ee00 3a10 	vmovlt	s0, r3
 8007ad6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8007ada:	4770      	bx	lr
 8007adc:	00000000 	.word	0x00000000
 8007ae0:	42b17217 	.word	0x42b17217
 8007ae4:	42cff1b5 	.word	0x42cff1b5
 8007ae8:	3eb17218 	.word	0x3eb17218
 8007aec:	3f851591 	.word	0x3f851591
 8007af0:	0800c2a4 	.word	0x0800c2a4
 8007af4:	0800c2ac 	.word	0x0800c2ac
 8007af8:	3331bb4c 	.word	0x3331bb4c
 8007afc:	b5ddea0e 	.word	0xb5ddea0e
 8007b00:	388ab355 	.word	0x388ab355
 8007b04:	bb360b61 	.word	0xbb360b61
 8007b08:	3e2aaaab 	.word	0x3e2aaaab
 8007b0c:	0800c29c 	.word	0x0800c29c
 8007b10:	3fb8aa3b 	.word	0x3fb8aa3b
 8007b14:	3f317180 	.word	0x3f317180
 8007b18:	3717f7d1 	.word	0x3717f7d1
 8007b1c:	7149f2ca 	.word	0x7149f2ca
 8007b20:	0d800000 	.word	0x0d800000

08007b24 <_init>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	bf00      	nop
 8007b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2a:	bc08      	pop	{r3}
 8007b2c:	469e      	mov	lr, r3
 8007b2e:	4770      	bx	lr

08007b30 <_fini>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	bf00      	nop
 8007b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b36:	bc08      	pop	{r3}
 8007b38:	469e      	mov	lr, r3
 8007b3a:	4770      	bx	lr
